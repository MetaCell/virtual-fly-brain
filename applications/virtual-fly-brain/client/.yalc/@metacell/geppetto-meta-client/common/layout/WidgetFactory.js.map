{"version":3,"file":"WidgetFactory.js","names":["WidgetFactory","componentMap","widgetConfig","refs","id","React","createRef","Component","component","proto","WrappedComponent","ref","importSession","sessionChange","session","store","dispatch","updateWidget","config","props","widgets","key","newWidget","confs","wid","current","exportSession","widgetId","WidgetToComponent"],"sources":["../../../src/common/layout/WidgetFactory.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Store } from 'redux';\n\nimport { WidgetComponent, Widget, ComponentMap } from './model';\nimport { updateWidget } from './actions';\n\n/**\n * Widget Factory. All components shown in the main flexible layout are instantiated here.\n *\n * @memberof Control\n */\nclass WidgetFactory {\n\n  /**\n   * Dict of widgets.\n   */\n  private widgets = {};\n\n  private componentMap: ComponentMap = {};\n\n  private store: Store<any>;\n\n  // didn't found a way to make standard refs work here, so using a custom callback\n  private refs: { [id: string]: React.RefObject<WidgetComponent> } = {};\n\n  constructor(componentMap: ComponentMap) {\n    this.widgets = {};\n    this.componentMap = componentMap;\n  }\n\n  setStore(store: Store<any>) {\n    this.store = store;\n  }\n\n  addComponentMapping(key, component) {\n    this.componentMap[key] = component;\n  }\n\n  updateComponentMapping(componentMap: ComponentMap) {\n    this.componentMap = { ...this.componentMap, ...componentMap }\n  }\n\n  private WidgetToComponent = ({ widgetConfig }: { widgetConfig: Widget }) => {\n    this.refs[widgetConfig.id] = React.createRef();\n    const Component = this.componentMap[widgetConfig.component] as any;\n    const proto = Component.WrappedComponent ? Component.WrappedComponent.proto: Component.proto;\n    const ref = proto && proto.importSession ? {ref: this.refs[widgetConfig.id]}: {};\n\n    // Note: the sessionChange is an option that is available to save components sessions within the widget itself\n    // It's a more reacty way than using references and also works for functional components, but it's not \n    // possible to push a session update top-down, so it's the component that would need to know when its internal \n    // session data changed. Note that the session save/load is not a preferable way to implement application state\n    // logic persistence, it's rather a workaround to catch what may escape form React/Redux control (e.g. canvas data)\n    const sessionChange = (session) => {\n      this.store.dispatch(updateWidget({ ...widgetConfig, session }));\n    }\n    return Component ?\n      <Component\n        id={widgetConfig.id}\n        key={widgetConfig.id}\n        session={widgetConfig.session}\n        onSessionChange={sessionChange}\n        {...widgetConfig.config}\n        {...widgetConfig.props}\n        {...ref}\n      /> :\n      <div>Error on widget configuration {widgetConfig.id}: no component matching \"{widgetConfig.component}\"</div>\n\n  }\n\n  /**\n   * Widget configuration is the same we are using in the flexlayout actions\n   *\n   * { id, name, component, panelName, [instancePath], * } widgetConfig\n   */\n  factory(widgetConfig) {\n    if (!this.widgets[widgetConfig.id]) {\n      this.widgets[widgetConfig.id] = this.newWidget(widgetConfig);\n    }\n\n    return this.widgets[widgetConfig.id];\n  }\n\n  /**\n   * Retrieves all components\n   */\n  getComponents(): { [id: string]: WidgetComponent } {\n    const confs: { [id: string]: WidgetComponent } = {};\n    for (const wid in this.refs) {\n      const component = this.refs[wid].current;\n      if (component && component.exportSession) {\n        confs[wid] = component;\n      }\n    }\n    return confs;\n  }\n\n  /**\n   * Returns widget matching `widgetId`.\n   *\n   * @param {string} widgetId specific widget id\n   */\n  getComponent(widgetId: string) {\n    return this.refs[widgetId]?.current;\n  }\n\n  /**\n   * Updates a widget.\n   *\n   * @param widgetConfig\n   */\n  updateWidget(widgetConfig) {\n    this.widgets[widgetConfig.id] = this.newWidget(widgetConfig);\n    return this.widgets[widgetConfig.id];\n  }\n\n  /**\n   * Creates a new widget according to `widgetConfig`.\n   *\n   * @param widgetConfig\n   */\n  private newWidget(widgetConfig) {\n    const { WidgetToComponent } = this;\n    return <WidgetToComponent widgetConfig={widgetConfig} />\n  }\n}\n\nexport default WidgetFactory;"],"mappings":"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"}