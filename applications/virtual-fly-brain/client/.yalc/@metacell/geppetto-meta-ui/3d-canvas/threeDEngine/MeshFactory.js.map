{"version":3,"file":"MeshFactory.js","names":["_particle","_interopRequireDefault","require","_util","_GLTFLoader","_OBJLoader","_DRACOLoader","_ColladaLoader","_ModelFactory","_Resources","obj","__esModule","_typeof","o","Symbol","iterator","constructor","prototype","_createForOfIteratorHelper","allowArrayLike","it","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","minLen","_arrayLikeToArray","Object","toString","slice","name","from","test","arr","len","arr2","ownKeys","r","t","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_regeneratorRuntime","hasOwnProperty","a","c","asyncIterator","u","toStringTag","define","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","resultName","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","mark","setPrototypeOf","__proto__","awrap","async","Promise","reverse","pop","prev","charAt","stop","rval","handle","complete","finish","_catch","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","self","args","undefined","_toPropertyKey","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","_createClass","protoProps","staticProps","_toPrimitive","toPrimitive","String","Number","MeshFactory","exports","scene","linesThreshold","renderingTheshold","depthWrite","linePrecisionMinRadius","minAllowedLinePrecision","particleTexture","dracoDecoderPath","THREE","meshes","splitMeshes","visualModelMap","connectionLines","complexity","sceneMaxRadius","Cache","enabled","setupLoaders","instancesMap","Map","dracoLoader","DRACOLoader","setDecoderPath","manager","LoadingManager","onProgress","item","loaded","total","console","log","objLoader","OBJLoader","gltfLoader","GLTFLoader","setDRACOLoader","loaders","Resources","GLTF","DRC","OBJ","COLLADA","ColladaLoader","TextureLoader","_start","_callee","_callee$","_context","traverseInstances","concat","start","_x","getMeshes","m","_traverseInstances","_callee2","instances","_iterator","_step","mInstance","gInstance","_callee2$","_context2","entries","visibility","color","setColor","Instances","getInstance","buildVisualInstance","t0","_x2","_buildVisualInstance","_callee3","instancePath","_callee3$","_context3","getInstancePath","generate3DObjects","init3DObject","_x3","_generate3DObjects","_callee4","materials","instanceObjects","threeDeeObjList","mergedObjs","_callee4$","_context4","mesh","getMeshPhongMaterial","line","getLineMaterial","walkVisTreeGen3DObjs","merge3DObjects","_x4","COLORS","DEFAULT","material","MeshPhongMaterial","opacity","shininess","flatShading","setThreeColor","defaultColor","defaultOpacity","OPACITY","nowireframe","LineBasicMaterial","threeColor","setHex","b","set","_walkVisTreeGen3DObjs","_callee6","_this","visualValue","threeDObj","visualType","threeDObjList","_callee6$","_context6","hasVisualValue","getVisualValue","create3DObjectFromInstance","getId","getVisualType","all","_ref","_callee5","vt","_callee5$","_context5","walkVisTreeGen3DObjsVisualType","t1","_x7","_x5","_x6","_walkVisTreeGen3DObjsVisualType","_callee7","threeDeeObj","_visualValue","_visualValue2","_callee7$","_context7","getMetaType","COMPOSITE_VISUAL_TYPE_NODE","getVariables","getWrappedObj","initialValues","VISUAL_TYPE_NODE","getVariable","defaultValue","_x8","_x9","_x10","_create3DObjectFromInstance","_callee8","node","id","threeObject","lines","_callee8$","_context8","getDefaultGeometryType","eClass","PARTICLES","CYLINDER","SPHERE","createParticles","create3DLineFromNode","create3DCylinderFromNode","create3DSphereFromNode","loadColladaModelFromNode","loadThreeOBJModelFromNode","loadThreeGLTFModelFromNode","loadThreeDRCModelFromNode","visible","highlighted","_x11","_x12","_x13","_x14","aboveLinesThreshold","geometry","Geometry","Color","Math","floor","random","textureLoader","load","particle","PointsMaterial","size","map","blending","NormalBlending","depthTest","transparent","particles","vertices","Vector3","x","z","Points","bottomBasePos","position","topBasePos","distal","axis","subVectors","midPoint","addVectors","multiplyScalar","Line","applyMatrix","Matrix4","makeTranslation","makeRotationY","PI","lookAt","fromArray","toArray","verticesNeedUpdate","sphere","SphereGeometry","radius","Mesh","sphereNode","cylNode","CylinderGeometry","topRadius","bottomRadius","makeRotationX","loader","options","convertUpAxis","that","parse","collada","traverse","child","wireframe","computeVertexNormals","SkinnedMesh","skinning","parseBase64","_loadThreeGLTFModelFromNode","_callee9","gltfData","_callee9$","_context9","modelParser","gltf","children","_x15","_loadThreeDRCModelFromNode","_callee10","_callee10$","_context10","modelLoader","drc","_x16","str","atob","split","url","data","_modelParser","_callee11","results","_callee11$","_context11","_x17","_x18","getPosition","input","output","elements","splitMesh","visualObject","substring","splitGroups","calculateSceneMaxRadius","calculateSceneComplexity","objArray","mergedMeshesPaths","ret","mergedLines","mergedMeshes","dynamic","updateMatrix","merge","matrix","LineSegments","tempmesh","groupElements","hasMesh","mergedMesh","geometryGroups","groupElement","groupName","groupMerge","added","lastIndexOf","object","replace","addMeshToGeometryGroup","groupElementsReference","getInitialValue","objectGroup","ModelFactory","$ref","SPLIT","createGroupMeshes","groups","indexOf","groupMesh","geometryGroup","geometryIdentifier","copy","_this2","getRealMeshesForInstancePath","_loop","keySplitMeshes","startsWith","currentComplexity","currentRadius","computeBoundingSphere","boundingSphere","getLinePrecision","rayCasterLinePrecision","round","cleanWith3DObject","_i","_Object$keys","meshKey","uuid","clean","setParticleTexture","setLinesThreshold"],"sources":["../../../src/3d-canvas/threeDEngine/MeshFactory.js"],"sourcesContent":["import particle from '../textures/particle.png';\nimport { hasVisualValue } from \"./util\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { OBJLoader } from \"./OBJLoader\";\nimport { DRACOLoader } from \"three/examples/jsm/loaders/DRACOLoader\";\nimport { ColladaLoader } from \"three/examples/jsm/loaders/ColladaLoader\";\nimport ModelFactory from '@metacell/geppetto-meta-core/ModelFactory';\nimport Resources from '@metacell/geppetto-meta-core/Resources';\n\n\nexport default class MeshFactory {\n  constructor (\n    scene,\n    linesThreshold = 2000,\n    renderingTheshold = 500,\n    depthWrite = true,\n    linePrecisionMinRadius = 300,\n    minAllowedLinePrecision = 1,\n    particleTexture,\n    dracoDecoderPath,\n    THREE\n  ) {\n    this.scene = scene;\n    this.depthWrite = depthWrite;\n    this.meshes = {};\n    this.splitMeshes = {};\n    this.visualModelMap = {};\n    this.connectionLines = {};\n    this.complexity = 0;\n    this.sceneMaxRadius = 0;\n    this.linePrecisionMinRadius = linePrecisionMinRadius;\n    this.minAllowedLinePrecision = minAllowedLinePrecision;\n    this.linesThreshold = linesThreshold;\n    this.renderingTheshold = renderingTheshold;\n    this.particleTexture = particleTexture;\n    this.dracoDecoderPath = dracoDecoderPath ? dracoDecoderPath : 'https://www.gstatic.com/draco/versioned/decoders/1.5.5/'\n    this.THREE = THREE ? THREE : require('three');\n    this.THREE.Cache.enabled = true;\n    this.setupLoaders();\n    this.instancesMap = new Map();\n  }\n\n  setupLoaders (){\n    const dracoLoader = new DRACOLoader()\n    dracoLoader.setDecoderPath(this.dracoDecoderPath);\n\n    const manager = new this.THREE.LoadingManager();\n    manager.onProgress = function (item, loaded, total) {\n      console.log(item, loaded, total);\n    };\n    const objLoader = new OBJLoader(manager);\n\n    const gltfLoader = new GLTFLoader();\n    gltfLoader.setDRACOLoader( dracoLoader );\n\n    this.loaders = {\n      [Resources.GLTF]: gltfLoader,\n      [Resources.DRC]: dracoLoader,\n      [Resources.OBJ]: objLoader,\n      [Resources.COLLADA]: new ColladaLoader(),\n      'TextureLoader': new this.THREE.TextureLoader()\n    }\n  }\n\n\n  async start (instancesMap) {\n    this.instancesMap = instancesMap;\n    await this.traverseInstances(this.instancesMap);\n    if (this.complexity > this.renderingTheshold)\n      throw(`Fatal Error while attemping to render: Scene complextiy ${this.complexity} exceeds pre-defined completity theshold ${this.renderingTheshold}`);\n  }\n\n\n  getMeshes () {\n    const meshes = { ...this.splitMeshes };\n    for (const m in this.meshes) {\n      if (!(m in meshes)) {\n        meshes[m] = this.meshes[m];\n      }\n    }\n    return meshes;\n  }\n\n\n  async traverseInstances (instances) {\n    for (const mInstance of instances.entries()) {\n      if (mInstance[1].visibility === false) {\n        delete this.meshes[mInstance[0]];\n        return;\n      } else if (this.meshes[mInstance[0]] !== undefined) {\n        if (mInstance[1].color !== undefined) {\n          this.setColor(mInstance[0], mInstance[1].color);\n        }\n        continue;\n      }\n      const gInstance = Instances.getInstance(mInstance[0]);\n      await this.buildVisualInstance(gInstance);\n      if (mInstance[1].color !== undefined) {\n        this.setColor(mInstance[0], mInstance[1].color);\n      }\n    }\n  }\n\n\n  async buildVisualInstance (instance) {\n    const instancePath = instance.getInstancePath();\n    // If the same mesh already exists skip the recreation\n    if (this.meshes[instancePath]) {\n      return;\n    } else {\n      const meshes = await this.generate3DObjects(instance);\n      this.init3DObject(meshes, instance);\n    }\n  }\n\n  async generate3DObjects (instance) {\n\n    const materials = {\n      mesh: this.getMeshPhongMaterial(),\n      line: this.getLineMaterial(),\n    };\n\n    const instanceObjects = [];\n    const threeDeeObjList = await this.walkVisTreeGen3DObjs(instance, materials);\n    if (threeDeeObjList.length > 1) {\n      const mergedObjs = this.merge3DObjects(threeDeeObjList, materials);\n      // investigate need to obj.dispose for obj in threeDeeObjList\n      if (mergedObjs != null) {\n        mergedObjs.instancePath = instance.getInstancePath();\n        instanceObjects.push(mergedObjs);\n      } else {\n        for (const obj in threeDeeObjList) {\n          threeDeeObjList[obj].instancePath = instance.getInstancePath();\n          instanceObjects.push(threeDeeObjList[obj]);\n        }\n      }\n    } else if (threeDeeObjList.length === 1) {\n      // only one object in list, add it to local array and set\n      instanceObjects.push(threeDeeObjList[0]);\n      instanceObjects[0].instancePath = instance.getInstancePath();\n    }\n    return instanceObjects;\n  }\n\n  getMeshPhongMaterial (color) {\n    if (color === undefined) {\n      color = Resources.COLORS.DEFAULT;\n    }\n    const material = new this.THREE.MeshPhongMaterial({\n      opacity: 1,\n      shininess: 10,\n      flatShading: false,\n      depthWrite: this.depthWrite,\n    });\n\n    this.setThreeColor(material.color, color);\n    material.defaultColor = color;\n    material.defaultOpacity = Resources.OPACITY.DEFAULT;\n    material.nowireframe = true;\n    return material;\n  }\n\n  getLineMaterial (color) {\n    if (color === undefined) {\n      color = Resources.COLORS.DEFAULT;\n    }\n    const material = new this.THREE.LineBasicMaterial({\n      depthWrite: this.depthWrite,\n    });\n    this.setThreeColor(material.color, color);\n    material.defaultColor = color;\n    material.defaultOpacity = Resources.OPACITY.DEFAULT;\n    return material;\n  }\n\n  setThreeColor (threeColor, color) {\n    // eslint-disable-next-line no-restricted-globals\n    if (!isNaN(color % 1)) {\n      // we have an integer (hex) value\n      threeColor.setHex(color);\n    } else if (\n      Object.prototype.hasOwnProperty.call(color, 'r')\n        && Object.prototype.hasOwnProperty.call(color, 'g')\n        && Object.prototype.hasOwnProperty.call(color, 'b')\n    ) {\n      threeColor.r = color.r;\n      threeColor.g = color.g;\n      threeColor.b = color.b;\n    } else {\n      threeColor.set(color);\n    }\n  }\n\n  async walkVisTreeGen3DObjs (instance, materials) {\n    if (hasVisualValue(instance)) {\n      const visualValue = instance.getVisualValue();\n      const threeDObj = await this.create3DObjectFromInstance(\n        instance,\n        visualValue,\n        instance.getId(),\n        materials\n      );\n      if (threeDObj) {\n        return [threeDObj]\n      }\n    }\n    let visualType\n    try {\n      visualType = instance.getVisualType();\n    } catch (e) {\n      visualType = undefined\n    }\n    if (visualType === undefined) {\n      return [];\n    } else if (visualType.isArray) {\n      const threeDObjList = []\n      await Promise.all(visualType.forEach(\n        async vt => threeDObjList.push((await this.walkVisTreeGen3DObjsVisualType(vt, instance, materials)))\n      ))\n      return threeDObjList\n    } else {\n      return await this.walkVisTreeGen3DObjsVisualType(visualType, instance, materials)\n    }\n  }\n\n  async walkVisTreeGen3DObjsVisualType (visualType, instance, materials) {\n    const threeDeeObjList = [];\n    let threeDeeObj = null;\n    if (\n      visualType.getMetaType() === Resources.COMPOSITE_VISUAL_TYPE_NODE\n    ) {\n      for (const v in visualType.getVariables()) {\n        const visualValue = visualType.getVariables()[v].getWrappedObj().initialValues[0].value;\n        threeDeeObj = await this.create3DObjectFromInstance(\n          instance,\n          visualValue,\n          visualType.getVariables()[v].getId(),\n          materials\n        );\n        if (threeDeeObj) {\n          threeDeeObjList.push(threeDeeObj);\n        }\n      }\n    } else if (\n      visualType.getMetaType() === Resources.VISUAL_TYPE_NODE\n        && visualType.getId() === 'particles'\n    ) {\n      const visualValue = instance.getVariable().getWrappedObj().initialValues[0].value;\n      threeDeeObj = await this.create3DObjectFromInstance(\n        instance,\n        visualValue,\n        instance.getVariable().getId(),\n        materials\n      );\n      if (threeDeeObj) {\n        threeDeeObjList.push(threeDeeObj);\n      }\n    } else {\n      const visualValue = visualType.getWrappedObj().defaultValue;\n      threeDeeObj = await this.create3DObjectFromInstance(\n        instance,\n        visualValue,\n        visualType.getId(),\n        materials\n      );\n      if (threeDeeObj) {\n        threeDeeObjList.push(threeDeeObj);\n      }\n    }\n    return threeDeeObjList\n  }\n\n  async create3DObjectFromInstance (instance, node, id, materials) {\n    let threeObject = null;\n\n    const lines = this.getDefaultGeometryType() === 'lines';\n\n    const material = lines ? materials.line : materials.mesh;\n\n    // eslint-disable-next-line default-case\n    switch (node.eClass) {\n    case Resources.PARTICLES:\n      threeObject = this.createParticles(node);\n      break;\n\n    case Resources.CYLINDER:\n      if (lines) {\n        threeObject = this.create3DLineFromNode(node, material);\n      } else {\n        threeObject = this.create3DCylinderFromNode(node, material);\n      }\n      break;\n\n    case Resources.SPHERE:\n      if (lines) {\n        threeObject = this.create3DLineFromNode(node, material);\n      } else {\n        threeObject = this.create3DSphereFromNode(node, material);\n      }\n      break;\n    case Resources.COLLADA:\n      threeObject = this.loadColladaModelFromNode(node);\n      break;\n    case Resources.OBJ:\n      threeObject = this.loadThreeOBJModelFromNode(node);\n      break;\n    case Resources.GLTF:\n      threeObject = await this.loadThreeGLTFModelFromNode(node);\n      break;\n    case Resources.DRC:\n      threeObject = await this.loadThreeDRCModelFromNode(node);\n      break;\n    default:\n      console.error(`Invalid node.eClass on node ${node}`)\n    }\n\n    if (threeObject) {\n      threeObject.visible = true;\n      /*\n       * FIXME: this is empty for collada and obj nodes\n       */\n      const instancePath = `${instance.getInstancePath()}.${id}`\n      threeObject.instancePath = instancePath;\n      threeObject.highlighted = false;\n\n      // FIXME: shouldn't that be the vistree? why is it also done at the loadEntity level??\n      this.visualModelMap[instancePath] = threeObject;\n    }\n    return threeObject;\n  }\n\n  getDefaultGeometryType () {\n    const aboveLinesThreshold = this.complexity > this.linesThreshold;\n    return aboveLinesThreshold ? 'lines' : 'cylinders';\n  }\n\n  createParticles (node) {\n    const geometry = new this.THREE.Geometry();\n    const threeColor = new this.THREE.Color();\n    const color = `0x${Math.floor(Math.random() * 16777215).toString(16)}`;\n    threeColor.setHex(color);\n\n    const textureLoader = this.loaders['TextureLoader'];\n    const particleTexture = this.particleTexture\n      ? this.particleTexture\n      : textureLoader.load(particle);\n    const material = new this.THREE.PointsMaterial({\n      size: 0.5,\n      map: particleTexture,\n      blending: this.THREE.NormalBlending,\n      depthTest: true,\n      transparent: true,\n      color: threeColor,\n      depthWrite: this.depthWrite,\n    });\n\n    for (let p = 0; p < node.particles.length; p++) {\n      geometry.vertices.push(\n        new this.THREE.Vector3(\n          node.particles[p].x,\n          node.particles[p].y,\n          node.particles[p].z\n        )\n      );\n    }\n\n    material.defaultColor = color;\n    material.defaultOpacity = 1;\n    const threeObject = new this.THREE.Points(geometry, material);\n    threeObject.visible = true;\n    threeObject.instancePath = node.instancePath;\n    threeObject.highlighted = false;\n    return threeObject;\n  }\n\n  create3DLineFromNode (node, material) {\n    let threeObject = null;\n    if (node.eClass === Resources.CYLINDER) {\n      const bottomBasePos = new this.THREE.Vector3(\n        node.position.x,\n        node.position.y,\n        node.position.z\n      );\n      const topBasePos = new this.THREE.Vector3(\n        node.distal.x,\n        node.distal.y,\n        node.distal.z\n      );\n\n      const axis = new this.THREE.Vector3();\n      axis.subVectors(topBasePos, bottomBasePos);\n      const midPoint = new this.THREE.Vector3();\n      midPoint.addVectors(bottomBasePos, topBasePos).multiplyScalar(0.5);\n\n      const geometry = new this.THREE.Geometry();\n      geometry.vertices.push(bottomBasePos);\n      geometry.vertices.push(topBasePos);\n      threeObject = new this.THREE.Line(geometry, material);\n      threeObject.applyMatrix(\n        new this.THREE.Matrix4().makeTranslation(0, axis.length() / 2, 0)\n      );\n      threeObject.applyMatrix(\n        new this.THREE.Matrix4().makeRotationY(Math.PI / 2)\n      );\n      threeObject.lookAt(axis);\n      threeObject.position.fromArray(bottomBasePos.toArray());\n      threeObject.applyMatrix(\n        new this.THREE.Matrix4().makeRotationY(-Math.PI / 2)\n      );\n\n      threeObject.geometry.verticesNeedUpdate = true;\n    } else if (node.eClass === Resources.SPHERE) {\n      const sphere = new this.THREE.SphereGeometry(node.radius, 20, 20);\n      threeObject = new this.THREE.Mesh(sphere, material);\n      threeObject.position.set(\n        node.position.x,\n        node.position.y,\n        node.position.z\n      );\n      threeObject.geometry.verticesNeedUpdate = true;\n    }\n    return threeObject;\n  }\n\n  create3DSphereFromNode (sphereNode, material) {\n    const sphere = new this.THREE.SphereGeometry(sphereNode.radius, 20, 20);\n    // sphere.applyMatrix(new this.THREE.Matrix4().makeScale(-1,1,1));\n    const threeObject = new this.THREE.Mesh(sphere, material);\n    threeObject.position.set(\n      sphereNode.position.x,\n      sphereNode.position.y,\n      sphereNode.position.z\n    );\n\n    return threeObject;\n  }\n\n  create3DCylinderFromNode (cylNode, material) {\n    const bottomBasePos = new this.THREE.Vector3(\n      cylNode.position.x,\n      cylNode.position.y,\n      cylNode.position.z\n    );\n    const topBasePos = new this.THREE.Vector3(\n      cylNode.distal.x,\n      cylNode.distal.y,\n      cylNode.distal.z\n    );\n\n    const axis = new this.THREE.Vector3();\n    axis.subVectors(topBasePos, bottomBasePos);\n\n    const c = new this.THREE.CylinderGeometry(\n      cylNode.topRadius,\n      cylNode.bottomRadius,\n      axis.length(),\n      20,\n      1,\n      false\n    );\n\n    // shift it so one end rests on the origin\n    c.applyMatrix(\n      new this.THREE.Matrix4().makeTranslation(0, axis.length() / 2, 0)\n    );\n    // rotate it the right way for lookAt to work\n    c.applyMatrix(new this.THREE.Matrix4().makeRotationX(Math.PI / 2));\n    // make a mesh with the geometry\n    const threeObject = new this.THREE.Mesh(c, material);\n    // make it point to where we want\n    threeObject.lookAt(axis);\n    // move base\n    threeObject.position.fromArray(bottomBasePos.toArray());\n    threeObject.geometry.verticesNeedUpdate = true;\n\n    return threeObject;\n  }\n\n  // TODO: Collada example\n  loadColladaModelFromNode (node) {\n    const loader = this.loaders[Resources.COLLADA]\n    loader.options.convertUpAxis = true;\n    let scene = null;\n    const that = this;\n    loader.parse(node.collada, function (collada) {\n      // eslint-disable-next-line prefer-destructuring\n      scene = collada.scene;\n      scene.traverse(function (child) {\n        if (child instanceof that.THREE.Mesh) {\n          child.material.defaultColor = Resources.COLORS.DEFAULT;\n          child.material.defaultOpacity = Resources.OPACITY.DEFAULT;\n          child.material.wireframe = that.wireframe;\n          child.material.opacity = Resources.OPACITY.DEFAULT;\n          child.geometry.computeVertexNormals();\n        }\n        if (child instanceof that.THREE.SkinnedMesh) {\n          child.material.skinning = true;\n          child.material.defaultColor = Resources.COLORS.DEFAULT;\n          child.material.defaultOpacity = Resources.OPACITY.DEFAULT;\n          child.material.wireframe = that.wireframe;\n          child.material.opacity = Resources.OPACITY.DEFAULT;\n          child.geometry.computeVertexNormals();\n        }\n      });\n    });\n    return scene;\n  }\n\n  loadThreeOBJModelFromNode (node) {\n    const loader = this.loaders[Resources.OBJ];\n    const textureLoader = this.loaders['TextureLoader']\n    const particleTexture = this.particleTexture\n      ? this.particleTexture\n      : textureLoader.load(particle);\n\n    const scene = loader.parse(this.parseBase64(node.obj), particleTexture);\n    const that = this;\n    scene.traverse(function (child) {\n      if (child instanceof that.THREE.Mesh) {\n        that.setThreeColor(\n          child.material.color,\n          Resources.COLORS.DEFAULT\n        );\n        child.material.wireframe = that.wireframe;\n        child.material.defaultColor = Resources.COLORS.DEFAULT;\n        child.material.defaultOpacity = Resources.OPACITY.DEFAULT;\n        child.material.opacity = Resources.OPACITY.DEFAULT;\n        child.geometry.computeVertexNormals();\n      }\n    });\n\n    return scene;\n  }\n\n  async loadThreeGLTFModelFromNode (node) {\n    const loader = this.loaders[Resources.GLTF]\n    const gltfData = await this.modelParser(loader, this.parseBase64(node.gltf));\n    if (gltfData.scene.children.length === 1) {\n      const that = this;\n      gltfData.scene.children[0].traverse(function (child) {\n        if (child instanceof that.THREE.Mesh) {\n          that.setThreeColor(\n            child.material.color,\n            Resources.COLORS.DEFAULT\n          );\n          child.material.wireframe = that.wireframe;\n          child.material.defaultColor = Resources.COLORS.DEFAULT;\n          child.material.defaultOpacity = Resources.OPACITY.DEFAULT;\n          child.material.opacity = Resources.OPACITY.DEFAULT;\n          child.geometry.computeVertexNormals();\n        }\n      });\n    } else {\n      console.error(\"GEPPETTO Error - GLTF loaded more than one object in the scene.\");\n    }\n    return gltfData.scene.children[0];\n  }\n\n  async loadThreeDRCModelFromNode (node) {\n    const dracoLoader = this.loaders[Resources.DRC];\n    const geometry = await this.modelLoader(dracoLoader, node.drc);\n    geometry.computeVertexNormals();\n    return new this.THREE.Mesh(geometry, this.getMeshPhongMaterial())\n  }\n\n  parseBase64 (str) {\n    try {\n      return atob(str.split('base64,')[1]);\n    } catch (e) {\n      return str\n    }\n  }\n\n  modelLoader (loader, url) {\n    return new Promise((resolve, reject) => {\n      loader.load(url, data => resolve(data), null, reject);\n    });\n  }\n\n  async modelParser (loader, data) {\n    let results = await new Promise((resolve, reject) => {\n      loader.parse(data, null, data => {\n        return resolve(data);\n      }, reject);\n    });\n    return results;\n  }\n\n  init3DObject (meshes, instance) {\n    const instancePath = instance.getInstancePath();\n    const position = instance.getPosition();\n    for (const m in meshes) {\n      const mesh = meshes[m];\n\n      mesh.instancePath = instancePath;\n      /*\n      * if the model file is specifying a position for the loaded meshes then we translate them here\n      */\n      if (position != null) {\n        mesh.position.set(position.x, position.y, position.z);\n      }\n\n      this.meshes[instancePath] = mesh;\n      this.meshes[instancePath].visible = true;\n      this.meshes[instancePath].defaultOpacity = 1;\n      this.meshes[instancePath].input = false;\n      this.meshes[instancePath].output = false;\n\n      // Split anything that was splitted before\n      if (instancePath in this.splitMeshes) {\n        const { splitMeshes } = this;\n        const elements = {};\n        for (const splitMesh in splitMeshes) {\n          if (\n            splitMeshes[splitMesh].instancePath === instancePath\n              && splitMesh !== instancePath\n          ) {\n            const visualObject = splitMesh.substring(instancePath.length + 1);\n            elements[visualObject] = '';\n          }\n        }\n        if (Object.keys(elements).length > 0) {\n          this.splitGroups(instance, elements);\n        }\n      }\n      this.calculateSceneMaxRadius(mesh);\n      this.calculateSceneComplexity(mesh);\n    }\n  }\n\n  merge3DObjects (objArray, materials) {\n    const mergedMeshesPaths = [];\n    let ret = null;\n    let mergedLines;\n    let mergedMeshes;\n    const that = this;\n    objArray.forEach(function (obj) {\n      if (obj instanceof that.THREE.Line) {\n        if (mergedLines === undefined) {\n          mergedLines = new that.THREE.Geometry();\n        }\n        mergedLines.vertices.push(obj.geometry.vertices[0]);\n        mergedLines.vertices.push(obj.geometry.vertices[1]);\n      } else if (obj.geometry.type === 'Geometry') {\n        // This catches both Collada an OBJ\n        if (objArray.length > 1) {\n          throw Error('Merging of multiple OBJs or Colladas not supported');\n        } else {\n          ret = obj;\n        }\n      } else {\n        if (mergedMeshes === undefined) {\n          mergedMeshes = new that.THREE.Geometry();\n        }\n        obj.geometry.dynamic = true;\n        obj.geometry.verticesNeedUpdate = true;\n        obj.updateMatrix();\n        mergedMeshes.merge(obj.geometry, obj.matrix);\n      }\n      mergedMeshesPaths.push(obj.instancePath);\n    });\n\n    if (mergedLines === undefined) {\n      /*\n       * There are no line geometries, we just create a mesh for the merge of the solid geometries\n       * and apply the mesh material\n       */\n      ret = new that.THREE.Mesh(mergedMeshes, materials.mesh);\n    } else {\n      ret = new that.THREE.LineSegments(mergedLines, materials.line);\n      if (mergedMeshes !== undefined) {\n        // we merge into a single mesh both types of geometries (from lines and 3D objects)\n        const tempmesh = new that.THREE.Mesh(mergedMeshes, materials.mesh);\n        ret.geometry.merge(tempmesh.geometry, tempmesh.matrix);\n      }\n    }\n\n    if (ret != null && !Array.isArray(ret)) {\n      ret.mergedMeshesPaths = mergedMeshesPaths;\n    }\n\n    return ret;\n  }\n\n  /**\n   * Split merged mesh into individual meshes\n   *\n   *            instance - original instance\n   *            groups - The groups that we need to split mesh into\n   * @param instance\n   * @param groupElements\n   */\n  splitGroups (instance, groupElements) {\n    if (!this.hasMesh(instance)) {\n      return;\n    }\n    const instancePath = instance.getInstancePath();\n\n    // retrieve the merged mesh\n    const mergedMesh = this.meshes[instancePath];\n    // create object to hold geometries used for merging objects in groups\n    const geometryGroups = {};\n\n    /*\n     * reset the aspect instance path group mesh, this is used to group visual objects that don't belong to any of the groups passed as parameter\n     */\n    this.splitMeshes[instancePath] = null;\n    geometryGroups[instancePath] = new this.THREE.Geometry();\n\n    // create map of geometry groups for groups\n    for (const groupElement in groupElements) {\n      const groupName = `${instancePath}.${groupElement}`;\n\n      const geometry = new this.THREE.Geometry();\n      geometry.groupMerge = true;\n\n      geometryGroups[groupName] = geometry;\n    }\n\n    // get map of all meshes that merged mesh was merging\n    const map = mergedMesh.mergedMeshesPaths;\n\n    /*\n     * flag for keep track what visual objects were added to group\n     * meshes already\n     */\n    let added = false;\n    /*\n     * loop through individual meshes, add them to group, set new\n     * material to them\n     */\n\n    for (const v in map) {\n      if (v !== undefined) {\n        const m = this.visualModelMap[map[v]];\n\n        // eslint-disable-next-line no-eval\n        Instances.getInstance(map[v].substring(0, map[v].lastIndexOf('.')));\n        const object = instance.getVisualType()[\n          map[v].replace(`${instancePath}.`, '')\n        ];\n\n        // If it is a segment compare to the id otherwise check in the visual groups\n        if (object.getId() in groupElements) {\n          // true means don't add to mesh with non-groups visual objects\n          added = this.addMeshToGeometryGroup(\n            instance,\n            object.getId(),\n            geometryGroups,\n            m\n          );\n        } else {\n          // get group elements list for object\n          const groupElementsReference = object.getInitialValue().value.groupElements;\n          for (let i = 0; i < groupElementsReference.length; i++) {\n            const objectGroup = ModelFactory.resolve(\n              groupElementsReference[i].$ref\n            ).getId();\n            if (objectGroup in groupElements) {\n              // true means don't add to mesh with non-groups visual objects\n              added = this.addMeshToGeometryGroup(\n                instance,\n                objectGroup,\n                geometryGroups,\n                m\n              );\n            }\n          }\n        }\n\n        /*\n         * if visual object didn't belong to group, add it to mesh\n         * with remainder of them\n         */\n        if (!added) {\n          const geometry = geometryGroups[instancePath];\n          if (m instanceof this.THREE.Line) {\n            geometry.vertices.push(m.geometry.vertices[0]);\n            geometry.vertices.push(m.geometry.vertices[1]);\n          } else {\n            // merged mesh into corresponding geometry\n            geometry.merge(m.geometry, m.matrix);\n          }\n        }\n        // reset flag for next visual object\n        added = false;\n      }\n    }\n\n    groupElements[instancePath] = {};\n    groupElements[instancePath].color = Resources.COLORS.SPLIT;\n    this.createGroupMeshes(instancePath, geometryGroups, groupElements);\n  }\n\n  /**\n   * Add mesh to geometry groups\n   *\n   *            instancePath - Path of aspect, corresponds to original merged mesh\n   *            id - local path to the group\n   *            groups - The groups that we need to split mesh into\n   *            m - current mesh\n   * @param instance\n   * @param id\n   * @param geometryGroups\n   * @param m\n   */\n  addMeshToGeometryGroup (instance, id, geometryGroups, m) {\n    if (!this.hasMesh(instance)) {\n      return;\n    }\n    // name of group, mix of aspect path and group name\n    const groupName = `${instance.getInstancePath()}.${id}`;\n    // retrieve corresponding geometry for this group\n    const geometry = geometryGroups[groupName];\n    // only merge if flag is set to true\n    if (m instanceof this.THREE.Line) {\n      geometry.vertices.push(m.geometry.vertices[0]);\n      geometry.vertices.push(m.geometry.vertices[1]);\n    } else {\n      // merged mesh into corresponding geometry\n      geometry.merge(m.geometry, m.matrix);\n    }\n    // eslint-disable-next-line consistent-return\n    return true;\n  }\n\n  /**\n   * Create group meshes for given groups, retrieves from map if already present\n   * @param instancePath\n   * @param geometryGroups\n   * @param groups\n   */\n  createGroupMeshes (instancePath, geometryGroups, groups) {\n    if (!this.hasMesh(instancePath)) {\n      return;\n    }\n    const mergedMesh = this.meshes[instancePath];\n    // switch visible flag to false for merged mesh and remove from scene\n    mergedMesh.visible = false;\n\n    for (const g in groups) {\n      let groupName = g;\n      if (groupName.indexOf(instancePath) <= -1) {\n        groupName = `${instancePath}.${g}`;\n      }\n\n      let groupMesh = this.splitMeshes[groupName];\n      const geometryGroup = geometryGroups[groupName];\n\n      if (mergedMesh instanceof this.THREE.Line) {\n        const material = this.getLineMaterial();\n        groupMesh = new this.THREE.LineSegments(geometryGroup, material);\n      } else {\n        const material = this.getMeshPhongMaterial();\n        groupMesh = new this.THREE.Mesh(geometryGroup, material);\n      }\n      groupMesh.instancePath = instancePath;\n      groupMesh.geometryIdentifier = g;\n      groupMesh.geometry.dynamic = false;\n      groupMesh.position.copy(mergedMesh.position);\n\n      this.splitMeshes[groupName] = groupMesh;\n\n      // add split mesh to scenne and set flag to visible\n      groupMesh.visible = true;\n    }\n  }\n\n  /**\n   * Changes the color of a given instance\n   *\n   * @param instancePath\n   * @param color\n   */\n  setColor (instancePath, color) {\n    if (!this.hasMesh(instancePath)) {\n      return;\n    }\n    const meshes = this.getRealMeshesForInstancePath(instancePath);\n    if (meshes.length > 0) {\n      for (let i = 0; i < meshes.length; i++) {\n        const mesh = meshes[i];\n        if (mesh) {\n          const that = this;\n          mesh.traverse(function (object) {\n            if (Object.prototype.hasOwnProperty.call(object, 'material')) {\n              that.setThreeColor(object.material.color, color);\n              object.material.defaultColor = color;\n              if (color.a) {\n                object.material.transparent = true;\n                object.material.opacity = color.a;\n              }\n            }\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * Get Meshes associated to an instance\n   *\n   *            instancePath - Path of the instance\n   * @param instancePath\n   */\n  getRealMeshesForInstancePath (instancePath) {\n    const meshes = [];\n    if (instancePath in this.splitMeshes) {\n      for (const keySplitMeshes in this.splitMeshes) {\n        if (keySplitMeshes.startsWith(instancePath)) {\n          meshes.push(this.splitMeshes[keySplitMeshes]);\n        }\n      }\n    } else if (instancePath in this.meshes) {\n      meshes.push(this.meshes[instancePath]);\n    }\n    return meshes;\n  }\n\n  /**\n   * Checks if instance has a mesh\n   *\n   * @param instance\n   */\n  hasMesh (instance) {\n    const instancePath = typeof instance == 'string' ? instance : instance.getInstancePath();\n    return this.meshes[instancePath] !== undefined;\n  }\n\n  /**\n   * Traverse through THREE object to calculate that complexity (ammount of 3d objects)\n   * with this and calculateSceneMaxRadius, we can estimate how dense the scene is to implement any wanted optimization behavior\n   * @param object\n   */\n\n  calculateSceneComplexity (object) {\n    let currentComplexity = 0;\n    if (object.children.length > 0) {\n      for (let i = 0; i < object.children.length; i++) {\n        if (object.children[i] !== undefined) {\n          this.calculateSceneComplexity(object.children[i]);\n        }\n      }\n    } else {\n      if (Object.prototype.hasOwnProperty.call(object, 'geometry')) {\n        currentComplexity ++;\n      }\n    }\n    this.complexity += currentComplexity;\n  }\n\n  /**\n   * Traverse through THREE object to calculate that maximun radius based\n   * on bounding sphere of visible objects\n   * @param object\n   */\n  calculateSceneMaxRadius (object) {\n    let currentRadius = 0;\n    if (object.children.length > 0) {\n      for (let i = 0; i < object.children.length; i++) {\n        if (object.children[i] !== undefined) {\n          this.calculateSceneMaxRadius(object.children[i]);\n        }\n      }\n    } else {\n      if (Object.prototype.hasOwnProperty.call(object, 'geometry')) {\n        object.geometry.computeBoundingSphere();\n        currentRadius = object.geometry.boundingSphere.radius;\n      }\n    }\n\n    if (currentRadius > this.sceneMaxRadius) {\n      this.sceneMaxRadius = currentRadius;\n    }\n  }\n\n  /**\n   * Calculates linePrecision used by raycaster when picking objects.\n   */\n  getLinePrecision () {\n    this.rayCasterLinePrecision = this.sceneMaxRadius / this.linePrecisionMinRadius;\n    if (this.rayCasterLinePrecision < this.minAllowedLinePrecision) {\n      this.rayCasterLinePrecision = this.minAllowedLinePrecision;\n    }\n    this.rayCasterLinePrecision = Math.round(this.rayCasterLinePrecision);\n\n    return this.rayCasterLinePrecision;\n  }\n\n  cleanWith3DObject(instance) {\n    for (let meshKey of Object.keys(this.meshes)) {\n      if (this.meshes[meshKey].uuid === instance.uuid) {\n        delete this.meshes[meshKey];\n      }\n    }\n  }\n\n  clean () {\n    this.meshes = {};\n    this.splitMeshes = {};\n    this.visualModelMap = {};\n    this.complexity = 0;\n    this.sceneMaxRadius = 0;\n  }\n\n  setParticleTexture (particleTexture) {\n    this.particleTexture = particleTexture;\n  }\n\n  /**\n   * Sets linesThreshold\n   */\n  setLinesThreshold (linesThreshold) {\n    this.linesThreshold = linesThreshold\n  }\n}\n"],"mappings":"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","ignoreList":[]}