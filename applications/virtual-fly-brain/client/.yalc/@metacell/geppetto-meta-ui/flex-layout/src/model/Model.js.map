{"version":3,"file":"Model.js","names":["_Attribute","_interopRequireDefault","require","_AttributeDefinitions","_DockLocation","_Orientation","_Rect","_Actions","_BorderNode","_BorderSet","_RowNode","_TabNode","_TabSetNode","_Utils","_Model","obj","__esModule","_typeof","o","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","_defineProperty","value","t","_toPrimitive","r","e","toPrimitive","call","String","Number","Model","inner","Rect","empty","outer","_attributes","_idMap","_nextId","_borders","BorderSet","_pointerFine","_setChangeListener","listener","_changeListener","getActiveTabset","_activeTabSet","getNodeById","getId","undefined","_setActiveTabset","tabsetNode","getMaximizedTabset","_maximizedTabSet","_setMaximizedTabset","getRoot","_root","isRootOrientationVertical","rootOrientationVertical","getBorderSet","_getOuterInnerRects","_borderRects","_getPointerFine","_setPointerFine","pointerFine","visitNodes","fn","_forEachNode","id","doAction","action","returnVal","type","Actions","ADD_NODE","newNode","TabNode","data","json","toNode","TabSetNode","BorderNode","RowNode","drop","DockLocation","getByName","location","index","select","MOVE_NODE","fromNode","DELETE_TAB","node","_delete","FLOAT_TAB","_setFloating","adjustSelectedIndexAfterFloat","UNFLOAT_TAB","adjustSelectedIndexAfterDock","RENAME_TAB","_setName","text","SELECT_TAB","tabNode","parent","getParent","pos","getChildren","indexOf","getSelected","_setSelected","SET_ACTIVE_TABSET","ADJUST_SPLIT","node1","node2","_adjustSplitSide","weight1","pixelWidth1","weight2","pixelWidth2","ADJUST_BORDER_SPLIT","_setSize","MAXIMIZE_TOGGLE","UPDATE_MODEL_ATTRIBUTES","_updateAttrs","UPDATE_NODE_ATTRIBUTES","_updateIdMap","_this","weight","pixels","_setWeight","getWidth","getOrientation","Orientation","VERT","width","getHeight","HORZ","height","toJson","global","layout","_attributeDefinitions","_fireEvent","borders","_toJson","getSplitterSize","splitterSize","isEnableEdgeDock","enableEdgeDock","_addNode","Error","concat","getType","_layout","rect","metrics","_this$_root","_layoutBorder","removeInsets","_getAttribute","calcMinSize","_findDropTargetNode","dragNode","x","y","_tidy","update","_nextUniqueId","name","setOnAllowDrop","onAllowDrop","_onAllowDrop","_getOnAllowDrop","setOnCreateTabSet","onCreateTabSet","_onCreateTabSet","_getOnCreateTabSet","toString","JSON","stringify","fromJson","model","_fromJson","_createAttributeDefinitions","attributeDefinitions","AttributeDefinitions","add","setType","Attribute","NUMBER","BOOLEAN","top","right","bottom","left","STRING","toTypescriptInterfaces","console","log","toTypescriptInterface","getAttributeDefinitions","_default","exports"],"sources":["../../../../src/flex-layout/src/model/Model.ts"],"sourcesContent":["import Attribute from \"../Attribute\";\nimport AttributeDefinitions from \"../AttributeDefinitions\";\nimport DockLocation from \"../DockLocation\";\nimport DropInfo from \"../DropInfo\";\nimport Orientation from \"../Orientation\";\nimport Rect from \"../Rect\";\nimport Action from \"./Action\";\nimport Actions from \"./Actions\";\nimport BorderNode from \"./BorderNode\";\nimport BorderSet from \"./BorderSet\";\nimport IDraggable from \"./IDraggable\";\nimport IDropTarget from \"./IDropTarget\";\nimport { IJsonModel } from \"./IJsonModel\";\nimport Node from \"./Node\";\nimport RowNode from \"./RowNode\";\nimport TabNode from \"./TabNode\";\nimport TabSetNode from \"./TabSetNode\";\nimport {ITabSetAttributes} from \"./IJsonModel\";\nimport { adjustSelectedIndexAfterDock, adjustSelectedIndexAfterFloat } from \"./Utils\";\n\n/** @hidden @internal */\nexport interface ILayoutMetrics {\n    headerBarSize: number;\n    tabBarSize: number;\n    borderBarSize: number;\n}\n\n/**\n * Class containing the Tree of Nodes used by the FlexLayout component\n */\nclass Model {\n    /**\n     * Loads the model from the given json object\n     * @param json the json model to load\n     * @returns {Model} a new Model object\n     */\n    static fromJson(json: IJsonModel) {\n        const model = new Model();\n        Model._attributeDefinitions.fromJson(json.global, model._attributes);\n\n        if (json.borders) {\n            model._borders = BorderSet._fromJson(json.borders, model);\n        }\n        model._root = RowNode._fromJson(json.layout, model);\n        model._tidy(); // initial tidy of node tree\n        return model;\n    }\n    /** @hidden @internal */\n    private static _attributeDefinitions: AttributeDefinitions = Model._createAttributeDefinitions();\n\n    /** @hidden @internal */\n    private static _createAttributeDefinitions(): AttributeDefinitions {\n        const attributeDefinitions = new AttributeDefinitions();\n        // splitter\n        attributeDefinitions.add(\"splitterSize\", -1).setType(Attribute.NUMBER);\n        attributeDefinitions.add(\"enableEdgeDock\", true).setType(Attribute.BOOLEAN);\n        attributeDefinitions.add(\"rootOrientationVertical\", false).setType(Attribute.BOOLEAN);\n        attributeDefinitions.add(\"marginInsets\", { top: 0, right: 0, bottom: 0, left: 0 })\n            .setType(\"IInsets\");\n\n        // tab\n        attributeDefinitions.add(\"tabEnableClose\", true).setType(Attribute.BOOLEAN);\n        attributeDefinitions.add(\"tabCloseType\", 1).setType(\"ICloseType\");\n        attributeDefinitions.add(\"tabEnableFloat\", false).setType(Attribute.BOOLEAN);\n        attributeDefinitions.add(\"tabEnableDrag\", true).setType(Attribute.BOOLEAN);\n        attributeDefinitions.add(\"tabEnableRename\", true).setType(Attribute.BOOLEAN);\n        attributeDefinitions.add(\"tabClassName\", undefined).setType(Attribute.STRING);\n        attributeDefinitions.add(\"tabIcon\", undefined).setType(Attribute.STRING);\n        attributeDefinitions.add(\"tabEnableRenderOnDemand\", true).setType(Attribute.BOOLEAN);\n        attributeDefinitions.add(\"tabDragSpeed\", 0.3).setType(Attribute.NUMBER);\n\n        // tabset\n        attributeDefinitions.add(\"tabSetEnableDeleteWhenEmpty\", true).setType(Attribute.BOOLEAN);\n        attributeDefinitions.add(\"tabSetEnableDrop\", true).setType(Attribute.BOOLEAN);\n        attributeDefinitions.add(\"tabSetEnableDrag\", true).setType(Attribute.BOOLEAN);\n        attributeDefinitions.add(\"tabSetEnableDivide\", true).setType(Attribute.BOOLEAN);\n        attributeDefinitions.add(\"tabSetEnableMaximize\", true).setType(Attribute.BOOLEAN);\n        attributeDefinitions.add(\"tabSetAutoSelectTab\", true).setType(Attribute.BOOLEAN);\n        attributeDefinitions.add(\"tabSetClassNameTabStrip\", undefined).setType(Attribute.STRING);\n        attributeDefinitions.add(\"tabSetClassNameHeader\", undefined).setType(Attribute.STRING);\n        attributeDefinitions.add(\"tabSetEnableTabStrip\", true).setType(Attribute.BOOLEAN);\n        attributeDefinitions.add(\"tabSetHeaderHeight\", 0).setType(Attribute.NUMBER);\n        attributeDefinitions.add(\"tabSetTabStripHeight\", 0).setType(Attribute.NUMBER);\n        attributeDefinitions.add(\"tabSetMarginInsets\", { top: 0, right: 0, bottom: 0, left: 0 })\n            .setType(\"IInsets\");\n        attributeDefinitions.add(\"tabSetBorderInsets\", { top: 0, right: 0, bottom: 0, left: 0 })\n            .setType(\"IInsets\");\n        attributeDefinitions.add(\"tabSetTabLocation\", \"top\").setType(\"ITabLocation\");\n        attributeDefinitions.add(\"tabSetMinWidth\", 0).setType(Attribute.NUMBER);\n        attributeDefinitions.add(\"tabSetMinHeight\", 0).setType(Attribute.NUMBER);\n\n        // border\n        attributeDefinitions.add(\"borderSize\", 200).setType(Attribute.NUMBER);\n        attributeDefinitions.add(\"borderMinSize\", 0).setType(Attribute.NUMBER);\n        attributeDefinitions.add(\"borderBarSize\", 0).setType(Attribute.NUMBER);\n        attributeDefinitions.add(\"borderEnableDrop\", true).setType(Attribute.BOOLEAN);\n        attributeDefinitions.add(\"borderAutoSelectTabWhenOpen\", true).setType(Attribute.BOOLEAN);\n        attributeDefinitions.add(\"borderAutoSelectTabWhenClosed\", false).setType(Attribute.BOOLEAN);\n        attributeDefinitions.add(\"borderClassName\", undefined).setType(Attribute.STRING);\n        return attributeDefinitions;\n    }\n\n    /** @hidden @internal */\n    private _attributes: Record<string, any>;\n    /** @hidden @internal */\n    private _idMap: Record<string, Node>;\n    /** @hidden @internal */\n    private _nextId: number;\n    /** @hidden @internal */\n    private _changeListener?: () => void;\n    /** @hidden @internal */\n    private _root?: RowNode;\n    /** @hidden @internal */\n    private _borders: BorderSet;\n    /** @hidden @internal */\n    private _onAllowDrop?: (dragNode: Node, dropInfo: DropInfo) => boolean;\n    /** @hidden @internal */\n    private _maximizedTabSet?: TabSetNode;\n    /** @hidden @internal */\n    private _activeTabSet?: TabSetNode;\n    /** @hidden @internal */\n    private _borderRects: { inner: Rect; outer: Rect } = { inner: Rect.empty(), outer: Rect.empty() };\n    /** @hidden @internal */\n    private _pointerFine: boolean;\n    /** @hidden @internal */\n    private _onCreateTabSet? : (tabNode?: TabNode) => ITabSetAttributes;\n\n    /**\n     * 'private' constructor. Use the static method Model.fromJson(json) to create a model\n     *  @hidden @internal\n     */\n\n    private constructor() {\n        this._attributes = {};\n        this._idMap = {};\n        this._nextId = 0;\n        this._borders = new BorderSet(this);\n        this._pointerFine = true;\n    }\n\n    /** @hidden @internal */\n    _setChangeListener(listener: (() => void) | undefined) {\n        this._changeListener = listener;\n    }\n\n    /**\n     * Get the currently active tabset node\n     */\n    getActiveTabset() {\n        if (this._activeTabSet && this.getNodeById(this._activeTabSet.getId())) {\n            return this._activeTabSet;\n        } else {\n            return undefined;\n        }\n    }\n\n    /** @hidden @internal */\n    _setActiveTabset(tabsetNode: TabSetNode | undefined) {\n        this._activeTabSet = tabsetNode;\n    }\n\n    /**\n     * Get the currently maximized tabset node\n     */\n    getMaximizedTabset() {\n        return this._maximizedTabSet;\n    }\n\n    /** @hidden @internal */\n    _setMaximizedTabset(tabsetNode: (TabSetNode | undefined)) {\n        this._maximizedTabSet = tabsetNode;\n    }\n\n    /**\n     * Gets the root RowNode of the model\n     * @returns {RowNode}\n     */\n    getRoot() {\n        return this._root as RowNode;\n    }\n\n    isRootOrientationVertical() {\n        return this._attributes.rootOrientationVertical as boolean;\n    }\n\n    /**\n     * Gets the\n     * @returns {BorderSet|*}\n     */\n    getBorderSet() {\n        return this._borders;\n    }\n\n    /** @hidden @internal */\n    _getOuterInnerRects() {\n        return this._borderRects;\n    }\n\n    /** @hidden @internal */\n    _getPointerFine() {\n        return this._pointerFine;\n    }\n\n    /** @hidden @internal */\n    _setPointerFine(pointerFine: boolean) {\n        this._pointerFine = pointerFine;\n    }\n\n    /**\n     * Visits all the nodes in the model and calls the given function for each\n     * @param fn a function that takes visited node and a integer level as parameters\n     */\n    visitNodes(fn: (node: Node, level: number) => void) {\n        this._borders._forEachNode(fn);\n        (this._root as RowNode)._forEachNode(fn, 0);\n    }\n\n    /**\n     * Gets a node by its id\n     * @param id the id to find\n     */\n    getNodeById(id: string) {\n        return this._idMap[id];\n    }\n\n    /**\n     * Update the node tree by performing the given action,\n     * Actions should be generated via static methods on the Actions class\n     * @param action the action to perform\n     * @returns added Node for Actions.addNode; undefined otherwise\n     */\n    doAction(action: Action): Node | undefined {\n        let returnVal = undefined;\n        // console.log(action);\n        switch (action.type) {\n            case Actions.ADD_NODE: {\n                const newNode = new TabNode(this, action.data.json, true);\n                const toNode = this._idMap[action.data.toNode] as Node & IDraggable;\n                if (toNode instanceof TabSetNode || toNode instanceof BorderNode || toNode instanceof RowNode) {\n                    toNode.drop(newNode, DockLocation.getByName(action.data.location), action.data.index, action.data.select);\n                    returnVal = newNode;\n                }\n                break;\n            }\n            case Actions.MOVE_NODE: {\n                const fromNode = this._idMap[action.data.fromNode] as Node & IDraggable;\n                if (fromNode instanceof TabNode || fromNode instanceof TabSetNode) {\n                    const toNode = this._idMap[action.data.toNode] as Node & IDropTarget;\n                    if (toNode instanceof TabSetNode || toNode instanceof BorderNode || toNode instanceof RowNode) {\n                        toNode.drop(fromNode, DockLocation.getByName(action.data.location), action.data.index, action.data.select);\n                    }\n                }\n                break;\n            }\n            case Actions.DELETE_TAB: {\n                const node = this._idMap[action.data.node];\n                if (node instanceof TabNode) {\n                    delete this._idMap[action.data.node];\n                    node._delete();\n                }\n                break;\n            }\n            case Actions.FLOAT_TAB: {\n                const node = this._idMap[action.data.node];\n                if (node instanceof TabNode) {\n                    node._setFloating(true);\n                    adjustSelectedIndexAfterFloat(node);\n                }\n                break;\n            }\n            case Actions.UNFLOAT_TAB: {\n                const node = this._idMap[action.data.node];\n                if (node instanceof TabNode) {\n                    node._setFloating(false);\n                    adjustSelectedIndexAfterDock(node);\n                }\n                break;\n            }\n            case Actions.RENAME_TAB: {\n                const node = this._idMap[action.data.node];\n                if (node instanceof TabNode) {\n                    node._setName(action.data.text);\n                }\n                break;\n            }\n            case Actions.SELECT_TAB: {\n                const tabNode = this._idMap[action.data.tabNode];\n                if (tabNode instanceof TabNode) {\n                    const parent = tabNode.getParent() as Node;\n                    const pos = parent.getChildren().indexOf(tabNode);\n\n                    if (parent instanceof BorderNode) {\n                        if (parent.getSelected() === pos) {\n                            parent._setSelected(-1);\n                        } else {\n                            parent._setSelected(pos);\n                        }\n                    } else if (parent instanceof TabSetNode) {\n                        if (parent.getSelected() !== pos) {\n                            parent._setSelected(pos);\n                        }\n                        this._activeTabSet = parent;\n                    }\n                }\n                break;\n            }\n            case Actions.SET_ACTIVE_TABSET: {\n                const tabsetNode = this._idMap[action.data.tabsetNode];\n                if (tabsetNode instanceof TabSetNode) {\n                    this._activeTabSet = tabsetNode;\n                }\n                break;\n            }\n            case Actions.ADJUST_SPLIT: {\n                const node1 = this._idMap[action.data.node1];\n                const node2 = this._idMap[action.data.node2];\n\n                if ((node1 instanceof TabSetNode || node1 instanceof RowNode) && (node2 instanceof TabSetNode || node2 instanceof RowNode)) {\n                    this._adjustSplitSide(node1, action.data.weight1, action.data.pixelWidth1);\n                    this._adjustSplitSide(node2, action.data.weight2, action.data.pixelWidth2);\n                }\n                break;\n            }\n            case Actions.ADJUST_BORDER_SPLIT: {\n                const node = this._idMap[action.data.node];\n                if (node instanceof BorderNode) {\n                    node._setSize(action.data.pos);\n                }\n                break;\n            }\n            case Actions.MAXIMIZE_TOGGLE: {\n                const node = this._idMap[action.data.node];\n                if (node instanceof TabSetNode) {\n                    if (node === this._maximizedTabSet) {\n                        this._maximizedTabSet = undefined;\n                    } else {\n                        this._maximizedTabSet = node;\n                        this._activeTabSet = node;\n                    }\n                }\n\n                break;\n            }\n            case Actions.UPDATE_MODEL_ATTRIBUTES: {\n                this._updateAttrs(action.data.json);\n                break;\n            }\n\n            case Actions.UPDATE_NODE_ATTRIBUTES: {\n                const node = this._idMap[action.data.node];\n                node._updateAttrs(action.data.json);\n                break;\n            }\n            default:\n                break;\n        }\n\n        this._updateIdMap();\n\n        if (this._changeListener !== undefined) {\n            this._changeListener();\n        }\n\n        return returnVal;\n    }\n\n    /** @hidden @internal */\n    _updateIdMap() {\n        // regenerate idMap to stop it building up\n        this._idMap = {};\n        this.visitNodes((node) => (this._idMap[node.getId()] = node));\n        // console.log(JSON.stringify(Object.keys(this._idMap)));\n    }\n\n    /** @hidden @internal */\n    _adjustSplitSide(node: TabSetNode | RowNode, weight: number, pixels: number) {\n        node._setWeight(weight);\n        if (node.getWidth() != null && node.getOrientation() === Orientation.VERT) {\n            node._updateAttrs({ width: pixels });\n        } else if (node.getHeight() != null && node.getOrientation() === Orientation.HORZ) {\n            node._updateAttrs({ height: pixels });\n        }\n    }\n\n    /**\n     * Converts the model to a json object\n     * @returns {IJsonModel} json object that represents this model\n     */\n    toJson(): IJsonModel {\n        const json: any = { global: {}, layout: {} };\n        Model._attributeDefinitions.toJson(json.global, this._attributes);\n\n        // save state of nodes\n        this.visitNodes((node) => {\n            node._fireEvent(\"save\", undefined);\n        });\n\n        json.borders = this._borders._toJson();\n        json.layout = (this._root as RowNode)._toJson();\n        return json as IJsonModel;\n    }\n\n    getSplitterSize() {\n        let splitterSize = this._attributes.splitterSize as number;\n        if (splitterSize === -1) {\n            // use defaults\n            splitterSize = this._pointerFine ? 8 : 12; // larger for mobile\n        }\n        return splitterSize;\n    }\n\n    isEnableEdgeDock() {\n        return this._attributes.enableEdgeDock as boolean;\n    }\n\n    /** @hidden @internal */\n    _addNode(node: Node) {\n        const id = node.getId();\n        if (this._idMap[id] !== undefined) {\n            throw new Error(`Error: each node must have a unique id, duplicate id:${node.getId()}`);\n        }\n\n        if (node.getType() !== \"splitter\") {\n            this._idMap[id] = node;\n        }\n    }\n\n    /** @hidden @internal */\n    _layout(rect: Rect, metrics: ILayoutMetrics) {\n        // let start = Date.now();\n        this._borderRects = this._borders._layoutBorder({ outer: rect, inner: rect }, metrics);\n        rect = this._borderRects.inner.removeInsets(this._getAttribute(\"marginInsets\"));\n\n        this._root?.calcMinSize();\n        (this._root as RowNode)._layout(rect, metrics);\n        // console.log(\"layout time: \" + (Date.now() - start));\n        return rect;\n    }\n\n    /** @hidden @internal */\n    _findDropTargetNode(dragNode: Node & IDraggable, x: number, y: number) {\n        let node = (this._root as RowNode)._findDropTargetNode(dragNode, x, y);\n        if (node === undefined) {\n            node = this._borders._findDropTargetNode(dragNode, x, y);\n        }\n        return node;\n    }\n\n    /** @hidden @internal */\n    _tidy() {\n        // console.log(\"before _tidy\", this.toString());\n        (this._root as RowNode)._tidy();\n        // console.log(\"after _tidy\", this.toString());\n    }\n\n    /** @hidden @internal */\n    _updateAttrs(json: any) {\n        Model._attributeDefinitions.update(json, this._attributes);\n    }\n\n    /** @hidden @internal */\n    _nextUniqueId() {\n        this._nextId++;\n        while (this._idMap[\"#\" + this._nextId] !== undefined) {\n            this._nextId++;\n        }\n\n        return \"#\" + this._nextId;\n    }\n\n    /** @hidden @internal */\n    _getAttribute(name: string): any {\n        return this._attributes[name];\n    }\n\n    /**\n     * Sets a function to allow/deny dropping a node\n     * @param onAllowDrop function that takes the drag node and DropInfo and returns true if the drop is allowed\n     */\n    setOnAllowDrop(onAllowDrop: (dragNode: Node, dropInfo: DropInfo) => boolean) {\n        this._onAllowDrop = onAllowDrop;\n    }\n\n    /** @hidden @internal */\n    _getOnAllowDrop() {\n        return this._onAllowDrop;\n    }\n\n    /**\n     * set callback called when a new TabSet is created.\n     * The tabNode can be undefined if it's the auto created first tabset in the root row (when the last\n     * tab is deleted, the root tabset can be recreated)\n     * @param onCreateTabSet \n     */\n    setOnCreateTabSet(onCreateTabSet: (tabNode?: TabNode) => ITabSetAttributes) {\n        this._onCreateTabSet = onCreateTabSet;\n    }\n\n    /** @hidden @internal */\n    _getOnCreateTabSet() {\n        return this._onCreateTabSet;\n    }\n\n    static toTypescriptInterfaces() {\n        console.log(Model._attributeDefinitions.toTypescriptInterface(\"Global\", undefined));\n        console.log(RowNode.getAttributeDefinitions().toTypescriptInterface(\"Row\", Model._attributeDefinitions));\n        console.log(TabSetNode.getAttributeDefinitions().toTypescriptInterface(\"TabSet\", Model._attributeDefinitions));\n        console.log(TabNode.getAttributeDefinitions().toTypescriptInterface(\"Tab\", Model._attributeDefinitions));\n        console.log(BorderNode.getAttributeDefinitions().toTypescriptInterface(\"Border\", Model._attributeDefinitions));\n    }\n\n    toString() {\n        return JSON.stringify(this.toJson());\n    }\n}\n\n\nexport default Model;\n"],"mappings":"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","ignoreList":[]}