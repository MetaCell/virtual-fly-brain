{"version":3,"file":"model.js","names":["WidgetStatus","TabsetPosition"],"sources":["../../../src/common/layout/model.ts"],"sourcesContent":["import {\n  BorderNode,\n  TabNode,\n  TabSetNode,\n} from '@metacell/geppetto-meta-ui/flex-layout/src';\nimport Node from '@metacell/geppetto-meta-ui/flex-layout/src/model/Node';\nimport { IIcons } from '@metacell/geppetto-meta-ui/flex-layout/src/view/Layout';\nimport { TabButton } from '@metacell/geppetto-meta-ui/flex-layout/src/view/TabButton';\nimport React from 'react';\n\n/*\n * status can be one of:\n *  - ACTIVE: the user can see the tab content.\n *  - MINIMIZED: the tab is minimized.\n *  - HIDDEN:  other tab in the node is currently selected\n *  - MAXIMIZED:  the tab is maximized (only one tab can be maximized simultaneously)\n */\nexport enum WidgetStatus {\n  HIDDEN = 'HIDDEN',\n  ACTIVE = 'ACTIVE',\n  MAXIMIZED = 'MAXIMIZED',\n  MINIMIZED = 'MINIMIZED',\n}\n\nexport enum TabsetPosition {\n  LEFT = 'LEFT',\n  RIGHT = 'RIGHT',\n  TOP = 'TOP',\n  BOTTOM = 'BOTTOM',\n}\n\n/**\n * Extended Node interface\n */\nexport interface ExtendedNode extends Node {\n  config: Widget;\n}\n\n/**\n * Widget interface\n */\nexport interface Widget {\n  id: string;\n  status: WidgetStatus;\n  panelName: string;\n  defaultPanel?: any;\n  defaultPosition?: any;\n  defaultWeight?: any;\n  hideOnClose?: boolean;\n  name: string;\n  enableClose?: boolean;\n  component: string;\n  enableDrag?: boolean;\n  enableRename?: boolean;\n  pos?: number;\n  session: any;\n  config: any;\n  props: any;\n}\n\n/**\n * Widget Component interface.\n */\nexport interface WidgetComponent extends React.ReactElement {\n  exportSession: () => any;\n  importSession: (any) => void;\n}\n\nexport interface WidgetMap {\n  [id: string]: Widget;\n}\n\nexport interface ComponentMap {\n  [name: string]: React.ReactElement<any, any>;\n}\n\ntype TabButtonArgs = {\n  panel: TabNode;\n};\n\ntype TabSetButtonArgs = {\n  panel: TabSetNode | BorderNode;\n};\nexport interface IComponentConfig {\n  icons?: IIcons;\n  tabButtons?: Array<(props: TabButtonArgs) => React.ReactNode>;\n  tabSetButtons?: Array<(props: TabSetButtonArgs) => React.ReactNode>;\n}\n"],"mappings":";;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AANA,IAOYA,YAAY;AAAA;AAAA,WAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;AAAA,GAAZA,YAAY,4BAAZA,YAAY;AAAA,IAOZC,cAAc;AAO1B;AACA;AACA;AAFA;AAAA,WAPYA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;AAAA,GAAdA,cAAc,8BAAdA,cAAc"}