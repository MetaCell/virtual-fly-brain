{"version":3,"file":"ModelFactory.js","names":["GeppettoModel","require","Library","Type","Variable","Value","Datasource","Query","CompositeType","CompositeVisualType","ArrayType","ImportType","ImportValue","Instance","ExternalInstance","ArrayInstance","ArrayElementInstance","VisualGroup","VisualGroupElement","Pointer","PointerElement","SimpleInstance","SimpleConnectionInstance","World","AVisualCapability","AVisualGroupCapability","AConnectionCapability","AParameterCapability","AParticlesCapability","AStateVariableCapability","ADerivedStateVariableCapability","ModelFactory","rawGeppetoModel","geppettoModel","instances","allPaths","allStaticVarsPaths","allPathsIndexing","newPathsIndexing","cleanModel","createGeppettoModel","jsonModel","storeModel","populateRefs","undefined","eClass","createModel","variables","console","warn","createVariables","worlds","fillWorldsFromRawModel","tags","map","wr","name","i","libraries","length","synched","library","createLibrary","parent","setTypes","createTypes","types","getLibraries","push","datasources","createDatasources","dataSources","queries","createQueries","populateChildrenShortcuts","populateTypeReferences","getCurrentWorld","populateInstanceReferences","staticInstancesPaths","_getStaticInstancePaths","concat","createWorld","world","w","createStaticInstances","filter","inst","instance","createStaticInstance","rawInstance","Resources","SIMPLE_INSTANCE_NODE","SIMPLE_CONNECTION_INSTANCE_NODE","value","createValue","wrappedObj","node","getChildren","children","grandChildren","j","getId","getMetaType","ARRAY_INSTANCE_NODE","getWorlds","getInstances","populateConnections","VARIABLE_NODE","getTypes","referencedTypes","hasPointerType","swapTypes","refStr","$ref","typeObj","resolve","POINTER_TYPE","initialValues","getInitialValues","val","pointer","createPointer","pointerValue","resolvedTypes","PARAMETER_TYPE","extendApi","CONNECTION_TYPE","resolveConnectionValues","vizType","getVisualType","visualType","superType","getSuperType","typeObjs","Array","a","arrayType","getType","type","jsonPointer","rawElements","elements","pointerElements","element","createPointerElement","jsonPointerElement","variable","index","pointerElement","jsonDataSources","ds","createDatasource","jsonVariables","createVariable","anonymousTypes","jsonTypes","createCompositeType","createCompositeVisualType","createImportType","_index","createArrayType","createType","VISUAL_TYPE_NODE","instantiateVariables","varsWithVizTypes","allPotentialInstancePaths","allPotentialInstancePathsForIndexing","vars","getAllVariables","fetchVarsWithVisualTypes","fetchAllPotentialInstancePaths","varsToInstantiate","buildInstanceHierarchy","k","createInstancesFromDiffReport","diffReport","instanceCount","getInstanceCount","window","Instances","newInstancePaths","that","getPotentialInstancePaths","paths","l","hasCapability","VISUAL_CAPABILITY","getAllPotentialInstancesOfType","getPath","getVariables","eval","varTypes","diffTypes","newInstances","getInstance","error","ref","addConnection","b","mergeModel","rawModel","overrideTypes","diffModel","diffLibs","libs","getWrappedObj","libMatch","existingTypes","addedTypes","typeMatched","importTypeMatched","typeMatch","m","addType","getParent","variablesToUpdate","getVariableReferences","x","swapTypeInVariable","overrideType","addPotentialInstancePathsForTypeSwap","updateCapabilities","diffVars","_mergeVariables","currentWorld","_mergeInstances","currentModelVars","diffReportVars","match","find","currModelVar","addPotentialInstancePaths","diffInst","currentModelInst","diffReportInst","matchIdx","findIndex","newInstancePath","createInstancePathObj","mergeValue","varMatch","y","updateInstancesCapabilities","propagateCapabilityToParents","getVisualGroups","setVisualGroups","CONNECTION_CAPABILITY","STATE_VARIABLE_TYPE","STATE_VARIABLE_CAPABILITY","DERIVED_STATE_VARIABLE_TYPE","DERIVED_STATE_VARIABLE_CAPABILITY","PARAMETER_CAPABILITY","varInstances","getAllInstancesOf","potentialInstancePaths","potentialInstancePathsForIndexing","typePath","partialPathsForNewType","partialPathsForNewTypeIndexing","fetchAllPotentialInstancePathsForType","potentialInstancesForNewtype","potentialInstancesForNewtypeIndexing","replace","path","entry","metaType","list","is","indexOf","splice","typeToSwapOut","typeToSwapIn","anonTypes","swapTypeInTypes","COMPOSITE_TYPE_NODE","nestedVars","addInstances","newInstancesPaths","topInstances","instanceCreatedCallback","idConcatPath","splitInstancePath","split","arrayId","arrayElementId","forEach","newInstance","includes","instanceStrings","parentInstance","model","topLevelInstances","newlyCreatedInstance","newlyCreatedInstances","varsIds","GEPPETTO_MODEL_NODE","allTypes","ARRAY_TYPE_NODE","instancePath","getInstancePath","matchingInstance","findMatchingInstance","size","getSize","arrayOptions","id","getName","_metaType","arrayInstance","createArrayInstance","options","ARRAY_ELEMENT_INSTANCE_NODE","explodedInstance","createArrayElementInstance","addChild","isStatic","INSTANCE_NODE","createInstance","PARTICLES_TYPE","newPath","connectionInstanceOrVariable","getVariable","connectionValue","pointerA","pointerB","augmentPointer","setA","setB","connectionInstance","rootInstance","findRoot","pointedVariable","getElements","pointedIndex","getIndex","findMatchingInstanceByID","originalElement","buildPointerElementsChain","getRawInstancePath","instanceIds","pointerEl","matching","recurseMatching","capability","capabilityId","recurseMatch","findMatchingInstancesByType","findMatchingInstancesByVariable","parentPath","TYPE_NODE","COMPOSITE_VISUAL_TYPE_NODE","includePotentialInstance","TEXT_TYPE","nested","getNestingLevel","printInstanceStats","stats","Object","prototype","hasOwnProperty","call","log","allPotentialPaths","allPotentialPathsForIndexing","xpath","nodeRef","isStaticVar","staticVarAlreadyAdded","potentialParentPaths","arrayPath","arrayMetaType","starPath","starEntry","n","arrayElementPath","arrayElementEntry","g","h","v","values","createValues","initialValuesObject","valueNode","d","rawQueries","q","createQuery","matchingCriteriaRefs","matchingCriteria","typeRefs","typesCriteria","getTypeOptions","t","tag","it","visualGroups","createVisualGroups","updateConnectionInstances","typesToSearch","getAllTypesOfMetaType","connectionVariables","getAllVariablesOfMetaType","connectionInstances","present","connections","getAllPotentialInstancesEndingWith","createExternalInstance","projectId","aei","nodes","visualGroupElements","tagRefObjs","vg","createVisualGroupElements","vge","cleanupInstanceTreeState","stateVariableInstances","STATE_VARIABLE_TYPE_PATH","setTimeSeries","setWatched","parameterInstances","PARAMETER_TYPE_PATH","setValue","getAllInstancesWithCapability","matchingInstances","typeOrVar","String","allInstances","getAllInstancesOfType","getAllInstancesOfVariable","endingString","matchingPotentialInstances","endsWith","getAllPotentialInstancesStartingWith","startingString","startsWith","getAllPotentialInstancesOfMetaType","includeType","itemToPush","libraryTypes","getAllTypesOfType","superTypes","getAllVariablesOfType","typeToMatch","recursive","nestedVariables","constructor","getTopLevelVariablesById","variableIds","Model","getMatchingQueries","resultType","topLevelQueries","getQueries","matchingQueries","matchesCriteria","getResultType","getHTMLVariable","identifier","count","deleteInstance","deleteCallback","removeMatchingInstanceFromArray","instanceArray","unresolveType","typeToLibraryMap","allTypesInModel","reference","raw","parseInt","getAnonymousTypes","getVisualGroupElements","rawGeppettoModel"],"sources":["../src/ModelFactory.js"],"sourcesContent":["\n\n/**\n * Factory class with model creation methods.\n *\n * @author Giovanni Idili\n * @author Matteo Cantarelli\n */\n\nconst GeppettoModel = require('./model/GeppettoModel').default;\nconst Library = require('./model/Library').default;\nconst Type = require('./model/Type').default;\nconst Variable = require('./model/Variable').default;\nconst Value = require('./model/Value').default;\nconst Datasource = require('./model/Datasource').default;\nconst Query = require('./model/Query').default;\nconst CompositeType = require('./model/CompositeType').default;\nconst CompositeVisualType = require('./model/CompositeVisualType').default;\nconst ArrayType = require('./model/ArrayType').default;\nconst ImportType = require('./model/ImportType').default;\nconst ImportValue = require('./model/ImportValue').default;\nconst Instance = require('./model/Instance').default;\nconst ExternalInstance = require('./model/ExternalInstance').default;\nconst ArrayInstance = require('./model/ArrayInstance').default;\nconst ArrayElementInstance = require('./model/ArrayElementInstance').default;\nconst VisualGroup = require('./model/VisualGroup').default;\nconst VisualGroupElement = require('./model/VisualGroupElement').default;\nconst Pointer = require('./model/Pointer').default;\nconst PointerElement = require('./model/PointerElement').default;\nconst SimpleInstance = require('./model/SimpleInstance').default;\nconst SimpleConnectionInstance = require('./model/SimpleConnectionInstance').default;\nconst World = require('./model/World').default;\nconst AVisualCapability = require('./capabilities/AVisualCapability').default;\nconst AVisualGroupCapability = require('./capabilities/AVisualGroupCapability').default;\nconst AConnectionCapability = require('./capabilities/AConnectionCapability').default;\nconst AParameterCapability = require('./capabilities/AParameterCapability').default;\nconst AParticlesCapability = require('./capabilities/AParticlesCapability').default;\nconst AStateVariableCapability = require('./capabilities/AStateVariableCapability').default;\nconst ADerivedStateVariableCapability = require('./capabilities/ADerivedStateVariableCapability').default;\n\n\nimport Resources from './Resources';\n/**\n * @class ModelFactory\n */\nexport const ModelFactory = {\n  /*\n   * Variables to keep track of tree building state go here if needed\n   */\n  rawGeppetoModel: null,\n  geppettoModel: null,\n  instances: null,\n  allPaths: [],\n  allStaticVarsPaths: {},\n  allPathsIndexing: [],\n  newPathsIndexing: [],\n\n\n  /**\n   * Creates and populates Geppetto model\n   */\n  cleanModel: function () {\n    this.allPaths = [];\n    this.allStaticVarsPaths = {};\n    this.allPathsIndexing = [];\n  },\n\n  /**\n   * Creates and populates Geppetto model\n   *\n   * @param jsonModel\n   * @param storeRaw - store the raw and object models in the model factory\n   * @param populateRefs - populate type references after model creation\n   *\n   * @returns {GeppettoModel}\n   */\n  createGeppettoModel: function (jsonModel, storeModel, populateRefs) {\n    // set defaults for optional flags\n    if (storeModel == undefined) {\n      // default behaviour store model\n      storeModel = true;\n    }\n    if (populateRefs == undefined) {\n      // default behaviour populate type references\n      populateRefs = true;\n    }\n\n    var geppettoModel = null;\n\n    if (jsonModel.eClass == 'GeppettoModel') {\n      if (storeModel) {\n        // store raw model for easy access during model building operations\n        this.rawGeppetoModel = jsonModel;\n      }\n\n      geppettoModel = this.createModel(jsonModel);\n\n      if (storeModel) {\n        // store raw model for easy access during model building operations\n        this.rawGeppetoModel = jsonModel;\n        // store object model\n        this.geppettoModel = geppettoModel;\n      }\n\n      // create variables\n      if (jsonModel.variables) {\n        console.warn('Geppetto variables are deprecated: use worlds instead.');\n        geppettoModel.variables = this.createVariables(jsonModel.variables, geppettoModel);\n      }\n      if (jsonModel.worlds) {\n        this.fillWorldsFromRawModel(geppettoModel, jsonModel);\n      }\n\n      if (jsonModel.tags) {\n        this.geppettoModel.tags = jsonModel.tags.map(wr => wr.name);\n      }\n\n\n      // create libraries\n      for (var i = 0; i < jsonModel.libraries.length; i++) {\n        if (!jsonModel.libraries[i].synched) {\n          var library = this.createLibrary(jsonModel.libraries[i]);\n          library.parent = geppettoModel;\n          library.setTypes(this.createTypes(jsonModel.libraries[i].types, library));\n          geppettoModel.getLibraries().push(library);\n        }\n      }\n\n      // create datasources\n      geppettoModel.datasources = this.createDatasources(jsonModel.dataSources, geppettoModel);\n\n      // create top level queries (potentially cross-datasource)\n      geppettoModel.queries = this.createQueries(jsonModel.queries, geppettoModel);\n\n      if (populateRefs) {\n        // traverse everything and build shortcuts to children if composite --> containment == true\n        this.populateChildrenShortcuts(geppettoModel);\n\n        // traverse everything and populate type references in variables\n        this.populateTypeReferences(geppettoModel);\n\n        if (geppettoModel.getCurrentWorld()) {\n          this.populateInstanceReferences(geppettoModel);\n          // Add instances from the default world to allPaths\n          let staticInstancesPaths = this._getStaticInstancePaths(geppettoModel);\n          this.allPaths = this.allPaths.concat(staticInstancesPaths);\n          this.allPathsIndexing = this.allPathsIndexing.concat(staticInstancesPaths);\n        }\n      }\n        \n    }\n          \n    return geppettoModel;\n  },\n\n  createWorld: function (world) {\n    const w = new World(world, this.createStaticInstances(world.instances));\n    w.parent = this.geppettoModel;\n    w.variables = this.createVariables(world.variables, w);\n    return w;\n  },\n\n  createStaticInstances: function (instances) {\n    return instances ? instances.filter(inst => !inst.synched).map(instance => this.createStaticInstance(instance)) : [];\n  },\n\n\n  createStaticInstance: function (rawInstance) {\n    let instance;\n    switch (rawInstance.eClass) {\n    case Resources.SIMPLE_INSTANCE_NODE:\n      instance = new SimpleInstance(rawInstance);\n      break;\n    case Resources.SIMPLE_CONNECTION_INSTANCE_NODE:\n      instance = new SimpleConnectionInstance(rawInstance);\n      break;\n    default:\n      throw instance.eClass + \" instance type is not supported\"\n    }\n    if (instance.value) {\n      instance.value = this.createValue(rawInstance, { wrappedObj: rawInstance.value });\n    }\n          \n    return instance;\n  },\n\n  /**\n   * Populate shortcuts of children onto parents\n   */\n  populateChildrenShortcuts: function (node) {\n    // check if getChildren exists, if so add shortcuts based on ids and recurse on each\n    if (typeof node.getChildren === \"function\") {\n      var children = node.getChildren();\n\n      if (children != undefined) {\n        for (var i = 0; i < children.length; i++) {\n          // do not populate shortcuts for array instances - children are accessed as array elements\n          if (node instanceof Variable && children[i] instanceof Type){\n            // it's an anonymous type we don't want it to be in the path\n            this.populateChildrenShortcuts(children[i]);\n                            \n            var grandChildren = children[i].getChildren();\n            for (var j = 0; j < grandChildren.length; j++) {\n              node[grandChildren[j].getId()] = grandChildren[j];\n            }\n                            \n            continue;\n          }\n          if (node.getMetaType() != Resources.ARRAY_INSTANCE_NODE) {\n            node[children[i].getId()] = children[i];\n          }\n\n          this.populateChildrenShortcuts(children[i]);\n        }\n      }\n    }\n  },\n\n  populateInstanceReferences: function (geppettoModel) {\n    if (!geppettoModel.getWorlds().length) { \n      return; \n    }\n\n    for (let world of geppettoModel.getWorlds()) {\n      for (let instance of world.getInstances()) {\n        if (instance instanceof SimpleConnectionInstance) {\n          this.populateConnections(instance);\n        }\n      }\n    }\n  },\n\n  /**\n   * Populate type references\n   */\n  populateTypeReferences: function (node) {\n\n    // check if variable, if so populate type references\n    if (node.getMetaType() == Resources.VARIABLE_NODE) {\n      var types = node.getTypes();\n      var referencedTypes = [];\n      var hasPointerType = false;\n      var swapTypes = true;\n\n      if (types != undefined) {\n        for (var i = 0; i < types.length; i++) {\n          // check if references are already populated\n          if (types[i] instanceof Type) {\n            swapTypes = false;\n            break;\n          }\n\n          // get reference string - looks like this --> '//@libraries.1/@types.5';\n          var refStr = types[i].$ref;\n\n          // if it's anonymous there's no reference\n          if (refStr != undefined) {\n            // go grab correct type from Geppetto Model\n            var typeObj = this.resolve(refStr);\n\n            // track if we have pointer type\n            if (typeObj.getMetaType() == Resources.POINTER_TYPE) {\n              hasPointerType = true;\n            }\n\n            // add to list\n            referencedTypes.push(typeObj);\n          }\n        }\n\n        if (swapTypes) {\n          // set types to actual object references using backbone setter\n          node.setTypes(referencedTypes);\n        }\n      }\n\n      // check if pointer type\n      if (hasPointerType) {\n        var initialValues = node.getInitialValues();\n\n        if (initialValues != undefined && initialValues.length == 1) {\n          // go to initial values and parse pointer into Pointer with its PointerElements\n          var val = initialValues[0];\n          var pointer = this.createPointer(val.value);\n          // populate pointerValue on variable\n          node.pointerValue = pointer;\n        } else {\n          throw ( \"The variable \" + node.getId() + \" does not have initial values. Initial values expected.\" );\n        }\n      }\n\n      // add capabilities to variables\n      var resolvedTypes = node.getTypes();\n      for (var j = 0; j < resolvedTypes.length; j++) {\n        if (resolvedTypes[j].getMetaType() == Resources.PARAMETER_TYPE) {\n          // if a variable has a Parameter type, add AParameterCapability to the variable\n          node.extendApi(AParameterCapability);\n        } else if (resolvedTypes[j].getMetaType() == Resources.CONNECTION_TYPE) {\n          // if a variable has a connection type, add connection capability\n          node.extendApi(AConnectionCapability);\n          this.resolveConnectionValues(node);\n        }\n      }\n    } else if (!(node instanceof ArrayType) && (node instanceof Type || node instanceof CompositeType)) {\n      // take visual type string - looks like this --> '//@libraries.1/@types.5'\n      var vizType = node.getVisualType();\n\n      if (vizType != undefined) {\n        // replace with reference to actual type\n        var typeObj = this.resolve(vizType.$ref);\n        node.visualType = typeObj;\n      }\n\n      // resolve super type\n      var superType = node.getSuperType();\n      if (superType != undefined) {\n        var typeObjs = [];\n\n        // convert to array if single element\n        if (!(superType instanceof Array)) {\n          superType = [superType];\n        }\n\n        for (var a = 0; a < superType.length; a++) {\n          if (superType[a].$ref) {\n            // replace with reference to actual type\n            typeObjs.push(this.resolve(superType[a].$ref));\n          } else {\n            // replace with reference to actual type\n            typeObjs.push(superType[a]);\n          }\n        }\n\n        node.superType = typeObjs;\n      }\n    } else if (node instanceof ArrayType) {\n      // take array type string - looks like this --> '//@libraries.1/@types.5'\n      var arrayType = node.getType();\n\n      if (arrayType != undefined) {\n        var typeObj = this.resolve(arrayType.$ref);\n        node.type = typeObj;\n      }\n\n      // resolve super type\n      var superType = node.getSuperType();\n      if (superType != undefined) {\n        var typeObjs = [];\n\n        // convert to array if single element\n        if (!(superType instanceof Array)) {\n          superType = [superType];\n        }\n\n        for (var a = 0; a < superType.length; a++) {\n          if (superType[a].$ref) {\n            // replace with reference to actual type\n            typeObjs.push(this.resolve(superType[a].$ref));\n          } else {\n            // replace with reference to actual type\n            typeObjs.push(superType[a]);\n          }\n        }\n\n        node.superType = typeObjs;\n      }\n    } else if (node.getMetaType() === Resources.SIMPLE_INSTANCE_NODE || node.getMetaType() === Resources.SIMPLE_CONNECTION_INSTANCE_NODE) {\n      node.type = this.resolve(node.getType().$ref);\n    }\n\n    // check if getChildren exists, if so recurse over children\n    if (typeof node.getChildren === \"function\") {\n      var children = node.getChildren();\n\n      if (children != undefined) {\n        for (var i = 0; i < children.length; i++) {\n          this.populateTypeReferences(children[i]);\n        }\n      }\n    }\n  },\n\n  /**\n   * Creates pointer given a pointer in raw json format\n   */\n  createPointer: function (jsonPointer) {\n\n    // get raw pointer elements\n    var rawElements = jsonPointer.elements;\n    var pointerElements = [];\n\n    // loop elements and create PointerElements (resolving variables / types)\n    for (var i = 0; i < rawElements.length; i++) {\n      var element = this.createPointerElement(rawElements[i]);\n      pointerElements.push(element);\n    }\n\n    // create pointer object setting elements\n    var pointer = new Pointer({ \"wrappedObj\": jsonPointer, \"elements\": pointerElements });\n\n    return pointer;\n  },\n\n  /**\n   * Creates pointer given a pointer in raw json format\n   */\n  createPointerElement: function (jsonPointerElement) {\n    var variable = this.resolve(jsonPointerElement.variable.$ref);\n    var type = this.resolve(jsonPointerElement.type.$ref);\n    var index = jsonPointerElement.index;\n\n    // create pointer object setting elements\n    var pointerElement = new PointerElement({\n      \"wrappedObj\": jsonPointerElement,\n      \"variable\": variable,\n      \"type\": type,\n      \"index\": index\n    });\n\n    return pointerElement;\n  },\n\n  /**\n   * Creates datasources starting from an array of datasources in the json model format\n   */\n  createDatasources: function (jsonDataSources, parent) {\n    var dataSources = [];\n\n    if (jsonDataSources != undefined) {\n      for (var i = 0; i < jsonDataSources.length; i++) {\n        var ds = this.createDatasource(jsonDataSources[i]);\n        ds.parent = parent;\n\n        dataSources.push(ds);\n      }\n    }\n\n    return dataSources;\n  },\n\n  /**\n   * Creates variables starting from an array of variables in the json model format\n   */\n  createVariables: function (jsonVariables, parent) {\n    var variables = [];\n\n    if (jsonVariables != undefined) {\n      for (var i = 0; i < jsonVariables.length; i++) {\n        if (!jsonVariables[i].synched) {\n          var variable = this.createVariable(jsonVariables[i]);\n          variable.parent = parent;\n\n          // check if it has an anonymous type\n          if (jsonVariables[i].anonymousTypes != undefined) {\n            variable.anonymousTypes = this.createTypes(jsonVariables[i].anonymousTypes, variable);\n          }\n\n          variables.push(variable);\n        }\n      }\n    }\n\n    return variables;\n  },\n\n  /**\n   * Creates type objects starting from an array of types in the json model format\n   */\n  createTypes: function (jsonTypes, parent) {\n    var types = [];\n\n    if (jsonTypes != undefined) {\n      for (var i = 0; i < jsonTypes.length; i++) {\n        if (!jsonTypes[i].synched) {\n          var type = null;\n\n          // check if it's composite type, visual type, array type or simple type\n          if (jsonTypes[i].eClass == 'CompositeType' || jsonTypes[i].eClass == 'ConnectionType') {\n            type = this.createCompositeType(jsonTypes[i]);\n          } else if (jsonTypes[i].eClass == 'CompositeVisualType') {\n            type = this.createCompositeVisualType(jsonTypes[i]);\n            // inject visual capability to all CompositeVisualType\n            type.extendApi(AVisualCapability);\n          } else if (jsonTypes[i].eClass == 'ImportType') {\n            type = this.createImportType(jsonTypes[i], null);\n            // we store the index of the importType to speed up swapping procedures\n            type._index = i;\n          } else if (jsonTypes[i].eClass == 'ArrayType') {\n            type = this.createArrayType(jsonTypes[i]);\n          } else {\n            type = this.createType(jsonTypes[i]);\n            // inject visual capability if MetaType == VisualType\n            if (type.getMetaType() == Resources.VISUAL_TYPE_NODE) {\n              type.extendApi(AVisualCapability);\n            }\n          }\n\n          // if getVisualType != null also inject visual capability\n          if (type.getVisualType() != undefined) {\n            type.extendApi(AVisualCapability);\n          }\n\n          // set parent\n          type.parent = parent;\n\n          types.push(type);\n        }\n      }\n    }\n\n    return types;\n  },\n\n  /**\n   * Creates and populates initial instance tree skeleton with any instance that needs to be visualized\n   */\n  instantiateVariables: function (geppettoModel) {\n\n    var instances = [];\n\n    // we need to explode instances for variables with visual types\n    var varsWithVizTypes = [];\n\n    // we need to fetch all potential instance paths (even for not exploded instances)\n    var allPotentialInstancePaths = [];\n    var allPotentialInstancePathsForIndexing = [];\n\n    // builds list of vars with visual types and connection types - start traversing from top level variables\n    var vars = geppettoModel.getAllVariables();\n    for (var i = 0; i < vars.length; i++) {\n      this.fetchVarsWithVisualTypes(vars[i], varsWithVizTypes, '');\n      this.fetchAllPotentialInstancePaths(vars[i], allPotentialInstancePaths, allPotentialInstancePathsForIndexing, '');\n    }\n\n    this.allPaths = this.allPaths.concat(allPotentialInstancePaths);\n    this.allPathsIndexing = allPotentialInstancePathsForIndexing;\n    var varsToInstantiate = varsWithVizTypes;\n\n    // based on list, traverse again and build instance objects\n    for (var j = 0; j < varsToInstantiate.length; j++) {\n      this.buildInstanceHierarchy(varsToInstantiate[j], null, geppettoModel, instances);\n    }\n\n    // set instances to internal cache of the factory\n    this.instances = instances;\n\n    // populate shortcuts / populate connection references\n    for (var k = 0; k < instances.length; k++) {\n      this.populateChildrenShortcuts(instances[k]);\n      this.populateConnections(instances[k]);\n    }\n\n    return instances;\n  },\n\n  /**\n   * Checks if new instances need to be created\n   *\n   * @param diffReport - lists variables and types that we need to check instances for\n   */\n  createInstancesFromDiffReport: function (diffReport) {\n    // get initial instance count (used to figure out if we added instances at the end)\n    var instanceCount = this.getInstanceCount(window.Instances);\n\n    var newInstancePaths = [];\n\n    /*\n     * shortcut function to get potential instance paths given a set types\n     * NOTE: defined as a nested function to avoid polluting the visible API of ModelFactory\n     */\n    var that = this;\n    var getPotentialInstancePaths = function (types) {\n      var paths = [];\n\n      for (var l = 0; l < types.length; l++) {\n        if (types[l].hasCapability(Resources.VISUAL_CAPABILITY)) {\n          // get potential instances with that type\n          paths = paths.concat(that.getAllPotentialInstancesOfType(types[l].getPath()));\n        }\n      }\n      return paths;\n    };\n\n    // STEP 1: check new variables to see if any new instances are needed\n    var varsWithVizTypes = [];\n    const variables = this.getVariables(diffReport);\n    for (var i = 0; i < variables; i++) {\n      ModelFactory.fetchVarsWithVisualTypes(variables, varsWithVizTypes, '');\n    }\n    // for each variable, get types and potential instances of those types\n    for (var j = 0; j < varsWithVizTypes.length; j++) {\n      // var must exist since we just fetched it from the geppettoModel\n      var variable = eval(varsWithVizTypes[j]);\n      var varTypes = variable.getTypes();\n      newInstancePaths = newInstancePaths.concat(getPotentialInstancePaths(varTypes));\n    }\n\n    // STEP 2: check types and create new instances if need be\n    var diffTypes = diffReport.types;\n    newInstancePaths = newInstancePaths.concat(getPotentialInstancePaths(diffTypes));\n\n\n    // STEP 3: call getInstance to create the instances\n    var newInstances = window.Instances.getInstance(newInstancePaths);\n\n    // STEP 4: If instances were added, re-populate shortcuts\n    for (var k = 0; k < newInstances.length; k++) {\n      ModelFactory.populateChildrenShortcuts(newInstances[k]);\n    }\n\n\n    for (var k = 0; k < window.Instances.length; k++) {\n      ModelFactory.populateConnections(window.Instances[k]);\n    }\n\n    return newInstances;\n  },\n\n  /**\n   * Populate connections\n   */\n  populateConnections: function (instance) {\n    // check if it's a connection\n    if (instance.getMetaType() === Resources.SIMPLE_CONNECTION_INSTANCE_NODE){\n          \n      if (!instance.a) {\n        console.error(`Error while adding connection ${instance.getId()}: cannot find first connection`, instance)\n      }\n      if (instance.a?.$ref !== undefined) {\n        const ref = instance.a.$ref;\n        instance.a = this.resolve(ref);\n        if (instance.a) {\n          instance.a.addConnection(instance);\n        } else {\n          console.error(`Error resolving reference ${ref}  while adding connection ${instance.getId()} `)\n        }\n      } \n          \n      if (!instance.b) {\n        console.error(`Error while adding connection ${instance.getId()}: cannot find second connection`, instance)\n      }\n          \n      if (instance.b?.$ref !== undefined) {\n        const ref = instance.b.$ref;\n        instance.b = this.resolve(ref);\n        if (instance.b) {\n          instance.b.addConnection(instance);\n        } else {\n          console.error(`Error resolving reference ${ref}  while adding connection ${instance.getId()} `)\n        }\n      } \n          \n      return;\n    }\n\n    {if (instance.getType().getMetaType() == Resources.CONNECTION_TYPE) {\n      // do the bit of bidness\n      this.resolveConnectionValues(instance);\n    }}\n\n    // check if getChildren exists, if so add shortcuts based on ids and recurse on each\n    if (typeof instance.getChildren === \"function\") {\n      var children = instance.getChildren();\n      if (children != undefined) {\n        for (var i = 0; i < children.length; i++) {\n          // recurse like no tomorrow\n          this.populateConnections(children[i]);\n        }\n      }\n    }\n  },\n\n  /**\n   * Merge Geppetto model parameter into existing Geppetto model\n   *\n   * @param rawModel - raw model to be merged, by deault only adds new vars / libs / types\n   * @param overrideTypes - bool, mergeModel overrides type\n   */\n  mergeModel: function (rawModel, overrideTypes) {\n    if (overrideTypes == undefined) {\n      overrideTypes = false;\n    }\n\n    this.newPathsIndexing = [];\n\n    // diff object to report back what changed / has been added\n    var diffReport = { variables: [], types: [], libraries: [], worlds: [] };\n\n    // STEP 1: create new geppetto model to merge into existing one\n    var diffModel = this.createGeppettoModel(rawModel, false, false);\n\n    // STEP 2: add libraries/types if any are different (both to object model and json model)\n    var diffLibs = diffModel.getLibraries();\n    var libs = this.geppettoModel.getLibraries();\n\n    for (var i = 0; i < diffLibs.length; i++) {\n      if (diffLibs[i].getWrappedObj().synched == true) {\n        // if synch placeholder lib, skip it\n        continue;\n      }\n\n      var libMatch = false;\n\n      for (var j = 0; j < libs.length; j++) {\n        // if the library exists, go in and check for types diff\n        if (diffLibs[i].getPath() == libs[j].getPath()) {\n          libMatch = true;\n\n          var diffTypes = diffLibs[i].getTypes();\n          var existingTypes = libs[j].getTypes();\n\n          // first loop on types - add new ones\n          var addedTypes = [];\n\n          /*\n           * the types that need to be swapped in in the first array, the ImportTypes that need to be swapped out in the second one\n           * these two arrays are synched by their index\n           */\n          var typeMatched = [];\n          var importTypeMatched = [];\n\n          for (var k = 0; k < diffTypes.length; k++) {\n            if (diffTypes[k].getWrappedObj().synched == true) {\n              // if synch placeholder type, skip it\n              continue;\n            }\n\n            var typeMatch = false;\n\n            for (var m = 0; m < existingTypes.length; m++) {\n              // check if the given diff type already exists\n              if (diffTypes[k].getPath() == existingTypes[m].getPath()) {\n                typeMatch = true;\n                typeMatched.push(diffTypes[k]);\n                importTypeMatched.push(existingTypes[m]);\n                break;\n              }\n            }\n\n            // if the type doesn't exist, append it to the library\n            if (!typeMatch) {\n              // add to list of types on raw library object\n              if (libs[j].getWrappedObj().types == undefined) {\n                libs[j].getWrappedObj().types = [];\n              }\n\n              libs[j].getWrappedObj().types.push(diffTypes[k].getWrappedObj());\n\n              // add to library in geppetto object model\n              libs[j].addType(diffTypes[k]);\n\n              addedTypes.push(diffTypes[k]);\n\n\n              /*\n               * TODO: add potential instance paths\n               * NOTE: maybe not needed? the path will be added if a variable uses the type\n               */\n\n              // add to diff report\n              diffReport.types.push(diffTypes[k]);\n\n              // populate the shortcuts for the added type\n              this.populateChildrenShortcuts(diffTypes[k]);\n              // let's populate the shortcut in the parent of the type, this might not exist if it was a fetch\n              diffTypes[k].getParent()[diffTypes[k].getId()] = diffTypes[k];\n            }\n\n          }\n\n          for (var k = 0; k < addedTypes.length; k++) {\n            // populate references for the new type\n            this.populateTypeReferences(addedTypes[k]);\n          }\n\n          // second loop on types - override (if flag is set)\n          if (overrideTypes) {\n            for (var k = 0; k < typeMatched.length; k++) {\n\n              // populate references for the swapped type\n              this.populateTypeReferences(typeMatched[k]);\n              var index = importTypeMatched[k]._index;\n\n              var variablesToUpdate = importTypeMatched[k].getVariableReferences();\n              // swap type reference in ALL variables that point to it\n              for (var x = 0; x < variablesToUpdate.length; x++) {\n                this.swapTypeInVariable(variablesToUpdate[x], importTypeMatched[k], typeMatched[k]);\n              }\n\n              // swap type in raw model\n              libs[j].getWrappedObj().types[index] = typeMatched[k].getWrappedObj();\n\n              // store overridden type (so that unresolve type can swap it back)\n              typeMatched[k].overrideType = importTypeMatched[k];\n\n              // swap in object model\n              typeMatched[k].parent = libs[j];\n              libs[j].getTypes()[index] = typeMatched[k];\n              // libs[j].removeImportType(importTypeMatched[k]);\n\n              // add potential instance paths\n              this.addPotentialInstancePathsForTypeSwap(typeMatched[k]);\n\n              // update capabilities for variables and instances if any\n              this.updateCapabilities(variablesToUpdate);\n\n              // add to diff report\n              diffReport.types.push(typeMatched[k]);\n\n              // populate the shortcuts for the swapped type\n              this.populateChildrenShortcuts(typeMatched[k]);\n              // let's populate the shortcut in the parent of the type, this might not exist if it was a fetch\n              typeMatched[k].getParent()[typeMatched[k].getId()] = typeMatched[k];\n\n            }\n          }\n        }\n      }\n\n      // if the library doesn't exist yet, append it to the model with everything that's in it\n      if (!libMatch) {\n        if (this.geppettoModel.getWrappedObj().libraries == undefined) {\n          this.geppettoModel.getWrappedObj().libraries = [];\n        }\n\n        // add to raw model\n        this.geppettoModel.getWrappedObj().libraries.push(diffLibs[i].getWrappedObj());\n\n        // add to geppetto object model\n        diffLibs[i].parent = this.geppettoModel;\n        this.geppettoModel.getLibraries().push(diffLibs[i]);\n\n        // add to diff report\n        diffReport.libraries.push(diffLibs[i]);\n\n        // populate the shortcuts for the added library\n        this.populateChildrenShortcuts(diffLibs[i]);\n        // let's populate the shortcut in the parent of the library, this might not exist if it was a fetch\n        diffLibs[i].getParent()[diffLibs[i].getId()] = diffLibs[i];\n      }\n    }\n\n    // STEP 3: add variables if any new ones are found (both to object model and json model)\n        \n    // STEP 3a: merge old geppettoModel.variables\n    let diffVars = diffModel.variables;\n    diffReport.variables = this._mergeVariables(diffVars, this.geppettoModel);\n\n    const currentWorld = this.geppettoModel.getCurrentWorld();\n    // STEP 3b: merge world.variables and instances\n    if (currentWorld) {\n      diffVars = diffModel.getCurrentWorld().getVariables();\n      diffReport.worlds = rawModel.worlds.map(world => ({ ...world, variables: [], instances: [] }))\n          \n      // TODO handle multiple worlds\n      diffReport.worlds[0].variables = diffReport.worlds[0].variables.concat(\n        this._mergeVariables(diffVars, currentWorld)\n      );\n\n      // TODO handle multiple worlds\n      diffReport.worlds[0].instances = this._mergeInstances(\n        diffModel.getCurrentWorld().getInstances(), \n        currentWorld);\n      this.populateInstanceReferences(diffModel);\n    }\n        \n    return diffReport;\n  },\n\n  _mergeVariables: function (diffVars, parent) {\n    const currentModelVars = parent.getVariables(true);\n    const wrappedObj = parent.wrappedObj;\n    const diffReportVars = [];\n\n    for (var x = 0; x < diffVars.length; x++) {\n      if (diffVars[x].getWrappedObj().synched == true) {\n        // if synch placeholder var, skip it\n        continue;\n      }\n\n      var match = currentModelVars.find(currModelVar => diffVars[x].getPath() == currModelVar.getPath());\n\n      // if no match, add it, it's actually new\n      if (!match) {\n            \n        if (wrappedObj.variables == undefined) {\n          wrappedObj.variables = [];\n        }\n\n        // append variable to raw model\n        wrappedObj.variables.push(diffVars[x].getWrappedObj());\n\n        // add variable to geppetto object model\n        diffVars[x].parent = parent;\n        currentModelVars.push(diffVars[x]);\n\n        // populate references for new vars\n        this.populateTypeReferences(diffVars[x]);\n\n        // find new potential instance paths and add to the list\n        this.addPotentialInstancePaths([diffVars[x]]);\n\n        diffReportVars.push(diffVars[x]);\n\n        // populate the shortcuts for the added variable\n        this.populateChildrenShortcuts(diffVars[x]);\n        // let's populate the shortcut in the parent of the variable, this might not exist if it was a fetch\n        diffVars[x].getParent()[diffVars[x].getId()] = diffVars[x];\n      }\n    }\n    return diffReportVars;\n  },\n\n  /**\n   * Merge simple instances \n   * @param {*} diffInst wrapped instance objects to be added\n   * @param {*} diffReportInst diff report list to be filled\n   * @param {World} parent - parent container: the world in which the instances are defined\n   */\n  _mergeInstances: function (diffInst, parent) {\n    const currentModelInst = parent.getInstances();\n    const wrappedObj = parent.wrappedObj;\n    const diffReportInst = [];\n\n    if (wrappedObj.instances == undefined) {\n      wrappedObj.instances = [];\n    }\n\n    for (var x = 0; x < diffInst.length; x++) {\n      if (diffInst[x].getWrappedObj().synched == true) {\n        // if synch placeholder var, skip it\n        continue;\n      }\n\n      diffInst[x].parent = this.geppettoModel;\n          \n      this.populateTypeReferences(diffInst[x]);\n          \n      const match = currentModelInst[diffInst[x].getId()];\n      if (match) {\n        const matchIdx = currentModelInst.findIndex(currModelVar => diffInst[x].getPath() == currModelVar.getPath());\n        currentModelInst[matchIdx] = diffInst[x];\n        currentModelInst[match.getId()] = diffInst[x];\n        Instances[match.getId()] = diffInst[x];\n      } else {\n        // if no match, add it, it's actually new\n        diffReportInst.push(diffInst[x]);\n        // append variable to raw model\n        wrappedObj.instances.push(diffInst[x].getWrappedObj());\n\n        // add variable to geppetto object model\n            \n        currentModelInst.push(diffInst[x]);\n            \n\n        // find new potential instance paths and add to the list\n        const newInstancePath = createInstancePathObj(diffInst[x]);\n        this.allPaths.push(newInstancePath);\n        this.allPathsIndexing.push(newInstancePath);\n\n        // let's populate the shortcut in the parent of the variable, this might not exist if it was a fetch\n            \n        // window.Instances.push(diffInst[x]);\n          \n        this.geppettoModel[diffInst[x].getId()] = diffInst[x];\n      }\n\n    }\n    return diffReportInst;\n  },\n            \n  mergeValue: function (rawModel, overrideTypes) {\n    if (overrideTypes == undefined) {\n      overrideTypes = false;\n    }\n\n    this.newPathsIndexing = [];\n\n    // diff object to report back what changed / has been added\n    var diffReport = { variables: [], types: [], libraries: [], worlds: [] };\n    var diffVars = diffReport.variables;\n\n\n    // STEP 1: create new geppetto model to merge into existing one\n    var diffModel = this.createGeppettoModel(rawModel, false, false);\n\n    // STEP 1.5: add world\n    if (rawModel.worlds && rawModel.worlds.length) {\n      for (let world of rawModel.worlds) {\n        if (!world.synched) {\n          diffReport.worlds.push(world);\n          diffVars = world.variables;\n        }\n      }\n    }\n        \n\n    // STEP 2: add libraries/types if any are different (both to object model and json model)\n    var diffLibs = diffModel.getLibraries();\n    var libs = this.geppettoModel.getLibraries();\n    var libMatch = false;\n    var i = 0, j = 0;\n    for (i = 0; i < diffLibs.length; i++) {\n      if (diffLibs[i].getWrappedObj().synched == true) {\n        continue;\n      }\n      for (j = 0; j < libs.length; j++) {\n        if (diffLibs[i].getPath() == libs[j].getPath()) {\n          libMatch = true;\n          break;\n        }\n      }\n      if (libMatch) {\n        break;\n      }\n    }   \n    // diffReport.libraries.push(diffLibs[i]);\n    var diffTypes = diffLibs[i].getTypes();\n    var existingTypes = libs[j].getTypes();\n    var typeMatch = false;\n    var k = 0, m = 0;\n    for (k = 0; k < diffTypes.length; k++) {\n      if (diffTypes[k].getWrappedObj().synched == true){\n        continue;\n      }\n      for (m = 0; m < existingTypes.length; m++) {\n        if (diffTypes[k].getPath() == existingTypes[m].getPath()) {\n          typeMatch = true;\n          break;\n        }\n      }\n      if (typeMatch) {\n        break;\n      }\n    }\n    // diffReport.types.push(diffTypes[k]);\n    var diffVars = diffTypes[k].getVariables();\n    var vars = existingTypes[m].getVariables();\n    var varMatch = false;\n    for (var x = 0; x < diffVars.length; x++) {\n      if (diffVars[x].getWrappedObj().synched == true) {\n        continue;\n      }\n      for (var y = 0; y < vars.length; y++) {\n        if (diffVars[x].getPath() == vars[y].getPath()) {\n          varMatch = true;\n          this.populateTypeReferences(diffVars[x]);\n          vars[y] = diffVars[x];\n          diffVars.push(vars[y]); // FIXME variables to worlds\n          break;\n        }\n      }\n      if (varMatch) {\n        break;\n      }\n    }            \n    return diffReport;\n  },\n             \n  /**\n   * Updates capabilities of variables and their instances if any\n   *\n   * @param variables\n   */\n  updateCapabilities: function (variables) {\n    // some bit of code encapsulated for private re-use\n    var that = this;\n    var updateInstancesCapabilities = function (instances) {\n      for (var j = 0; j < instances.length; j++) {\n        // check if visual type and inject AVisualCapability\n        var visualType = instances[j].getVisualType();\n        // check if visual type and inject AVisualCapability\n        if ((!(visualType instanceof Array) && visualType != null && visualType != undefined)\n                            || (visualType instanceof Array && visualType.length > 0)) {\n\n          if (!instances[j].hasCapability(Resources.VISUAL_CAPABILITY)) {\n            instances[j].extendApi(AVisualCapability);\n            that.propagateCapabilityToParents(AVisualCapability, instances[j]);\n\n            if (visualType instanceof Array && visualType.length > 1) {\n              throw ( \"Support for more than one visual type is not implemented.\" );\n            }\n\n            // check if it has visual groups - if so add visual group capability\n            if ((typeof visualType.getVisualGroups === \"function\")\n                                    && visualType.getVisualGroups() != null\n                                    && visualType.getVisualGroups().length > 0) {\n              instances[j].extendApi(AVisualGroupCapability);\n              instances[j].setVisualGroups(visualType.getVisualGroups());\n            }\n\n\n          }\n        }\n\n        // check if it has connections and inject AConnectionCapability\n        if (instances[j].getType().getMetaType() == Resources.CONNECTION_TYPE) {\n          if (!instances[j].hasCapability(Resources.CONNECTION_CAPABILITY)) {\n            instances[j].extendApi(AConnectionCapability);\n            that.resolveConnectionValues(instances[j]);\n          }\n        }\n\n        if (instances[j].getType().getMetaType() == Resources.STATE_VARIABLE_TYPE) {\n          if (!instances[j].hasCapability(Resources.STATE_VARIABLE_CAPABILITY)) {\n            instances[j].extendApi(AStateVariableCapability);\n          }\n        }\n\n        if (instances[j].getType().getMetaType() == Resources.DERIVED_STATE_VARIABLE_TYPE) {\n          if (!instances[j].hasCapability(Resources.DERIVED_STATE_VARIABLE_CAPABILITY)) {\n            instances[j].extendApi(ADerivedStateVariableCapability);\n          }\n        }\n                        \n        if (instances[j].getType().getMetaType() == Resources.PARAMETER_TYPE) {\n          if (!instances[j].hasCapability(Resources.PARAMETER_CAPABILITY)) {\n            instances[j].extendApi(AParameterCapability);\n          }\n        }\n\n        // getChildren of instance and recurse by the power of greyskull!\n        updateInstancesCapabilities(instances[j].getChildren());\n      }\n    };\n\n    // update capabilities for variables\n    for (var i = 0; i < variables.length; i++) {\n      var resolvedTypes = variables[i].getTypes();\n      for (var j = 0; j < resolvedTypes.length; j++) {\n        if (resolvedTypes[j].getMetaType() == Resources.PARAMETER_TYPE) {\n          // if a variable has a Parameter type, add AParameterCapability to the variable\n          if (!variables[i].hasCapability(Resources.PARAMETER_CAPABILITY)) {\n            variables[i].extendApi(AParameterCapability);\n          }\n        } else if (resolvedTypes[j].getMetaType() == Resources.CONNECTION_TYPE) {\n          // if a variable has a connection type, add connection capability\n          if (!variables[i].hasCapability(Resources.CONNECTION_CAPABILITY)) {\n            variables[i].extendApi(AConnectionCapability);\n          }\n        }\n      }\n\n      var varInstances = this.getAllInstancesOf(variables[i]);\n\n      // update instances capabilities\n      updateInstancesCapabilities(varInstances);\n    }\n  },\n\n  /**\n   * Adds potential instance paths to internal cache\n   *\n   * @param variables\n   */\n  addPotentialInstancePaths: function (variables) {\n    var potentialInstancePaths = [];\n    var potentialInstancePathsForIndexing = [];\n\n    for (var i = 0; i < variables.length; i++) {\n      this.fetchAllPotentialInstancePaths(variables[i], potentialInstancePaths, potentialInstancePathsForIndexing, '');\n    }\n\n    // add to allPaths and to allPathsIndexing (assumes they are new paths)\n    this.allPaths = this.allPaths.concat(potentialInstancePaths);\n    this.allPathsIndexing = this.allPathsIndexing.concat(potentialInstancePathsForIndexing);\n    this.newPathsIndexing = this.newPathsIndexing.concat(potentialInstancePathsForIndexing);\n  },\n\n  /**\n   * Add potential instance paths to internal cache given a new type\n   *\n   * @param type\n   */\n  addPotentialInstancePathsForTypeSwap: function (type) {\n\n    var typePath = type.getPath();\n    // Get all paths for the new type\n    var partialPathsForNewType = [];\n    var partialPathsForNewTypeIndexing = [];\n\n    this.fetchAllPotentialInstancePathsForType(type, partialPathsForNewType, partialPathsForNewTypeIndexing, []);\n\n    // Get all potential instances for the type we are swapping\n    var potentialInstancesForNewtype = ModelFactory.getAllPotentialInstancesOfType(typePath);\n    var potentialInstancesForNewtypeIndexing = ModelFactory.getAllPotentialInstancesOfType(typePath, this.allPathsIndexing);\n\n    this.allPaths.replace = [];\n    // Generate new paths and add\n    for (var i = 0; i < potentialInstancesForNewtype.length; i++) {\n      for (var j = 0; j < partialPathsForNewType.length; j++) {\n\n        // figure out is we are dealing with statics\n        var path = undefined;\n        if (partialPathsForNewType[j].static === true) {\n          path = partialPathsForNewType[j].path;\n        } else {\n          path = potentialInstancesForNewtype[i] + '.' + partialPathsForNewType[j].path;\n        }\n\n        var entry = {\n          path: path,\n          metaType: partialPathsForNewType[j].metaType,\n          type: partialPathsForNewType[j].type\n        };\n\n        this.allPaths.replace.push(entry);\n      }\n    }\n\n    this.allPathsIndexing.replace = [];\n    this.newPathsIndexing.replace = [];\n    // same as above for indexing paths\n    for (var i = 0; i < potentialInstancesForNewtypeIndexing.length; i++) {\n      for (var j = 0; j < partialPathsForNewTypeIndexing.length; j++) {\n\n        // figure out is we are dealing with statics\n        var path = undefined;\n        if (partialPathsForNewTypeIndexing[j].static === true) {\n          path = partialPathsForNewTypeIndexing[j].path;\n        } else {\n          path = potentialInstancesForNewtypeIndexing[i] + '.' + partialPathsForNewTypeIndexing[j].path;\n        }\n\n        var entry = {\n          path: path,\n          metaType: partialPathsForNewType[j].metaType,\n          type: partialPathsForNewType[j].type\n        };\n\n        this.allPathsIndexing.replace.push(entry);\n        this.newPathsIndexing.replace.push(entry);\n      }\n    }\n\n    // If variable already in allPathsIndexing, newPathsIndexing and allPaths, remove it before adding the new variable\n    for (var list of [this.allPathsIndexing, this.newPathsIndexing, this.allPaths]) {\n      var is = [];\n      for (var i = 0; i < list.length; ++i) {\n        if (list.replace.indexOf(list[i].path) > -1) {\n          is.push(i);\n        }\n      }\n      for (var i = 0; i < list.replace.length; ++i) {\n        if (is[i] > -1) {\n          list.splice(is[i],1);\n        }\n        list.push(list.replace[i]);\n      }\n      delete list.replace;\n    }\n\n    // look for import type references and amend type\n    for (var list of [this.allPaths, this.allPathsIndexing]) {\n      for (var i = 0; i < list.length; ++i) {\n        if (list[i].type == typePath) {\n          list[i].metaType = type.getMetaType();\n        }\n      }\n    }\n  },\n\n  /**\n   * Given a variable, swap a given type out for another type (recursive on nested types and vars)\n   *\n   * @param variable\n   * @param typeToSwapOut\n   * @param typeToSwapIn\n   */\n  swapTypeInVariable: function (variable, typeToSwapOut, typeToSwapIn) {\n    // ugly but we need the actual arrays stored in the variable as we'll be altering them\n    var types = variable.types;\n    var anonTypes = variable.anonymousTypes;\n\n    if (types && types.length > 0) {\n      this.swapTypeInTypes(types, typeToSwapOut, typeToSwapIn);\n    }\n    if (anonTypes && anonTypes.length > 0) {\n      this.swapTypeInTypes(anonTypes, typeToSwapOut, typeToSwapIn);\n    }\n  },\n\n  /**\n   * Given a set of types, swap a given type out for another type (recursive on nested variables)\n   *\n   * @param types\n   * @param typeToSwapOut\n   * @param typeToSwapIn\n   */\n  swapTypeInTypes: function (types, typeToSwapOut, typeToSwapIn) {\n    for (var y = 0; y < types.length; y++) {\n      if (types[y].getMetaType() == typeToSwapOut.getMetaType() && types[y].getId() == typeToSwapOut.getId()) {\n        // swap type referenced with the override one\n        types[y] = typeToSwapIn;\n      } else if (types[y].getMetaType() == Resources.COMPOSITE_TYPE_NODE) {\n        // if composite - recurse for each var\n        var nestedVars = types[y].getVariables();\n        for (var x = 0; x < nestedVars.length; x++) {\n          this.swapTypeInVariable(nestedVars[x], typeToSwapOut, typeToSwapIn);\n        }\n      }\n    }\n  },\n\n  /**\n   * Adds instances to a list of existing instances. It will expand the instance tree if it partially exists or create it if doesn't.\n   * NOTE: instances will only be added if a matching variable can be found in the GeppettoModel\n   */\n  addInstances: function (newInstancesPaths, topInstances, geppettoModel, instanceCreatedCallback = null) {\n    // based on list of new paths, expand instance tree\n    for (var j = 0; j < newInstancesPaths.length; j++) {\n      /*\n       * process instance paths and convert instance path syntax to raw id concatenation syntax\n       * e.g. acnet2.baskets_12[0].v --> acnet2.baskets_12.baskets_12[0].v\n       */\n      var idConcatPath = '';\n      var splitInstancePath = newInstancesPaths[j].split('.');\n      for (var i = 0; i < splitInstancePath.length; i++) {\n        if (splitInstancePath[i].indexOf('[') > -1) {\n          // contains array syntax = so grab array id\n          var arrayId = splitInstancePath[i].split('[')[0];\n          // replace brackets\n          var arrayElementId = splitInstancePath[i];\n\n          splitInstancePath[i] = arrayId + '.' + arrayElementId;\n        }\n\n        idConcatPath += (i != splitInstancePath.length - 1) ? (splitInstancePath[i] + '.') : splitInstancePath[i];\n      }\n      this.buildInstanceHierarchy(idConcatPath, null, geppettoModel, topInstances);\n    }\n\n    // populate shortcuts including new instances just created\n    for (var k = 0; k < topInstances.length; k++) {\n      this.populateChildrenShortcuts(topInstances[k]);\n\n      // populate at window level\n      window[topInstances[k].getId()] = topInstances[k];\n      window.Instances[topInstances[k].getId()] = topInstances[k];\n    }\n\n    if (instanceCreatedCallback) {\n      newInstancesPaths.forEach(newInstance => {\n        if (newInstance !== \"time\") {\n          if (newInstance.includes('.')) {\n            let instanceStrings = newInstance.split(\".\");\n            if (window.Instances[instanceStrings[0]][instanceStrings[1]] !== undefined) {\n              instanceCreatedCallback(newInstance);\n            }\n          } else if (window.Instances[newInstance] !== undefined){\n            instanceCreatedCallback(newInstance);\n          }\n        }\n      })\n    }\n\n  },\n\n  /**\n   * Build instance hierarchy\n   */\n  buildInstanceHierarchy: function (path, parentInstance, model, topLevelInstances) {\n    var variable = null;\n    var newlyCreatedInstance = null;\n    var newlyCreatedInstances = [];\n\n    // STEP 1: find matching first variable in path in the model object passed in\n    var varsIds = path.split('.');\n    // check model MetaType and find variable accordingly\n    if (model.getMetaType() == Resources.GEPPETTO_MODEL_NODE) {\n      var variables = model.getAllVariables();\n      for (var i = 0; i < variables.length; i++) {\n        if (varsIds[0] === variables[i].getId()) {\n          variable = variables[i];\n          break;\n        }\n      }\n    } else if (model.getMetaType() == Resources.VARIABLE_NODE) {\n      var allTypes = model.getTypes();\n\n      // if array, and the array type\n      if (allTypes.length == 1 && allTypes[0].getMetaType() == Resources.ARRAY_TYPE_NODE) {\n        allTypes.push(model.getTypes()[0].getType());\n      }\n\n      // get all variables and match it from there\n      for (var i = 0; i < allTypes.length; i++) {\n        if (allTypes[i].getMetaType() == Resources.COMPOSITE_TYPE_NODE) {\n          var variables = allTypes[i].getVariables();\n\n          for (var m = 0; m < variables.length; m++) {\n            if (varsIds[0] === variables[m].getId()) {\n              variable = variables[m];\n              break;\n            }\n          }\n\n          // break outer loop too\n          if (variable != null) {\n            break;\n          }\n        }\n      }\n\n      // check if parent is an array - if so we know the variable cannot exist so set the same variable as the array\n      if (variable == null && parentInstance.getMetaType() == Resources.ARRAY_INSTANCE_NODE) {\n        // the variable associated to an array element is still the array variable\n        variable = model;\n      }\n    }\n\n    // STEP 2: create instance for given variable\n    if (variable != null) {\n\n      var types = variable.getTypes();\n      var arrayType = null;\n      for (var j = 0; j < types.length; j++) {\n        if (types[j].getMetaType() == Resources.ARRAY_TYPE_NODE) {\n          arrayType = types[j];\n          break;\n        }\n      }\n\n      // check in top level instances if we have an instance for the current variable already\n      var instancePath = (parentInstance != null) ? (parentInstance.getInstancePath() + '.' + varsIds[0]) : varsIds[0];\n      var matchingInstance = this.findMatchingInstance(instancePath, topLevelInstances);\n\n      if (matchingInstance != null) {\n        // there is a match, simply re-use that instance as the \"newly created one\" instead of creating a new one\n        newlyCreatedInstance = matchingInstance;\n      } else if (arrayType != null) {\n        // when array type, explode into multiple ('size') instances\n        var size = arrayType.getSize();\n\n        // create new ArrayInstance object, add children to it\n        var arrayOptions = {\n          id: variable.getId(),\n          name: variable.getName(),\n          _metaType: Resources.ARRAY_INSTANCE_NODE,\n          variable: variable,\n          size: size,\n          parent: parentInstance\n        };\n        var arrayInstance = this.createArrayInstance(arrayOptions);\n                        \n                   \n        for (var i = 0; i < size; i++) {\n          // create simple instance for this variable\n          var options = {\n            id: variable.getId() + '[' + i + ']',\n            name: variable.getName() + '[' + i + ']',\n            _metaType: Resources.ARRAY_ELEMENT_INSTANCE_NODE,\n            variable: variable,\n            children: [],\n            parent: arrayInstance,\n            index: i\n          };\n          var explodedInstance = this.createArrayElementInstance(options);\n\n          // check if visual type and inject AVisualCapability\n          var visualType = explodedInstance.getVisualType();\n          if ((!(visualType instanceof Array) && visualType != null && visualType != undefined)\n                                || (visualType instanceof Array && visualType.length > 0)) {\n            explodedInstance.extendApi(AVisualCapability);\n            this.propagateCapabilityToParents(AVisualCapability, explodedInstance);\n\n            if (visualType instanceof Array && visualType.length > 1) {\n              throw ( \"Support for more than one visual type is not implemented.\" );\n            }\n\n            // check if it has visual groups - if so add visual group capability\n            if ((typeof visualType.getVisualGroups === \"function\")\n                                    && visualType.getVisualGroups() != null\n                                    && visualType.getVisualGroups().length > 0) {\n              explodedInstance.extendApi(AVisualGroupCapability);\n              explodedInstance.setVisualGroups(visualType.getVisualGroups());\n            }\n          }\n\n          // check if it has connections and inject AConnectionCapability\n          if (explodedInstance.getType().getMetaType() == Resources.CONNECTION_TYPE) {\n            explodedInstance.extendApi(AConnectionCapability);\n            this.resolveConnectionValues(explodedInstance);\n          }\n\n          if (explodedInstance.getType().getMetaType() == Resources.STATE_VARIABLE_TYPE) {\n            explodedInstance.extendApi(AStateVariableCapability);\n          }\n\n          if (explodedInstance.getType().getMetaType() == Resources.DERIVED_STATE_VARIABLE_TYPE) {\n            explodedInstance.extendApi(ADerivedStateVariableCapability);\n          }\n\n          if (explodedInstance.getType().getMetaType() == Resources.PARAMETER_TYPE) {\n            explodedInstance.extendApi(AParameterCapability);\n          }\n\n          // add to array instance (adding this way because we want to access as an array)\n          arrayInstance[i] = explodedInstance;\n\n          // ad to newly created instances list\n          newlyCreatedInstances.push(explodedInstance);\n        }\n\n        //  if there is a parent add to children else add to top level instances\n        if (parentInstance != null && parentInstance != undefined) {\n          parentInstance.addChild(arrayInstance);\n        } else {\n          // NOTE: not sure if this can ever happen (top level instance == array)\n          topLevelInstances.push(arrayInstance);\n        }\n\n      } else if (!variable.isStatic()) {\n        // NOTE: only create instances if variable is NOT static\n\n        // create simple instance for this variable\n        var options = {\n          id: variable.getId(),\n          name: variable.getName(),\n          _metaType: Resources.INSTANCE_NODE,\n          variable: variable,\n          children: [],\n          parent: parentInstance\n        };\n        newlyCreatedInstance = this.createInstance(options);\n\n        // check if visual type and inject AVisualCapability\n        var visualType = newlyCreatedInstance.getVisualType();\n        // check if visual type and inject AVisualCapability\n        if ((!(visualType instanceof Array) && visualType != null && visualType != undefined)\n                            || (visualType instanceof Array && visualType.length > 0)) {\n          newlyCreatedInstance.extendApi(AVisualCapability);\n          // particles can move, we store its state in the time series coming from the statevariablecapability\n          if (visualType.getId() == Resources.PARTICLES_TYPE) {\n            newlyCreatedInstance.extendApi(AParticlesCapability);\n          }\n          this.propagateCapabilityToParents(AVisualCapability, newlyCreatedInstance);\n\n          if (visualType instanceof Array && visualType.length > 1) {\n            throw ( \"Support for more than one visual type is not implemented.\" );\n          }\n\n          // check if it has visual groups - if so add visual group capability\n          if ((typeof visualType.getVisualGroups === \"function\")\n                                && visualType.getVisualGroups() != null\n                                && visualType.getVisualGroups().length > 0) {\n            newlyCreatedInstance.extendApi(AVisualGroupCapability);\n            newlyCreatedInstance.setVisualGroups(visualType.getVisualGroups());\n          }\n\n        }\n\n        // check if it has connections and inject AConnectionCapability\n        if (newlyCreatedInstance.getType().getMetaType() == Resources.CONNECTION_TYPE) {\n          newlyCreatedInstance.extendApi(AConnectionCapability);\n          this.resolveConnectionValues(newlyCreatedInstance);\n        }\n\n        if (newlyCreatedInstance.getType().getMetaType() == Resources.STATE_VARIABLE_TYPE) {\n          newlyCreatedInstance.extendApi(AStateVariableCapability);\n        }\n\n        if (newlyCreatedInstance.getType().getMetaType() == Resources.DERIVED_STATE_VARIABLE_TYPE) {\n          newlyCreatedInstance.extendApi(ADerivedStateVariableCapability);\n        }\n\n        if (newlyCreatedInstance.getType().getMetaType() == Resources.PARAMETER_TYPE) {\n          newlyCreatedInstance.extendApi(AParameterCapability);\n        }\n\n        //  if there is a parent add to children else add to top level instances\n        if (parentInstance != null && parentInstance != undefined) {\n          parentInstance.addChild(newlyCreatedInstance);\n        } else {\n          topLevelInstances.push(newlyCreatedInstance);\n        }\n      }\n    }\n\n    // STEP: 3 recurse rest of path (without first / leftmost var)\n    var newPath = '';\n    for (var i = 0; i < varsIds.length; i++) {\n      if (i != 0) {\n        newPath += (i < (varsIds.length - 1)) ? (varsIds[i] + '.') : varsIds[i];\n      }\n    }\n\n    // if there is a parent instance - recurse with new parameters\n    if (newlyCreatedInstance != null && newPath != '') {\n      this.buildInstanceHierarchy(newPath, newlyCreatedInstance, variable, topLevelInstances);\n    }\n\n    // if there is a list of exploded instances recurse on each\n    if (newlyCreatedInstances.length > 0 && newPath != '') {\n      for (var x = 0; x < newlyCreatedInstances.length; x++) {\n        this.buildInstanceHierarchy(newPath, newlyCreatedInstances[x], variable, topLevelInstances);\n      }\n    }\n  },\n\n  /**\n   * Resolve connection values\n   */\n  resolveConnectionValues: function (connectionInstanceOrVariable) {\n\n    // get initial values\n    var initialValues = null;\n    if (connectionInstanceOrVariable instanceof Instance) {\n      initialValues = connectionInstanceOrVariable.getVariable().getWrappedObj().initialValues;\n    } else if (connectionInstanceOrVariable.getMetaType() == Resources.VARIABLE_NODE) {\n      initialValues = connectionInstanceOrVariable.getWrappedObj().initialValues;\n    }\n\n    // get pointer A and pointer B\n    var connectionValue = initialValues[0].value;\n    // resolve A and B to Pointer Objects\n    var pointerA = this.createPointer(connectionValue.a);\n    var pointerB = this.createPointer(connectionValue.b);\n\n    if (connectionInstanceOrVariable instanceof Instance) {\n      this.augmentPointer(pointerA, connectionInstanceOrVariable);\n      this.augmentPointer(pointerB, connectionInstanceOrVariable);\n    }\n\n    // set A and B on connection\n    connectionInstanceOrVariable.setA(pointerA);\n    connectionInstanceOrVariable.setB(pointerB);\n  },\n\n  /**\n   * Augment pointer with fully qualified chain to point to a specific instance\n   */\n  augmentPointer: function (pointer, connectionInstance) {\n    // find root for this branch\n    var rootInstance = this.findRoot(connectionInstance);\n\n    // find instance for given pointed variable if any\n    var pointedVariable = pointer.getElements()[0].getVariable();\n    var pointedIndex = pointer.getElements()[0].getIndex();\n\n    // TODO: this could return potentially more than one match - need to extend to resolve to one\n    var matchingInstance = this.findMatchingInstanceByID(pointedVariable.getId(), [rootInstance]);\n\n    // traverse branch and build new array of PointerElements down to instance, given instancepath\n    var pointerElements = [];\n    var originalElement = pointer.getElements()[0];\n    this.buildPointerElementsChain(matchingInstance.getRawInstancePath(), rootInstance, pointerElements, originalElement);\n\n    // horribly override elements with newly created ones\n    pointer.elements = pointerElements;\n\n    // add connection instance reference to matching instance for easy retrieval\n    if (pointedIndex > -1) {\n      matchingInstance.getChildren()[pointedIndex].addConnection(connectionInstance);\n    } else {\n      matchingInstance.addConnection(connectionInstance);\n    }\n  },\n\n  /**\n   * Build Pointer elements chain\n   *\n   */\n  buildPointerElementsChain: function (path, instance, pointerElements, originalElement) {\n    var instanceIds = path.split('.');\n\n    if (instance.getId() === instanceIds[0]) {\n      if (originalElement.getVariable().getId() === instanceIds[0]) {\n        // re-use original element\n        pointerElements.push(originalElement);\n      } else {\n        // create pointer element\n        var options = {\n          \"variable\": instance.getVariable(),\n          \"type\": instance.getType(),\n          \"index\": undefined\n        };\n        var pointerEl = new PointerElement(options);\n        pointerElements.push(pointerEl);\n      }\n\n      // build new path\n      var newPath = '';\n      for (var i = 0; i < instanceIds.length; i++) {\n        if (i != 0) {\n          newPath += (i < (instanceIds.length - 1)) ? (instanceIds[i] + '.') : instanceIds[i];\n        }\n      }\n\n      // recurse\n      if (newPath != '') {\n        var children = instance.getChildren();\n        for (var i = 0; i < children.length; i++) {\n          this.buildPointerElementsChain(newPath, children[i], pointerElements, originalElement);\n        }\n      }\n    }\n    // else do nothing, do not recurse on dead branches\n  },\n\n  /**\n   * Find root instance\n   */\n  findRoot: function (instance) {\n    var matching = null;\n\n    var parent = instance.getParent();\n    if (parent == undefined || parent == null) {\n      matching = instance;\n    } else {\n      var recurseMatching = this.findRoot(parent);\n      if (recurseMatching != null) {\n        matching = recurseMatching;\n      }\n    }\n\n    return matching;\n  },\n\n  /**\n   * Propagates a capability to parents of the given instance\n   */\n  propagateCapabilityToParents: function (capability, instance) {\n    var parent = instance.getParent();\n\n    // check if it has capability\n    if (!(parent == undefined || parent == null) && !parent.hasCapability(capability.capabilityId)) {\n      // apply capability\n      parent.extendApi(capability);\n\n      this.propagateCapabilityToParents(capability, parent);\n    }\n\n    // else --> live & let die\n  },\n\n  /**\n   * Find instance(s) given variable id, if any\n   */\n  findMatchingInstanceByID: function (id, instances) {\n    var matching = null;\n\n    for (var i = 0; i < instances.length; i++) {\n      if (instances[i].getId() == id) {\n        matching = instances[i];\n        break;\n      } else {\n        if (typeof instances[i].getChildren === \"function\") {\n          var recurseMatch = this.findMatchingInstanceByID(id, instances[i].getChildren());\n          if (recurseMatch != null) {\n            matching = recurseMatch;\n            break;\n          }\n        }\n      }\n    }\n\n    return matching;\n  },\n\n  /**\n   * Find instance given instance path (unique), if any\n   */\n  findMatchingInstance: function (instancePath, instances) {\n    var matching = null;\n\n    for (var i = 0; i < instances.length; i++) {\n      if (instances[i].getRawInstancePath() == instancePath) {\n        matching = instances[i];\n        break;\n      } else {\n        if (typeof instances[i].getChildren === \"function\") {\n          var recurseMatch = this.findMatchingInstance(instancePath, instances[i].getChildren());\n          if (recurseMatch != null) {\n            matching = recurseMatch;\n            break;\n          }\n        }\n      }\n    }\n\n    return matching;\n  },\n\n  /**\n   * Find instance given Type\n   */\n  findMatchingInstancesByType: function (type, instances, matchingInstance) {\n    for (var i = 0; i < instances.length; i++) {\n      var types = instances[i].getTypes();\n      for (var j = 0; j < types.length; j++) {\n        if (types[j] === type || types[j].getVisualType() === type) {\n          matchingInstance.push(instances[i]);\n          break;\n        }\n      }\n\n      if (typeof instances[i].getChildren === \"function\") {\n        this.findMatchingInstancesByType(type, instances[i].getChildren(), matchingInstance);\n      }\n    }\n  },\n\n  /**\n   * Find instance given Variable\n   */\n  findMatchingInstancesByVariable: function (variable, instances, matchingInstance) {\n    for (var i = 0; i < instances.length; i++) {\n      if (instances[i].getVariable() === variable) {\n        matchingInstance.push(instances[i]);\n        break;\n      }\n\n      if (typeof instances[i].getChildren === \"function\") {\n        this.findMatchingInstancesByVariable(variable, instances[i].getChildren(), matchingInstance);\n      }\n    }\n  },\n\n  /**\n   * Build \"list\" of variables that have a visual type\n   */\n  fetchVarsWithVisualTypes: function (node, varsWithVizTypes, parentPath) {\n    /*\n     * build \"list\" of variables that have a visual type (store \"path\")\n     * check meta type - we are only interested in variables\n     */\n    var path = (parentPath == '') ? node.getId() : (parentPath + '.' + node.getId());\n    if (node.getMetaType() == Resources.VARIABLE_NODE) {\n      var allTypes = node.getTypes();\n      for (var i = 0; i < allTypes.length; i++) {\n        // if normal type or composite type check if it has a visual type\n        if (allTypes[i].getMetaType() == Resources.TYPE_NODE || allTypes[i].getMetaType() == Resources.COMPOSITE_TYPE_NODE) {\n          var vizType = allTypes[i].getVisualType();\n\n          if (vizType != undefined && vizType != null) {\n            // ADD to list of vars with viz types\n            varsWithVizTypes.push(path);\n          }\n        } else if (allTypes[i].getMetaType() == Resources.ARRAY_TYPE_NODE) {\n          // if array type, need to check what type the array is of\n          var arrayType = allTypes[i].getType();\n          var vizType = arrayType.getVisualType();\n\n          if (vizType != undefined && vizType != null) {\n            // ADD to list of vars with viz types\n            varsWithVizTypes.push(path);\n          }\n        } else if ((allTypes[i].getMetaType() == Resources.VISUAL_TYPE_NODE) || (allTypes[i].getMetaType() == Resources.COMPOSITE_VISUAL_TYPE_NODE)) {\n          varsWithVizTypes.push(path);\n        }\n\n        // RECURSE on any variables inside composite types\n        if (allTypes[i].getMetaType() == Resources.COMPOSITE_TYPE_NODE) {\n          var vars = allTypes[i].getVariables();\n\n          if (vars != undefined && vars != null) {\n            for (var j = 0; j < vars.length; j++) {\n              this.fetchVarsWithVisualTypes(vars[j], varsWithVizTypes, (parentPath == '') ? node.getId() : (parentPath + '.' + node.getId()));\n            }\n          }\n        } else if (allTypes[i].getMetaType() == Resources.ARRAY_TYPE_NODE) {\n          var arrayType = allTypes[i].getType();\n\n          // check if the array is of composite type and if so recurse too on contained variables\n          if (arrayType.getMetaType() == Resources.COMPOSITE_TYPE_NODE) {\n            var vars = arrayType.getVariables();\n\n            if (vars != undefined && vars != null) {\n              for (var j = 0; j < vars.length; j++) {\n                this.fetchVarsWithVisualTypes(vars[j], varsWithVizTypes, (parentPath == '') ? node.getId() : (parentPath + '.' + node.getId()));\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n\n  /**\n   *\n   * @param node\n   * @param path\n   * @returns {boolean}\n   */\n  includePotentialInstance: function (node, path) {\n    if (node.getType().getMetaType() == Resources.CONNECTION_TYPE) {\n      return false;\n    }\n\n    if (node.getType().getMetaType() == Resources.TEXT_TYPE) {\n      return false;\n    }\n\n    var nested = this.getNestingLevel(path);\n    if (node.getType().getMetaType() == Resources.COMPOSITE_TYPE_NODE && nested > 2) {\n      return false;\n    }\n\n    return true;\n  },\n\n  /**\n   * Get nesting level given entity path\n   *\n   * @param path\n   * @returns {number}\n   */\n  getNestingLevel: function (path) {\n    return path.length - path.replace(/\\./g, '').length;\n  },\n\n  /**\n   * Utility function to print instance tree to console\n   */\n  printInstanceStats: function () {\n    var stats = {};\n    for (var i = 0; i < this.allPaths.length; i++) {\n      var path = this.allPaths[i];\n      if (!Object.prototype.hasOwnProperty.call(stats,path.metaType)) {\n        stats[path.metaType] = 0;\n      }\n      stats[path.metaType]++;\n    }\n    console.log(stats);\n  },\n\n  /**\n   * Build list of potential instance paths (excluding connection instances)\n   */\n  fetchAllPotentialInstancePaths: function (node, allPotentialPaths, allPotentialPathsForIndexing, parentPath) {\n    // build new path\n    var xpath = '';\n    var nodeRef = node;\n    var isStaticVar = (nodeRef instanceof Variable) && node.isStatic();\n\n    if (isStaticVar){\n      /*\n       * NOTE: for static variables, we add the variable path to the indexing list as ...\n       * NOTE: it's the only way to access the variable since there are no instances for static variables\n       */\n      xpath = node.getPath();\n    } else {\n      xpath = (parentPath == '') ? node.getId() : (parentPath + '.' + node.getId());\n    }\n\n    // build entry for path storing and indexing\n    var entry = { path: xpath, metaType: node.getType().getMetaType(), type: node.getType().getPath(), static: isStaticVar };\n\n    /*\n     * if this is a static node check if we already added entry for the exact same path\n     * NOTE: can't do it always for instances as it would slow things down A LOT\n     */\n    var staticVarAlreadyAdded = false;\n    if (isStaticVar){\n      staticVarAlreadyAdded = (this.allStaticVarsPaths[entry.path] != undefined);\n      if (!staticVarAlreadyAdded){\n        this.allStaticVarsPaths[entry.path] = entry;\n      }\n    }\n\n    // always add if not a static var, otherwise check that it wasnt already added\n    if (!isStaticVar || (isStaticVar && !staticVarAlreadyAdded)){\n      allPotentialPaths.push(entry);\n      // only add to indexing if it's not a connection or nested in a composite type\n      if (this.includePotentialInstance(node, xpath)) {\n        allPotentialPathsForIndexing.push(entry);\n      }\n    }\n\n    var potentialParentPaths = [];\n    // check meta type - we are only interested in NON-static variables\n    if ((nodeRef instanceof Variable) && !node.isStatic()) {\n      var allTypes = node.getTypes();\n\n      var arrayType = undefined;\n      for (var m = 0; m < allTypes.length; m++) {\n        if (allTypes[m].getMetaType() == Resources.ARRAY_TYPE_NODE) {\n          arrayType = allTypes[m];\n        }\n      }\n\n      // STEP 1: build list of potential parent paths\n      if (arrayType != undefined) {\n        var arrayPath = arrayType.getType().getPath();\n        var arrayMetaType = arrayType.getType().getMetaType();\n        // add the [*] entry\n        if (arrayType.getSize() > 1) {\n          var starPath = xpath + '[' + '*' + ']';\n          potentialParentPaths.push(starPath);\n\n          var starEntry = {\n            path: starPath,\n            metaType: arrayMetaType,\n            type: arrayPath\n          };\n          allPotentialPaths.push(starEntry);\n          allPotentialPathsForIndexing.push(starEntry);\n        }\n\n        // add each array element path\n        for (var n = 0; n < arrayType.getSize(); n++) {\n          var arrayElementPath = xpath + '[' + n + ']';\n          potentialParentPaths.push(arrayElementPath);\n\n          var arrayElementEntry = {\n            path: arrayElementPath,\n            metaType: arrayMetaType,\n            type: arrayPath\n          };\n          allPotentialPaths.push(arrayElementEntry);\n          if (this.includePotentialInstance(node, arrayElementPath)) {\n            allPotentialPathsForIndexing.push(arrayElementEntry);\n          }\n        }\n      } else {\n        potentialParentPaths.push(xpath);\n      }\n\n      // STEP 2: RECURSE on ALL potential parent paths\n      var allTypes = node.getTypes();\n      for (var i = 0; i < allTypes.length; i++) {\n        // RECURSE on any variables inside composite types\n        this.fetchAllPotentialInstancePathsForType(allTypes[i], allPotentialPaths, allPotentialPathsForIndexing, potentialParentPaths);\n      }\n    }\n  },\n\n  /**\n   * Build list of partial instance types starting from a type\n   */\n  fetchAllPotentialInstancePathsForType: function (type, allPotentialPaths, allPotentialPathsForIndexing, potentialParentPaths) {\n    if (type.getMetaType() == Resources.COMPOSITE_TYPE_NODE) {\n      var vars = type.getVariables();\n\n      if (vars != undefined && vars != null) {\n        for (var j = 0; j < vars.length; j++) {\n          if (potentialParentPaths.length > 0) {\n            for (var g = 0; g < potentialParentPaths.length; g++) {\n              this.fetchAllPotentialInstancePaths(vars[j], allPotentialPaths, allPotentialPathsForIndexing, potentialParentPaths[g]);\n            }\n          } else {\n            // used for partial instance path generation\n            this.fetchAllPotentialInstancePaths(vars[j], allPotentialPaths, allPotentialPathsForIndexing, '');\n          }\n        }\n      }\n    } else if (type.getMetaType() == Resources.ARRAY_TYPE_NODE) {\n      var arrayType = type.getType();\n\n      // check if the array is of composite type and if so recurse too on contained variables\n      if (arrayType.getMetaType() == Resources.COMPOSITE_TYPE_NODE) {\n        var vars = arrayType.getVariables();\n\n        if (vars != undefined && vars != null) {\n          for (var l = 0; l < vars.length; l++) {\n            if (potentialParentPaths.length > 0) {\n              for (var h = 0; h < potentialParentPaths.length; h++) {\n                this.fetchAllPotentialInstancePaths(vars[l], allPotentialPaths, allPotentialPathsForIndexing, potentialParentPaths[h]);\n              }\n            } else {\n              // used for partial instance path generation\n              this.fetchAllPotentialInstancePaths(vars[l], allPotentialPaths, allPotentialPathsForIndexing, '');\n            }\n          }\n        }\n      }\n    }\n  },\n\n  /** Creates a simple composite */\n  createModel: function (node, options) {\n    if (options == null || options == undefined) {\n      options = { wrappedObj: node, parent: undefined };\n    }\n\n    var n = new GeppettoModel(options);\n\n    return n;\n  },\n\n  /** Creates a simple composite */\n  createLibrary: function (node, options) {\n    if (options == null || options == undefined) {\n      options = { wrappedObj: node };\n    }\n\n    var n = new Library(options);\n\n    return n;\n  },\n\n  /** Creates a variable */\n  createVariable: function (node, options) {\n    if (options == null || options == undefined) {\n      options = { wrappedObj: node, types: node.types };\n    }\n\n    var v = new Variable(options);\n    v.values = this.createValues(node.initialValues, v);\n    return v;\n  },\n\n  createValues: function (initialValuesObject, variable){\n    var values = [];\n    var options;\n    if (initialValuesObject != undefined){\n      for (var i = 0; i < initialValuesObject.length; i++){\n        var value = this.createValue(initialValuesObject[i], options);\n        value.parent = variable;\n        values.push(value);\n      }\n    }\n    return values;\n  }, \n            \n  createValue: function (valueNode, options){\n    if (options == null || options == undefined) {\n      options = { wrappedObj: valueNode };   \n    }\n    var value;\n    if (valueNode.value.eClass == \"ImportValue\"){\n      /*\n       * getID() was returning undefined, hence hack - ask about this.\n       * if I dont do this then path is \"Model.nwbLibrary.responseType_10.recording_10.undefined\"\n       */\n      value = new ImportValue(options);\n    } else {\n      value = new Value(options);\n    }\n               \n    return value;\n  },\n            \n  /** Creates a datasource */\n  createDatasource: function (node, options) {\n    if (options == null || options == undefined) {\n      options = { wrappedObj: node };\n    }\n\n    var d = new Datasource(options);\n\n    // create queries\n    d.queries = this.createQueries(node.queries, d);\n\n    return d;\n  },\n\n  /**\n   * Create array of client query objects given raw json query objects and a parent\n   *\n   * @param rawQueries\n   * @param parent\n   * @returns {Array}\n   */\n  createQueries: function (rawQueries, parent) {\n    var queries = [];\n\n    if (rawQueries != undefined) {\n      for (var i = 0; i < rawQueries.length; i++) {\n        var q = this.createQuery(rawQueries[i]);\n        // set datasource as parent\n        q.parent = parent;\n        // push query to queries array\n        queries.push(q);\n      }\n    }\n\n    return queries;\n  },\n\n  createQuery: function (node, options) {\n    if (options == null || options == undefined) {\n      options = { wrappedObj: node };\n    }\n\n    var q = new Query(options);\n\n    // set matching criteria\n    var matchingCriteriaRefs = node.matchingCriteria;\n    if (node.matchingCriteria != undefined){\n      for (var i = 0; i < matchingCriteriaRefs.length; i++){\n        // get type ref\n        var typeRefs = matchingCriteriaRefs[i].type;\n        var typesCriteria = [];\n        for (var j = 0; j < typeRefs.length; j++) {\n          // resolve type ref\n          var ref = typeRefs[j].$ref;\n          var type = this.resolve(ref);\n  \n          // push to q.matchingCriteria\n          if (type instanceof Type) {\n            typesCriteria.push(type);\n          }\n        }\n  \n        q.matchingCriteria.push(typesCriteria);\n      }\n    }\n\n    return q;\n  },\n\n  getTypeOptions: function (node, options) {\n    if (options == null || options == undefined) {\n      return { wrappedObj: node, superType: node.superType, visualType: node.visualType };\n    } else {\n      return options;\n    }\n  },\n\n  /** Creates a type */\n  createType: function (node, options) {\n    var t = new Type(this.getTypeOptions(node, options));\n    if (node.tags) {\n      t.tags = node.tags.map(tag => this.resolve(tag.$ref));\n    }\n    return t;\n  },\n\n  /** Creates an import type */\n  createImportType: function (node, options) {\n    var it = new ImportType(this.getTypeOptions(node, options));\n    return it;\n  },\n\n  /** Creates a composite type */\n  createCompositeType: function (node, options) {\n    var t = new CompositeType(this.getTypeOptions(node, options));\n    t.variables = this.createVariables(node.variables, t);\n\n    return t;\n  },\n\n  /** Creates a composite visual type */\n  createCompositeVisualType: function (node, options) {\n    var t = new CompositeVisualType(this.getTypeOptions(node, options));\n    t.variables = this.createVariables(node.variables, t);\n    if (node.visualGroups != undefined) {\n      t.visualGroups = this.createVisualGroups(node.visualGroups, t);\n    }\n\n    return t;\n  },\n\n  /** Creates a composite type */\n  createArrayType: function (node, options) {\n    var t = new ArrayType(this.getTypeOptions(node, options));\n    t.size = node.size;\n    t.type = node.arrayType;\n\n    return t;\n  },\n\n  updateConnectionInstances: function (instance) {\n    var typesToSearch = this.getAllTypesOfMetaType(Resources.COMPOSITE_TYPE_NODE);\n    var connectionVariables = this.getAllVariablesOfMetaType(typesToSearch, Resources.CONNECTION_TYPE);\n    var connectionInstances = [];\n\n    for (var x = 0; x < connectionVariables.length; x++) {\n      var variable = connectionVariables[x];\n      var present = false;\n      if (instance.connections) {\n        // if there's already connections we haave to check if there is already one for this variable\n        for (var y = 0; y < instance.connections.length; y++) {\n          if (instance.connections[y].getVariable() == variable) {\n            present = true;\n            break;\n          }\n        }\n\n      }\n      if (!present) {\n        var initialValues = variable.getWrappedObj().initialValues;\n\n        var connectionValue = initialValues[0].value;\n        // resolve A and B to Pointer Objects\n        var pointerA = this.createPointer(connectionValue.a);\n        var pointerB = this.createPointer(connectionValue.b);\n        if (pointerA.getPath() == instance.getId() || pointerB.getPath() == instance.getId()) {\n          // TODO if there is more than one instance of the same projection this code will break\n          var parentInstance = this.instances.getInstance(this.getAllPotentialInstancesEndingWith(variable.getParent().getId())[0]);\n          var options = {\n            id: variable.getId(),\n            name: variable.getId(),\n            _metaType: Resources.INSTANCE_NODE,\n            variable: variable,\n            children: [],\n            parent: parentInstance\n          };\n          var connectionInstance = this.createInstance(options);\n          connectionInstance.extendApi(AConnectionCapability);\n          this.augmentPointer(pointerA, connectionInstance);\n          this.augmentPointer(pointerB, connectionInstance);\n\n          // set A and B on connection\n          connectionInstance.setA(pointerA);\n          connectionInstance.setB(pointerB);\n\n          connectionInstances.push(connectionInstance);\n        }\n      }\n    }\n\n  },\n\n  /** Creates an instance */\n  createExternalInstance: function (path, projectId) {\n    var options = {\n      _metaType: Resources.INSTANCE_NODE,\n      path: path,\n      projectId: projectId,\n    };\n          \n    return new ExternalInstance(options);\n  },\n            \n  /** Creates an instance */\n  createInstance: function (options) {\n    if (options == null || options == undefined) {\n      options = { _metaType: Resources.INSTANCE_NODE };\n    }\n\n    var i = new Instance(options);\n\n    return i;\n  },\n\n  /** Creates an array element istance */\n  createArrayElementInstance: function (options) {\n    if (options == null || options == undefined) {\n      options = { _metaType: Resources.ARRAY_ELEMENT_INSTANCE_NODE };\n    }\n\n    var aei = new ArrayElementInstance(options);\n\n    return aei;\n  },\n\n  /** Creates an array istance */\n  createArrayInstance: function (options) {\n    if (options == null || options == undefined) {\n      options = { _metaType: Resources.ARRAY_INSTANCE_NODE };\n    }\n\n    var a = new ArrayInstance(options);\n\n    return a;\n  },\n\n\n  /** Creates visual groups */\n  createVisualGroups: function (nodes, parent) {\n    var visualGroups = [];\n\n    for (var i = 0; i < nodes.length; i++) {\n      if (nodes[i].visualGroupElements != undefined) {\n        var options = { wrappedObj: nodes[i] };\n\n        // get tags from raw json abd add to options\n        var tagRefObjs = nodes[i].tags;\n        if (tagRefObjs != undefined) {\n          var tags = [];\n\n          // populate tags from references\n          for (var j = 0; j < tagRefObjs.length; j++) {\n            tags.push(this.resolve(tagRefObjs[j].$ref).name);\n          }\n\n          // add to options to init object\n          options.tags = tags;\n        }\n\n        var vg = new VisualGroup(options);\n        vg.parent = parent;\n        vg.visualGroupElements = this.createVisualGroupElements(nodes[i].visualGroupElements, vg);\n\n        visualGroups.push(vg);\n      }\n    }\n\n    return visualGroups;\n  },\n\n\n  /** Creates visual group elements */\n  createVisualGroupElements: function (nodes, parent) {\n    var visualGroupElements = [];\n\n    for (var i = 0; i < nodes.length; i++) {\n      var options = { wrappedObj: nodes[i], parent: parent };\n\n      var vge = new VisualGroupElement(options);\n\n      visualGroupElements.push(vge);\n    }\n\n    return visualGroupElements;\n  },\n\n  /**\n   * Clean up state of instance tree\n   */\n  cleanupInstanceTreeState: function () {\n    // get state variables - clean out time series and watched status\n    var stateVariableInstances = this.getAllInstancesOf(Resources.STATE_VARIABLE_TYPE_PATH);\n    for (var i = 0; i < stateVariableInstances.length; i++) {\n      stateVariableInstances[i].setTimeSeries(null);\n      stateVariableInstances[i].setWatched(false, false);\n    }\n    // get parameters - clean out values\n    var parameterInstances = this.getAllInstancesOf(Resources.PARAMETER_TYPE_PATH);\n    for (var j = 0; j < parameterInstances.length; j++) {\n      parameterInstances[j].setValue(null,false);\n    }\n  },\n\n  /**\n   * Gets all instances with given capability\n   *\n   * @param capabilityId\n   * @returns {Array}\n   */\n  getAllInstancesWithCapability: function (capabilityId, instances) {\n    var matchingInstances = [];\n\n    // traverse everything and populate matching instances\n    for (var i = 0; i < instances.length; i++) {\n      if (instances[i].hasCapability(capabilityId)) {\n        matchingInstances.push(instances[i]);\n      }\n\n      if (typeof instances[i].getChildren === \"function\") {\n        matchingInstances = matchingInstances.concat(this.getAllInstancesWithCapability(capabilityId, instances[i].getChildren()));\n      }\n    }\n\n    return matchingInstances;\n  },\n\n  /**\n   * Get all instance given a type or a variable (path or actual object)\n   */\n  getAllInstancesOf: function (typeOrVar, instances) {\n    if (typeof typeOrVar === 'string' || typeOrVar instanceof String) {\n      // it's an evil string, try to eval as path in the name of satan\n      typeOrVar = eval(typeOrVar);\n    }\n\n    var allInstances = [];\n\n    if (instances == undefined) {\n      instances = this.instances;\n    }\n\n    if (typeOrVar instanceof Type) {\n      allInstances = this.getAllInstancesOfType(typeOrVar, instances);\n    } else if (typeOrVar.getMetaType() == Resources.VARIABLE_NODE) {\n      allInstances = this.getAllInstancesOfVariable(typeOrVar, instances);\n    } else {\n      // good luck\n      throw ( \"The argument \" + typeOrVar + \" is neither a Type or a Variable. Good luck.\" );\n    }\n\n    return allInstances;\n  },\n\n  /**\n   * Get all instances given a type\n   */\n  getAllInstancesOfType: function (type, instances) {\n    if (!(type instanceof Type)) {\n      // raise hell\n      throw ( \"The argument \" + type + \" is not a Type or a valid Type path. Good luck.\" );\n    }\n\n    if (instances == undefined) {\n      instances = this.instances;\n    }\n\n    // do stuff\n    var matchingInstances = [];\n    this.findMatchingInstancesByType(type, instances, matchingInstances);\n\n    return matchingInstances;\n  },\n\n  /**\n   * Get all instances given a variable\n   */\n  getAllInstancesOfVariable: function (variable, instances) {\n    if (!(variable.getMetaType() == Resources.VARIABLE_NODE)) {\n      // raise hell\n      throw ( \"The argument \" + variable + \" is not a Type or a valid Type path. Good luck.\" );\n    }\n\n    if (instances == undefined) {\n      instances = this.instances;\n    }\n\n    // do stuff\n    var matchingInstances = [];\n    this.findMatchingInstancesByVariable(variable, instances, matchingInstances);\n\n    return matchingInstances;\n  },\n\n  /**\n   * Get all POTENTIAL instances ending with a given string\n   */\n  getAllPotentialInstancesEndingWith: function (endingString) {\n    var matchingPotentialInstances = [];\n\n    for (var i = 0; i < this.allPaths.length; i++) {\n      if (this.allPaths[i].path.endsWith(endingString) && this.allPaths[i].path.indexOf(\"*\") == -1) {\n        matchingPotentialInstances.push(this.allPaths[i].path);\n      }\n    }\n\n    return matchingPotentialInstances;\n  },\n\n\n  /**\n   * Get all POTENTIAL instances starting with a given string\n   */\n  getAllPotentialInstancesStartingWith: function (startingString) {\n    var matchingPotentialInstances = [];\n\n    for (var i = 0; i < this.allPaths.length; i++) {\n      if (this.allPaths[i].path.startsWith(startingString) && this.allPaths[i].path.indexOf(\"*\") == -1) {\n        matchingPotentialInstances.push(this.allPaths[i].path);\n      }\n    }\n\n    return matchingPotentialInstances;\n  },\n\n  /**\n   * Get all POTENTIAL instances of a given type\n   */\n  getAllPotentialInstancesOfType: function (typePath, paths) {\n    if (paths == undefined) {\n      paths = this.allPaths;\n    }\n\n    var matchingPotentialInstances = [];\n\n    for (var i = 0; i < paths.length; i++) {\n      if (paths[i].type == typePath) {\n        matchingPotentialInstances.push(paths[i].path);\n      }\n    }\n\n    return matchingPotentialInstances;\n  },\n\n  /**\n   * Get all POTENTIAL instances of a given meta type\n   */\n  getAllPotentialInstancesOfMetaType: function (metaType, paths, includeType) {\n    if (paths == undefined) {\n      paths = this.allPaths;\n    }\n\n    var matchingPotentialInstances = [];\n\n    for (var i = 0; i < paths.length; i++) {\n      if (paths[i].metaType == metaType) {\n        var itemToPush = paths[i].path;\n        if (includeType === true){\n          itemToPush = paths[i];\n        }\n        matchingPotentialInstances.push(itemToPush);\n      }\n    }\n\n    return matchingPotentialInstances;\n  },\n\n  /**\n   * Get all types of given a meta type (string)\n   *\n   * @param metaType - metaType String\n   *\n   * @returns {Array} - Types\n   */\n  getAllTypesOfMetaType: function (metaType) {\n    var types = [];\n\n    // iterate all libraries\n    var libraries = this.geppettoModel.getLibraries();\n    for (var i = 0; i < libraries.length; i++) {\n      // iterate all types within library\n      var libraryTypes = libraries[i].getTypes();\n      for (var j = 0; j < libraryTypes.length; j++) {\n        // add if its metatype matches\n        if (libraryTypes[j].getMetaType() == metaType) {\n          types.push(libraryTypes[j]);\n        }\n      }\n    }\n\n    return types;\n  },\n\n  /**\n   * Get all types of given a type (checks inheritance)\n   *\n   * @param type - Type object or Type path string\n   *\n   * @returns {Array} - Types\n   */\n  getAllTypesOfType: function (type) {\n    if (typeof type === 'string' || type instanceof String) {\n      // it's an evil string, try to eval as type path in the name of baal\n      type = eval(type);\n    }\n\n    var types = [];\n\n    // iterate all libraries\n    var libraries = this.geppettoModel.getLibraries();\n    for (var i = 0; i < libraries.length; i++) {\n      // iterate all types within library\n      var libraryTypes = libraries[i].getTypes();\n      for (var j = 0; j < libraryTypes.length; j++) {\n        if (libraryTypes[j] == type) {\n          // add if it's a straight match (the type himself)\n          types.push(libraryTypes[j]);\n        } else if (libraryTypes[j].getSuperType() != undefined && libraryTypes[j].getSuperType() != null) {\n          // check list of super types\n          var superTypes = libraryTypes[j].getSuperType();\n\n          if (!(superTypes instanceof Array)) {\n            superTypes = [superTypes];\n          }\n\n          for (var w = 0; w < superTypes.length; w++) {\n            if (superTypes[w] == type) {\n              // add if superType matches\n              types.push(libraryTypes[j]);\n              // sufficient condition met, break the loop\n              break;\n            }\n          }\n        } else {\n          // TODO: no immediate matches - recurse on super type and see if any matches if any matches add this type\n          /*\n           * if(libraryTypes[j].getSuperType() != undefined && libraryTypes[j].getSuperType() != null) {\n           * var superTypeMatches = this.getAllTypesOfType(libraryTypes[j].getSuperType());\n           * if (superTypeMatches.length > 0) {\n           * types.push(libraryTypes[j]);\n           * }\n           * }\n           */\n        }\n      }\n    }\n\n    return types;\n  },\n\n  /**\n   * Gets all variables of the types provided\n   *\n   * @param typesToSearch\n   *\n   * @param typeToMatch\n   *\n   * @returns {Array}\n   */\n  getAllVariablesOfType: function (typesToSearch, typeToMatch, recursive) {\n    // check if array and if not \"make it so\"\n    if (!(typesToSearch instanceof Array)) {\n      typesToSearch = [typesToSearch];\n    }\n\n    var variables = [];\n\n    for (var i = 0; i < typesToSearch.length; i++) {\n      if (typesToSearch[i].getMetaType() == Resources.COMPOSITE_TYPE_NODE) {\n        var nestedVariables = typesToSearch[i].getVariables();\n        if (typeToMatch != undefined && typeToMatch != null) {\n          for (var j = 0; j < nestedVariables.length; j++) {\n            var varTypes = nestedVariables[j].getTypes();\n            for (var x = 0; x < varTypes.length; x++) {\n              if (varTypes[x] == typeToMatch) {\n                variables.push(nestedVariables[j]);\n              } else if (varTypes[x].getSuperType() != undefined) {\n                // check list of super types\n                var superTypes = varTypes[x].getSuperType();\n\n                if (!(superTypes instanceof Array)) {\n                  superTypes = [superTypes];\n                }\n\n                for (var w = 0; w < superTypes.length; w++) {\n                  if (superTypes[w] == typeToMatch) {\n                    variables.push(nestedVariables[j]);\n                    // sufficient condition met, break the loop\n                    break;\n                  }\n                }\n              } else if (varTypes[x].getMetaType() == Resources.COMPOSITE_TYPE_NODE) {\n                // check if type is composite and recurse\n                variables = variables.concat(this.getAllVariablesOfType([varTypes[x]], typeToMatch));\n              }\n              if (recursive) {\n                this.getAllVariablesOfType(varTypes[x], typeToMatch, recursive, variables);\n              }\n            }\n          }\n        } else {\n          variables = variables.concat(nestedVariables);\n        }\n      }\n    }\n\n    return variables;\n  },\n\n\n  /**\n   * Gets all variables with the given metaType\n   *\n   * @param typesToSearch\n   *\n   * @param metaType\n   *\n   * @returns {Array}\n   */\n  getAllVariablesOfMetaType: function (typesToSearch, metaType) {\n    // check if array and if not \"make it so\"\n    if (!(typesToSearch.constructor === Array)) {\n      typesToSearch = [typesToSearch];\n    }\n\n    var variables = [];\n\n    for (var i = 0; i < typesToSearch.length; i++) {\n      if (typesToSearch[i].getMetaType() == Resources.COMPOSITE_TYPE_NODE) {\n        var nestedVariables = typesToSearch[i].getVariables();\n        if (metaType != undefined && metaType != null) {\n          for (var j = 0; j < nestedVariables.length; j++) {\n            var varTypes = nestedVariables[j].getTypes();\n            for (var x = 0; x < varTypes.length; x++) {\n              if (varTypes[x].getMetaType() == metaType) {\n                variables.push(nestedVariables[j]);\n              }\n            }\n          }\n        } else {\n          variables = variables.concat(nestedVariables);\n        }\n      }\n    }\n\n    return variables;\n  },\n\n  /**\n   * Get top level variables by id\n   *\n   * @param variableIds\n   * @returns {Array}\n   */\n  getTopLevelVariablesById: function (variableIds){\n    var variables = [];\n\n    for (var i = 0; i < variableIds.length; i++){\n      if (window.Model[variableIds[i]] != undefined){\n        variables.push(window.Model[variableIds[i]]);\n      }\n    }\n\n    return variables;\n  },\n\n  /**\n   * Get matching queries given a type and optional results type\n   *\n   * @param type\n   * @param resultType\n   */\n  getMatchingQueries : function (type, resultType){\n    var topLevelQueries = window.Model.getQueries();\n    var matchingQueries = [];\n\n    // iterate top level queries\n    for (var k = 0; k < topLevelQueries.length; k++){\n      // check matching criteria first\n      if (topLevelQueries[k].matchesCriteria(type)){\n        // if resultType is defined then match on that too\n        if (resultType != undefined){\n          if (resultType == topLevelQueries[k].getResultType()){\n            matchingQueries.push(topLevelQueries[k]);\n          }\n        } else {\n          matchingQueries.push(topLevelQueries[k]);\n        }\n      }\n    }\n\n    return matchingQueries;\n  },\n            \n  getHTMLVariable: function (typesToSearch, metaType, identifier){\n    var variables = this.getAllVariablesOfMetaType(typesToSearch, metaType);\n    for (var i in variables){\n      if (identifier != null && identifier != undefined){\n        if (variables[i].getId() == identifier){\n          return variables[i];\n        }\n      }\n    }\n              \n    return null;\n  },\n\n  /**\n   * Get total count of instances including children\n   *\n   * @param instances\n   */\n  getInstanceCount: function (instances) {\n    var count = 0;\n\n    count += instances.length;\n\n    for (var i = 0; i < instances.length; i++) {\n      count += this.getInstanceCount(instances[i].getChildren());\n    }\n\n    return count;\n  },\n\n  /**\n   * Delete instance, also removing types and variables\n   *\n   * @param instance\n   */\n  deleteInstance: function (instance, deleteCallback) {\n    var instancePath = instance.getPath();\n    var removeMatchingInstanceFromArray = function (instanceArray, instance) {\n      var index = null;\n      for (var i = 0; i < instanceArray.length; i++) {\n        if (instanceArray[i].getPath() == instance.getPath()) {\n          index = i;\n          break;\n        }\n      }\n\n      if (index != null) {\n        instanceArray.splice(index, 1);\n      }\n    };\n\n    // delete instance\n    var parent = instance.getParent();\n    if (parent == undefined) {\n      /*\n       * parent is window\n       * remove from array of children\n       */\n      removeMatchingInstanceFromArray(window.Instances, instance);\n      // remove reference\n      delete window[instance.getId()];\n    } else {\n      // remove from array of children\n      removeMatchingInstanceFromArray(parent.getChildren(), instance);\n      // remove reference\n      delete parent[instance.getId()];\n    }\n\n    // unresolve type\n    for (var j = 0; j < instance.getTypes().length; j++) {\n      this.unresolveType(instance.getTypes()[j]);\n    }\n\n    // re-run model shortcuts\n    this.populateChildrenShortcuts(this.geppettoModel);\n\n    if (deleteCallback) {\n      deleteCallback(instancePath);\n    }\n    \n  },\n\n  /**\n   * Unresolve type\n   *\n   * @param type\n   */\n  unresolveType: function (type) {\n    var libs = this.geppettoModel.getLibraries();\n    var typePath = type.getPath();\n    // swap the type with type.overrideType if any is found\n    if (type.overrideType != undefined) {\n      // get all types in the current model\n      var typeToLibraryMap = [];\n      var allTypesInModel = [];\n      for (var w = 0; w < libs.length; w++) {\n        allTypesInModel = allTypesInModel.concat(libs[w].getTypes());\n        for (var v = 0; v < libs[w].getTypes().length; v++) {\n          typeToLibraryMap[libs[w].getTypes()[v].getPath()] = libs[w];\n        }\n      }\n\n      // fetch variables pointing to the old version of the type\n      var variablesToUpdate = type.getVariableReferences();\n\n      // swap type reference in ALL variables that point to it\n      for (var x = 0; x < variablesToUpdate.length; x++) {\n        this.swapTypeInVariable(variablesToUpdate[x], type, type.overrideType);\n      }\n\n      // find type in library (we need the index)\n      for (var m = 0; m < typeToLibraryMap[typePath].getTypes().length; m++) {\n        if (type.getPath() == typeToLibraryMap[typePath].getTypes()[m].getPath()) {\n          // swap type in raw model\n          typeToLibraryMap[typePath].getWrappedObj().types[m] = type.overrideType.getWrappedObj();\n\n          // swap in object model (this line is probably redundant as the parent hasn't changed)\n          type.overrideType.parent = typeToLibraryMap[typePath];\n          typeToLibraryMap[typePath].getTypes()[m] = type.overrideType;\n        }\n      }\n\n      // populate references for the swapped type\n      this.populateTypeReferences(type.overrideType);\n\n      // add potential instance paths\n      this.addPotentialInstancePaths(variablesToUpdate);\n\n      // update capabilities for variables and instances if any\n      this.updateCapabilities(variablesToUpdate);\n    }\n  },\n\n  /**\n   * A generic method to resolve a reference\n   */\n  resolve: function (refStr) {\n\n    var reference = undefined;\n    /*\n     * Examples of reference strings\n     * //@libraries.0/@types.20/@variables.5/@anonymousTypes.0/@variables.7\n     * //@libraries.1/@types.5\n     * //@tags.1/@tags.5\n     * //@libraries.0/@types.8/@visualGroups.0/@visualGroupElements.1\n     */\n    var raw = refStr.replace(\"geppettoModel#\", \"\");\n\n    raw = raw.replace(/\\//g, '').split('@');\n    for (var i = 0; i < raw.length; i++) {\n      var index = parseInt(raw[i].split('.')[1]);\n      if (raw[i].indexOf('libraries') > -1) {\n        reference = this.geppettoModel.getLibraries()[index];\n      } else if (raw[i].indexOf('variables') > -1) {\n        if (reference == undefined) {\n          reference = this.geppettoModel.getVariables()[index];\n        } else {\n          reference = reference.getVariables()[index];\n        }\n      } else if (raw[i].indexOf('types') > -1) {\n        reference = reference.getTypes()[index];\n      } else if (raw[i].indexOf('anonymousTypes') > -1) {\n        reference = reference.getAnonymousTypes()[index];\n      } else if (raw[i].indexOf('tags') > -1 && i === 1) {\n        reference = this.rawGeppetoModel.tags && this.rawGeppetoModel.tags.length >= index ? this.rawGeppetoModel.tags[index] : this.geppettoModel.tags[index];\n      } else if (raw[i].indexOf('tags') > -1 && i === 2) {\n        reference = reference.tags[index];\n      } else if (raw[i].indexOf('visualGroups') > -1) {\n        reference = reference.getVisualGroups()[index];\n      } else if (raw[i].indexOf('visualGroupElements') > -1) {\n        reference = reference.getVisualGroupElements()[index];\n      } else if (raw[i].indexOf('worlds') > -1) {\n        reference = this.geppettoModel.getWorlds()[index];\n      } else if (raw[i].indexOf('instances') > -1) {           \n        reference = reference.getInstances()[index];\n      } \n    }\n    if (!reference) {\n      console.error(`Error resolving reference ${refStr}`);\n    }\n    return reference;\n  },\n\n\n  getVariables: function (rawGeppettoModel) {\n    if (!rawGeppettoModel.worlds || !rawGeppettoModel.worlds.length) {\n      return rawGeppettoModel.variables;\n    }\n    const world = rawGeppettoModel.worlds[0]; // TODO handle multiple worlds\n    return world.variables;\n  },\n\n  fillWorldsFromRawModel: function (geppettoModel, jsonModel) {\n    geppettoModel.worlds = jsonModel.worlds.map(world => this.createWorld(world));\n  },\n\n  _getStaticInstancePaths: function (geppettoModel) {\n\n    if (geppettoModel.getCurrentWorld === undefined) {\n      if (!geppettoModel.worlds || !geppettoModel.worlds.length) {\n        return [];\n      }\n      const rawModel = geppettoModel;\n      geppettoModel = new GeppettoModel({ wrappedObj: rawModel });\n      this.fillWorldsFromRawModel(geppettoModel, rawModel);\n    }\n    return geppettoModel.getCurrentWorld().getInstances().map(createInstancePathObj);\n  }\n};\n\nexport default ModelFactory;\n\n\nfunction createInstancePathObj (instance) {\n  return {\n    path: instance.getPath(),\n    metaType: instance.getType().getMetaType(),\n    type: instance.getType().getPath(),\n    static: true\n  };\n}\n"],"mappings":"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"}