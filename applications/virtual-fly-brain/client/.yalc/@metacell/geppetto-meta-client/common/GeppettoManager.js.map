{"version":3,"file":"GeppettoManager.js","names":["Manager","Instances","augmentInstancesArray","project","persisted","window","Project","readOnly","model","ModelManager","loadModel","EventManager","modelLoaded","instancesCreated","console","timeEnd","Resources","LOADING_PROJECT","Model","variableIds","datasourceId","callback","Object","prototype","hasOwnProperty","call","params","getId","requestID","MessageSocket","send","actionsHandler","clientActions","SPIN_LOGO","log","VARIABLE_ALREADY_EXISTS","instanceIds","worldId","rawModel","time","ADDING_VARIABLE","newInstances","addVariableToModel","INSTANCES_CREATED","VARIABLE_ADDED","typePaths","paths","i","length","push","replace","MODEL_PREFIX_CLIENT","IMPORT_TYPE_RESOLVED","diffReport","ModelFactory","mergeModel","createInstancesFromDiffReport","typePath","mergeValue","IMPORT_VALUE_RESOLVED"],"sources":["../../src/common/GeppettoManager.js"],"sourcesContent":["/**\n * Client class use to handle Geppetto workflows\n *\n * @module Manager\n * @author Matteo Cantarelli\n */\n\nimport EventManager from './EventManager';\nimport MessageSocket from '../communication/MessageSocket';\nimport ModelFactory from '@metacell/geppetto-meta-core/ModelFactory';\nimport Resources from '@metacell/geppetto-meta-core/Resources';\nimport Instances from '@metacell/geppetto-meta-core/Instances';\nimport ModelManager from '@metacell/geppetto-meta-core/ModelManager';\n\nexport class Manager {\n\n\n  /**\n   *\n   * @param payload\n   */\n  loadProject (project, persisted) {\n    // we remove anything from any previous loaded project if there was one\n    window.Project = project;\n    window.Project.readOnly = !persisted;\n  }\n\n  /**\n   *\n   * @param payload\n   */\n  loadModel (model) {\n    ModelManager.loadModel(model);\n    EventManager.modelLoaded();\n\n    // populate control panel with instances\n    EventManager.instancesCreated(window.Instances);\n\n    console.timeEnd(Resources.LOADING_PROJECT);\n    return window.Model;\n  }\n\n  /**\n   * Fetch variable\n   *\n   * @param variableId\n   * @param datasourceId\n   */\n  fetchVariables (variableIds, datasourceId, callback) {\n    if (!Object.prototype.hasOwnProperty.call(window.Model, variableIds)) {\n      var params = {};\n      params[\"projectId\"] = Project.getId();\n      params[\"variableId\"] = variableIds;\n      params[\"dataSourceId\"] = datasourceId;\n\n      var requestID = MessageSocket.send(\"fetch_variable\", params, callback);\n\n      EventManager.actionsHandler[EventManager.clientActions.SPIN_LOGO]();\n\n    } else {\n      console.log(Resources.VARIABLE_ALREADY_EXISTS);\n      // the variable already exists, run the callback\n      callback();\n    }\n  }\n\n  /**\n   * Fetch variables and instances\n   *\n   * @param variables\n   * @param instances\n   * @param worldId\n   * @param datasourceId\n   */\n  fetch (variableIds, instanceIds, worldId, datasourceId, callback) {\n    var params = {};\n    params[\"projectId\"] = Project.getId();\n    params[\"variables\"] = variableIds;\n    params[\"instances\"] = instanceIds;\n    params[\"worldId\"] = worldId;\n    params[\"dataSourceId\"] = datasourceId;\n\n    var requestID = MessageSocket.send(\"fetch\", params, callback);\n\n    EventManager.actionsHandler[EventManager.clientActions.SPIN_LOGO]();\n  }\n\n  /**\n   * Adds fetched variable to model\n   *\n   * @param rawModel\n   */\n  addVariableToModel (rawModel) {\n    console.time(Resources.ADDING_VARIABLE);\n    const newInstances = ModelManager.addVariableToModel(rawModel);\n    EventManager.actionsHandler[EventManager.clientActions.INSTANCES_CREATED](newInstances);\n    console.timeEnd(Resources.ADDING_VARIABLE);\n    console.log(Resources.VARIABLE_ADDED);\n  }\n\n  /**\n   * Resolve import type\n   *\n   * @param typePath\n   */\n  resolveImportType (typePaths, callback) {\n    if (typeof typePaths == \"string\") {\n      typePaths = [typePaths];\n    }\n    var params = {};\n    params[\"projectId\"] = Project.getId();\n    // replace client naming first occurrence - the server doesn't know about it\n    var paths = [];\n    for (var i = 0; i < typePaths.length; i++) {\n      paths.push(typePaths[i].replace(Resources.MODEL_PREFIX_CLIENT + \".\", ''));\n    }\n    params[\"paths\"] = paths;\n\n    var requestID = MessageSocket.send(\"resolve_import_type\", params, callback);\n\n    EventManager.actionsHandler[EventManager.clientActions.SPIN_LOGO]();\n  }\n\n  /**\n   * Swap resolved import type with actual type\n   *\n   * @param rawModel\n   */\n  swapResolvedType (rawModel) {\n    console.time(Resources.IMPORT_TYPE_RESOLVED);\n            \n    // STEP 1: merge model - expect a fully formed Geppetto model to be merged into current one\n    var diffReport = ModelFactory.mergeModel(rawModel, true);\n    // STEP 2: add new instances for new types if any\n    var newInstances = ModelFactory.createInstancesFromDiffReport(diffReport);\n    // STEP: 3 update components\n    EventManager.actionsHandler[EventManager.clientActions.INSTANCES_CREATED](newInstances);\n\n    console.timeEnd(Resources.IMPORT_TYPE_RESOLVED);\n    console.log(Resources.IMPORT_TYPE_RESOLVED);\n  }\n\n  /**\n   *\n   * @param typePath\n   * @param callback\n   */\n  resolveImportValue (typePath, callback) {\n    var params = {};\n    params[\"projectId\"] = Project.getId();\n    // replace client naming first occurrence - the server doesn't know about it\n    params[\"path\"] = typePath.replace(Resources.MODEL_PREFIX_CLIENT + \".\", '');\n\n    var requestID = MessageSocket.send(\"resolve_import_value\", params, callback);\n\n    EventManager.actionsHandler[EventManager.clientActions.SPIN_LOGO]();\n  }\n\n  /**\n   * Swap resolved import value with actual type\n   *\n   * @param rawModel\n   */\n  swapResolvedValue (rawModel) {\n            \n    // STEP 1: merge model - expect a fully formed Geppetto model to be merged into current one\n    var diffReport = ModelFactory.mergeValue(rawModel, true);\n    console.log(Resources.IMPORT_VALUE_RESOLVED);\n  }\n\n  /**\n   * Augments the instances array with some utilities methods for ease of access\n   */\n  augmentInstancesArray = Instances.augmentInstancesArray\n}\n\n\nexport default new Manager();\n"],"mappings":"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"}