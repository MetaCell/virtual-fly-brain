{"version":3,"file":"PointerElement.js","names":["PointerElement","options","wrappedObj","variable","type","index","prototype","constructor","getVariable","getType","getWrappedObj","getIndex","getPath","types","undefined","path","element","resolvedVar","resolvedType","getId","module","exports"],"sources":["../../src/model/PointerElement.js"],"sourcesContent":["\n\n/**\n * Client class use to represent a pointer element.\n *\n * @module model/PointerElement\n * @author Giovanni Idili\n * @author Matteo Cantarelli\n */\n\n\nfunction PointerElement (options) {\n\n  this.wrappedObj = options.wrappedObj;\n  this.variable = options.variable;\n  this.type = options.type;\n  this.index = options.index;\n}\n\nPointerElement.prototype = {\n\n  constructor: PointerElement,\n\n  /**\n   * Gets the variable\n   *\n   * @command PointerElement.getVariable()\n   *\n   * @returns {Variable} - variable\n   *\n   */\n  getVariable: function () {\n    return this.variable;\n  }\n\n  ,\n\n  /**\n   * Gets the type\n   *\n   * @command PointerElement.getType()\n   *\n   * @returns {Type} - type\n   *\n   */\n  getType: function () {\n    return this.type;\n  }\n  ,\n\n  /**\n   * Get the wrapped obj\n   *\n   * @command Node.getWrappedObj()\n   * @returns {Object} - Wrapped object\n   */\n  getWrappedObj: function () {\n    return this.wrappedObj;\n  }\n  ,\n\n  /**\n   * Gets the index if it's pointing to an array element\n   *\n   * @command PointerElement.getIndex()\n   *\n   * @returns {Integer} - index in a given array\n   *\n   */\n  getIndex: function () {\n    return this.index;\n  }\n  ,\n\n  /**\n   * Get the path for this pointer element\n   *\n   * @command PointerElement.getPath()\n   *\n   * @returns {String} - path\n   */\n  getPath: function (types) {\n    if (types === undefined) {\n      types = false;\n    }\n\n    var path = '';\n\n    var element = this;\n    var resolvedVar = element.getVariable();\n    var resolvedType = element.getType();\n    path += resolvedVar.getId();\n    if (types) {\n      path += \"(\" + resolvedType.getId() + \")\";\n    }\n    if (element.getIndex() > -1) {\n      path += \"[\" + element.getIndex() + \"]\";\n    }\n\n    return path;\n  }\n};\n\n// Compatibility with new imports and old require syntax\nPointerElement.default = PointerElement;\nmodule.exports = PointerElement;\n"],"mappings":";;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASA,cAAc,CAAEC,OAAO,EAAE;EAEhC,IAAI,CAACC,UAAU,GAAGD,OAAO,CAACC,UAAU;EACpC,IAAI,CAACC,QAAQ,GAAGF,OAAO,CAACE,QAAQ;EAChC,IAAI,CAACC,IAAI,GAAGH,OAAO,CAACG,IAAI;EACxB,IAAI,CAACC,KAAK,GAAGJ,OAAO,CAACI,KAAK;AAC5B;AAEAL,cAAc,CAACM,SAAS,GAAG;EAEzBC,WAAW,EAAEP,cAAc;EAE3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEQ,WAAW,EAAE,uBAAY;IACvB,OAAO,IAAI,CAACL,QAAQ;EACtB,CAAC;EAID;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEM,OAAO,EAAE,mBAAY;IACnB,OAAO,IAAI,CAACL,IAAI;EAClB,CAAC;EAGD;AACF;AACA;AACA;AACA;AACA;EACEM,aAAa,EAAE,yBAAY;IACzB,OAAO,IAAI,CAACR,UAAU;EACxB,CAAC;EAGD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACES,QAAQ,EAAE,oBAAY;IACpB,OAAO,IAAI,CAACN,KAAK;EACnB,CAAC;EAGD;AACF;AACA;AACA;AACA;AACA;AACA;EACEO,OAAO,EAAE,iBAAUC,KAAK,EAAE;IACxB,IAAIA,KAAK,KAAKC,SAAS,EAAE;MACvBD,KAAK,GAAG,KAAK;IACf;IAEA,IAAIE,IAAI,GAAG,EAAE;IAEb,IAAIC,OAAO,GAAG,IAAI;IAClB,IAAIC,WAAW,GAAGD,OAAO,CAACR,WAAW,EAAE;IACvC,IAAIU,YAAY,GAAGF,OAAO,CAACP,OAAO,EAAE;IACpCM,IAAI,IAAIE,WAAW,CAACE,KAAK,EAAE;IAC3B,IAAIN,KAAK,EAAE;MACTE,IAAI,IAAI,GAAG,GAAGG,YAAY,CAACC,KAAK,EAAE,GAAG,GAAG;IAC1C;IACA,IAAIH,OAAO,CAACL,QAAQ,EAAE,GAAG,CAAC,CAAC,EAAE;MAC3BI,IAAI,IAAI,GAAG,GAAGC,OAAO,CAACL,QAAQ,EAAE,GAAG,GAAG;IACxC;IAEA,OAAOI,IAAI;EACb;AACF,CAAC;;AAED;AACAf,cAAc,WAAQ,GAAGA,cAAc;AACvCoB,MAAM,CAACC,OAAO,GAAGrB,cAAc"}