{"version":3,"file":"ConnectivityPlot.js","names":["_react","_interopRequireWildcard","require","util","_Instance","_interopRequireDefault","_core","_IconText","_Grid","_Typography","_ConnectivityTooltip","obj","__esModule","_getRequireWildcardCache","e","WeakMap","r","t","_typeof","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","l","Symbol","iterator","f","o","next","done","push","value","length","Array","isArray","_createForOfIteratorHelper","allowArrayLike","it","F","s","_e","normalCompletion","didErr","err","step","_e2","minLen","_arrayLikeToArray","prototype","toString","slice","constructor","name","from","test","len","arr2","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","_toPropertyKey","key","_createClass","protoProps","staticProps","_toPrimitive","toPrimitive","String","Number","_callSuper","_getPrototypeOf","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","apply","self","_assertThisInitialized","ReferenceError","Boolean","valueOf","setPrototypeOf","getPrototypeOf","bind","_inherits","subClass","superClass","create","_setPrototypeOf","p","d3","styles","theme","legends","marginTop","spacing","marginLeft","legendTitle","fontSize","color","ConnectivityPlot","_Component","_this","height","size","width","linkCache","defaultOptions","nodeType","node","Instance","getParent","getId","getPath","split","linkWeight","conn","linkType","library","modelFactory","geppettoModel","common","setNodeColormap","colorMap","subRef","React","createRef","tooltipRef","shouldComponentUpdate","nextProps","nextState","nextContext","toolbarVisibility","componentDidMount","setOptions","setData","data","draw","forceUpdate","componentDidUpdate","prevProps","prevState","snapshot","options","layout","dataset","mapping","mappingSize","nodeColormap","defaultColorMapFunction","domain","names","range","colors","scaleOrdinal","createDataFromConnections","drawLayout","connectionVariables","getAllTypesOfType","connection","getVariableReferences","getMetaType","resources","INSTANCE_NODE","subInstances","getChildren","k","subInstance","ARRAY_INSTANCE_NODE","populationChildren","populationChild","createNode","x","connectionVariable","source","getA","getB","sourceId","getElements","targetId","createLink","nodeTypes","uniq","pluck","nodes","sort","linkTypes","links","calculateNodeDegrees","normalize","indegrees","countBy","link","outdegrees","maxDeg","forEach","idx","idg","odg","degree","id","type","nodeItem","weight","linkItem","cleanCanvas","svg","select","append","attr","remove","render","_this$props","classes","legendsVisibility","layoutLegends","getLegends","_iterator","_step","title","createElement","className","variant","gutterBottom","colorScale","_iterator2","entries","_step2","_step2$value","v","icon","subtitle","plot","item","sm","xs","ref","show","container","map","entry","Component","_default","exports","withStyles"],"sources":["../../../src/connectivity-viewer/subcomponents/ConnectivityPlot.js"],"sourcesContent":["import React, { Component } from 'react';\nimport * as util from '../../utilities';\nimport Instance from '@metacell/geppetto-meta-core/model/Instance';\nimport { withStyles } from '@material-ui/core';\nimport IconText from './IconText';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport ConnectivityTooltip from './ConnectivityTooltip';\nconst d3 = require('d3');\n\nconst styles = theme => ({\n  legends: {\n    marginTop: theme.spacing(4),\n    marginLeft: theme.spacing(1),\n  },\n  legendTitle: {\n    fontSize: '14px',\n    color: 'white',\n  },\n});\n\nclass ConnectivityPlot extends Component {\n  constructor (props) {\n    super(props);\n    this.height = this.props.size.height;\n    this.width = this.props.size.width;\n    this.linkCache = {};\n\n    this.defaultOptions = {\n      nodeType: function (node) {\n        if (node instanceof Instance) {\n          return node.getParent().getId();\n        } else {\n          return node.getPath().split('_')[0];\n        }\n      },\n      linkWeight: function (conn) {\n        return 1;\n      },\n      linkType: function (conn) {\n        return 1;\n      },\n      library: this.props.modelFactory.geppettoModel.common,\n    };\n\n    this.setNodeColormap(this.props.colorMap);\n    this.subRef = React.createRef();\n    this.tooltipRef = React.createRef();\n  }\n\n  shouldComponentUpdate (nextProps, nextState, nextContext) {\n    return this.props.toolbarVisibility === nextProps.toolbarVisibility;\n  }\n\n  componentDidMount () {\n    this.setOptions();\n    this.setData(this.props.data);\n    this.setNodeColormap(this.props.colorMap);\n    this.draw();\n    this.forceUpdate();\n  }\n\n  componentDidUpdate (prevProps, prevState, snapshot) {\n    if (\n      prevProps.options !== this.props.options\n      || prevProps.layout !== this.props.layout\n      || this.options === null\n    ) {\n      this.setOptions();\n    }\n    this.setData(this.props.data);\n    this.setNodeColormap(this.props.colorMap);\n    this.draw();\n  }\n\n  /**\n   *\n   * Sets connectivity auxiliary functions\n   *\n   * @command setOptions()\n   */\n\n  setOptions () {\n    this.options = this.defaultOptions;\n    if (this.props.linkType != null) {\n      this.options.linkType = this.props.linkType;\n    }\n    if (this.props.nodeType != null) {\n      this.options.nodeType = this.props.nodeType;\n    }\n    if (this.props.linkWeight != null) {\n      this.options.linkWeight = this.props.linkWeight;\n    }\n    if (this.props.library != null) {\n      this.options.library = this.props.library;\n    }\n  }\n\n  /**\n   *\n   * Creates dataset with provided data\n   *\n   * @command setData(data)\n   *\n   * @param data\n   */\n  setData (data) {\n    this.dataset = {};\n    this.mapping = {};\n    this.mappingSize = 0;\n    this.dataset['root'] = data;\n  }\n\n  /**\n   *\n   * Sets nodeColormap\n   *\n   * @command setNodeColormap(nodeColormap)\n   *\n   * @param nodeColormap\n   */\n  setNodeColormap (nodeColormap) {\n    if (nodeColormap != null) {\n      this.nodeColormap = nodeColormap;\n    } else {\n      this.nodeColormap = this.defaultColorMapFunction();\n    }\n  }\n\n  /**\n   *\n   * Returns default colorScale\n   *\n   * @command defaultColorMapFunction()\n   *\n   */\n  defaultColorMapFunction () {\n    const domain = this.props.names;\n    const range = this.props.colors;\n    return d3.scaleOrdinal(range).domain(domain);\n  }\n\n  /**\n   *\n   * Creates connections and draws layout\n   *\n   * @command draw()\n   *\n   */\n  draw () {\n    if (this.createDataFromConnections()) {\n      this.drawLayout();\n    }\n  }\n\n  /**\n   *\n   * Creates data from connections\n   *\n   * @command createDataFromConnections()\n   */\n  createDataFromConnections () {\n    const connectionVariables = this.props.modelFactory\n      .getAllTypesOfType(this.options.library.connection)[0]\n      .getVariableReferences();\n    if (connectionVariables.length > 0) {\n      if (\n        this.dataset['root'].getMetaType()\n        === this.props.resources.INSTANCE_NODE\n      ) {\n        const subInstances = this.dataset['root'].getChildren();\n        this.dataset['nodes'] = [];\n        this.dataset['links'] = [];\n        for (let k = 0; k < subInstances.length; k++) {\n          const subInstance = subInstances[k];\n          if (\n            subInstance.getMetaType()\n            === this.props.resources.ARRAY_INSTANCE_NODE\n          ) {\n            const populationChildren = subInstance.getChildren();\n            for (let l = 0; l < populationChildren.length; l++) {\n              const populationChild = populationChildren[l];\n              this.createNode(\n                populationChild.getId(),\n                this.options.nodeType(populationChild)\n              );\n            }\n          }\n        }\n        for (let x = 0; x < connectionVariables.length; x++) {\n          const connectionVariable = connectionVariables[x];\n          const source = connectionVariable.getA();\n          const target = connectionVariable.getB();\n          const sourceId = source\n            .getElements()[source.getElements().length - 1].getPath();\n          const targetId = target\n            .getElements()[source.getElements().length - 1].getPath();\n          this.createLink(\n            sourceId,\n            targetId,\n            this.options.linkType.bind(this)(\n              connectionVariable,\n              this.linkCache\n            ),\n            this.options.linkWeight(connectionVariable)\n          );\n        }\n      }\n      this.dataset.nodeTypes = util\n        .uniq(util.pluck(this.dataset.nodes, 'type'))\n        .sort();\n      this.dataset.linkTypes = util\n        .uniq(util.pluck(this.dataset.links, 'type'))\n        .sort();\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   *\n   * Prepocesses node degrees\n   *\n   * @command calculateNodeDegrees(normalize)\n   * @param normalize\n   */\n  calculateNodeDegrees (normalize) {\n    const indegrees = util.countBy(this.dataset.links, function (link) {\n      return link.source;\n    });\n\n    const outdegrees = util.countBy(this.dataset.links, function (link) {\n      return link.target;\n    });\n    let maxDeg = 1;\n    this.dataset.nodes.forEach(function (node, idx) {\n      const idg = typeof indegrees[idx] === 'undefined' ? 0 : indegrees[idx];\n      const odg = typeof outdegrees[idx] === 'undefined' ? 0 : outdegrees[idx];\n      node.degree = idg + odg;\n      if (node.degree > maxDeg) {\n        maxDeg = node.degree;\n      }\n    });\n    if (normalize) {\n      this.dataset.nodes.forEach(function (node) {\n        node.degree /= maxDeg;\n      });\n    }\n  }\n\n  /**\n   *\n   * Creates node\n   *\n   * @command createNode(id, type)\n   *\n   * @param id\n   * @param type\n   */\n  createNode (id, type) {\n    if (!(id in this.mapping)) {\n      const nodeItem = {\n        id: id,\n        type: type,\n      };\n      this.dataset['nodes'].push(nodeItem);\n      this.mapping[nodeItem['id']] = this.mappingSize;\n      this.mappingSize++;\n    }\n  }\n\n  /**\n   *\n   * Creates link\n   *\n   * @command createLink(sourceId, targetId, type, weight)\n   *\n   * @param sourceId\n   * @param targetId\n   * @param type\n   * @param weight\n   */\n  createLink (sourceId, targetId, type, weight) {\n    const linkItem = {\n      source: this.mapping[sourceId],\n      target: this.mapping[targetId],\n      type: type,\n      weight: weight,\n    };\n    this.dataset['links'].push(linkItem);\n  }\n\n  /**\n   *\n   * Draws the layout\n   *\n   * @command drawLayout()\n   *\n   */\n  drawLayout () {\n    this.width = this.props.size.width;\n    this.height = this.props.size.height;\n    this.cleanCanvas();\n    this.svg = d3\n      .select('#' + this.props.id)\n      .append('svg')\n      .attr('width', this.width)\n      .attr('height', this.height);\n    this.props.layout.draw(this);\n  }\n\n  /**\n   *\n   * Cleans the canvas\n   *\n   * @command cleanCanvas()\n   *\n   */\n\n  cleanCanvas () {\n    if (this.svg) {\n      this.svg.remove();\n    }\n  }\n\n  render () {\n    const { id, classes, legendsVisibility, layout } = this.props;\n\n    let legends = [];\n    if (layout && this.nodeColormap && this.dataset) {\n      const layoutLegends = layout.getLegends(this);\n      for (const obj of layoutLegends) {\n        if (obj.title) {\n          legends.push(\n            <Typography\n              key={obj.title}\n              className={classes.legendTitle}\n              variant=\"h6\"\n              gutterBottom\n            >\n              {obj.title}\n            </Typography>\n          );\n        }\n        let domain = obj.colorScale.domain().slice().sort();\n        for (const [i, v] of domain.entries()) {\n          legends.push(\n            <IconText\n              key={v}\n              icon=\"fa fa-square-full legend-item\"\n              color={obj.colorScale(i)}\n              subtitle={v}\n              width={'20px'}\n              height={'20px'}\n            />\n          );\n        }\n      }\n    }\n    let plot = (\n      <Grid item sm={9} xs={12}>\n        <ConnectivityTooltip ref={this.tooltipRef} layout={layout} />\n        <div id={id} />\n      </Grid>\n    );\n\n    let show;\n    if (legends.length === 0 || !legendsVisibility) {\n      show = <Grid container>{plot}</Grid>;\n    } else {\n      show = (\n        <Grid container>\n          <Grid item sm xs>\n            <div ref={this.subRef}>\n              {legendsVisibility ? legends.map(entry => entry) : ''}\n            </div>\n          </Grid>\n          {plot}\n        </Grid>\n      );\n    }\n    return show;\n  }\n}\n\nexport default withStyles(styles)(ConnectivityPlot);\n"],"mappings":"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","ignoreList":[]}