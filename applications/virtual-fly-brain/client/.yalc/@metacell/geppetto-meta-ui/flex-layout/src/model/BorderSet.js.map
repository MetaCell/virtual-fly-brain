{"version":3,"file":"BorderSet.js","names":["_Orientation","_interopRequireDefault","require","_BorderNode","obj","__esModule","_typeof","o","Symbol","iterator","constructor","prototype","_createForOfIteratorHelper","allowArrayLike","it","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","minLen","_arrayLikeToArray","Object","toString","slice","name","from","test","arr","len","arr2","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","_defineProperty","t","_toPrimitive","r","toPrimitive","String","Number","BorderSet","model","_model","_borders","getBorders","_forEachNode","fn","forEach","borderNode","getChildren","node","_toJson","map","_layoutBorder","outerInnerRects","metrics","rect","outer","height","width","sumHeight","sumWidth","adjustableHeight","adjustableWidth","showingBorders","filter","border","isShowing","_iterator","_step","_setAdjustedSize","getSize","visible","getSelected","getLocation","getOrientation","Orientation","HORZ","getBorderBarSize","getSplitterSize","j","size","_getAdjustedSize","VERT","_layoutBorderOuter","inner","_layoutBorderInner","_findDropTargetNode","dragNode","x","y","_iterator2","_step2","dropInfo","canDrop","undefined","_fromJson","json","borderSet","borderJson","BorderNode","_default","exports"],"sources":["../../../../src/flex-layout/src/model/BorderSet.ts"],"sourcesContent":["import DropInfo from \"../DropInfo\";\nimport Orientation from \"../Orientation\";\nimport Rect from \"../Rect\";\nimport BorderNode from \"./BorderNode\";\nimport IDraggable from \"./IDraggable\";\nimport Model, { ILayoutMetrics } from \"./Model\";\nimport Node from \"./Node\";\n\nclass BorderSet {\n    /** @hidden @internal */\n    static _fromJson(json: any, model: Model) {\n        const borderSet = new BorderSet(model);\n        borderSet._borders = json.map((borderJson: any) => BorderNode._fromJson(borderJson, model));\n        return borderSet;\n    }\n    /** @hidden @internal */\n    private _model: Model;\n    /** @hidden @internal */\n    private _borders: BorderNode[];\n\n    /** @hidden @internal */\n    constructor(model: Model) {\n        this._model = model;\n        this._borders = [];\n    }\n\n    getBorders() {\n        return this._borders;\n    }\n\n    /** @hidden @internal */\n    _forEachNode(fn: (node: Node, level: number) => void) {\n        this._borders.forEach((borderNode) => {\n            fn(borderNode, 0);\n            borderNode.getChildren().forEach((node) => {\n                node._forEachNode(fn, 1);\n            });\n        });\n    }\n\n    /** @hidden @internal */\n    _toJson() {\n        return this._borders.map((borderNode) => borderNode._toJson());\n    }\n\n    /** @hidden @internal */\n    _layoutBorder(outerInnerRects: { inner: Rect; outer: Rect }, metrics: ILayoutMetrics) {\n        const rect = outerInnerRects.outer;\n        const height = rect.height;\n        const width = rect.width;\n        let sumHeight = 0;\n        let sumWidth = 0;\n        let adjustableHeight = 0;\n        let adjustableWidth = 0;\n\n        const showingBorders = this._borders.filter((border) => border.isShowing());\n\n        // sum size of borders to see they will fit\n        for (const border of showingBorders) {\n            if (border.isShowing()) {\n                border._setAdjustedSize(border.getSize());\n                const visible = border.getSelected() !== -1;\n                if (border.getLocation().getOrientation() === Orientation.HORZ) {\n                    sumWidth += border.getBorderBarSize() + this._model.getSplitterSize();\n                    if (visible) {\n                        sumWidth += border.getSize();\n                        adjustableWidth += border.getSize();\n                    }\n                } else {\n                    sumHeight += border.getBorderBarSize() + this._model.getSplitterSize();\n                    if (visible) {\n                        sumHeight += border.getSize();\n                        adjustableHeight += border.getSize();\n                    }\n                }\n            }\n        }\n\n        // adjust border sizes if too large\n        let j = 0;\n        while ((sumWidth > width && adjustableWidth > 0) || (sumHeight > height && adjustableHeight > 0)) {\n            const border = showingBorders[j];\n            if (border.getSelected() !== -1) {\n                // visible\n                const size = border._getAdjustedSize();\n                if (sumWidth > width && adjustableWidth > 0 && border.getLocation().getOrientation() === Orientation.HORZ && size > 0) {\n                    border._setAdjustedSize(size - 1);\n                    sumWidth--;\n                    adjustableWidth--;\n                } else if (sumHeight > height && adjustableHeight > 0 && border.getLocation().getOrientation() === Orientation.VERT && size > 0) {\n                    border._setAdjustedSize(size - 1);\n                    sumHeight--;\n                    adjustableHeight--;\n                }\n            }\n            j = (j + 1) % showingBorders.length;\n        }\n\n        showingBorders.forEach((border) => {\n            outerInnerRects.outer = border._layoutBorderOuter(outerInnerRects.outer, metrics);\n        });\n\n        outerInnerRects.inner = outerInnerRects.outer;\n\n        showingBorders.forEach((border) => {\n            outerInnerRects.inner = border._layoutBorderInner(outerInnerRects.inner, metrics);\n        });\n        return outerInnerRects;\n    }\n\n    /** @hidden @internal */\n    _findDropTargetNode(dragNode: Node & IDraggable, x: number, y: number): DropInfo | undefined {\n        for (const border of this._borders) {\n            if (border.isShowing()) {\n                const dropInfo = border.canDrop(dragNode, x, y);\n                if (dropInfo !== undefined) {\n                    return dropInfo;\n                }\n            }\n        }\n        return undefined;\n    }\n}\n\nexport default BorderSet;\n"],"mappings":";;;;;;AACA,IAAAA,YAAA,GAAAC,sBAAA,CAAAC,OAAA;AAEA,IAAAC,WAAA,GAAAF,sBAAA,CAAAC,OAAA;AAAsC,SAAAD,uBAAAG,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,gBAAAA,GAAA;AAAA,SAAAE,QAAAC,CAAA,sCAAAD,OAAA,wBAAAE,MAAA,uBAAAA,MAAA,CAAAC,QAAA,aAAAF,CAAA,kBAAAA,CAAA,gBAAAA,CAAA,WAAAA,CAAA,yBAAAC,MAAA,IAAAD,CAAA,CAAAG,WAAA,KAAAF,MAAA,IAAAD,CAAA,KAAAC,MAAA,CAAAG,SAAA,qBAAAJ,CAAA,KAAAD,OAAA,CAAAC,CAAA;AAAA,SAAAK,2BAAAL,CAAA,EAAAM,cAAA,QAAAC,EAAA,UAAAN,MAAA,oBAAAD,CAAA,CAAAC,MAAA,CAAAC,QAAA,KAAAF,CAAA,qBAAAO,EAAA,QAAAC,KAAA,CAAAC,OAAA,CAAAT,CAAA,MAAAO,EAAA,GAAAG,2BAAA,CAAAV,CAAA,MAAAM,cAAA,IAAAN,CAAA,WAAAA,CAAA,CAAAW,MAAA,qBAAAJ,EAAA,EAAAP,CAAA,GAAAO,EAAA,MAAAK,CAAA,UAAAC,CAAA,YAAAA,EAAA,eAAAC,CAAA,EAAAD,CAAA,EAAAE,CAAA,WAAAA,EAAA,QAAAH,CAAA,IAAAZ,CAAA,CAAAW,MAAA,WAAAK,IAAA,mBAAAA,IAAA,SAAAC,KAAA,EAAAjB,CAAA,CAAAY,CAAA,UAAAM,CAAA,WAAAA,EAAAC,EAAA,UAAAA,EAAA,KAAAC,CAAA,EAAAP,CAAA,gBAAAQ,SAAA,iJAAAC,gBAAA,SAAAC,MAAA,UAAAC,GAAA,WAAAV,CAAA,WAAAA,EAAA,IAAAP,EAAA,GAAAA,EAAA,CAAAkB,IAAA,CAAAzB,CAAA,MAAAe,CAAA,WAAAA,EAAA,QAAAW,IAAA,GAAAnB,EAAA,CAAAoB,IAAA,IAAAL,gBAAA,GAAAI,IAAA,CAAAV,IAAA,SAAAU,IAAA,KAAAR,CAAA,WAAAA,EAAAU,GAAA,IAAAL,MAAA,SAAAC,GAAA,GAAAI,GAAA,KAAAR,CAAA,WAAAA,EAAA,eAAAE,gBAAA,IAAAf,EAAA,oBAAAA,EAAA,8BAAAgB,MAAA,QAAAC,GAAA;AAAA,SAAAd,4BAAAV,CAAA,EAAA6B,MAAA,SAAA7B,CAAA,qBAAAA,CAAA,sBAAA8B,iBAAA,CAAA9B,CAAA,EAAA6B,MAAA,OAAAd,CAAA,GAAAgB,MAAA,CAAA3B,SAAA,CAAA4B,QAAA,CAAAP,IAAA,CAAAzB,CAAA,EAAAiC,KAAA,aAAAlB,CAAA,iBAAAf,CAAA,CAAAG,WAAA,EAAAY,CAAA,GAAAf,CAAA,CAAAG,WAAA,CAAA+B,IAAA,MAAAnB,CAAA,cAAAA,CAAA,mBAAAP,KAAA,CAAA2B,IAAA,CAAAnC,CAAA,OAAAe,CAAA,+DAAAqB,IAAA,CAAArB,CAAA,UAAAe,iBAAA,CAAA9B,CAAA,EAAA6B,MAAA;AAAA,SAAAC,kBAAAO,GAAA,EAAAC,GAAA,QAAAA,GAAA,YAAAA,GAAA,GAAAD,GAAA,CAAA1B,MAAA,EAAA2B,GAAA,GAAAD,GAAA,CAAA1B,MAAA,WAAAC,CAAA,MAAA2B,IAAA,OAAA/B,KAAA,CAAA8B,GAAA,GAAA1B,CAAA,GAAA0B,GAAA,EAAA1B,CAAA,IAAA2B,IAAA,CAAA3B,CAAA,IAAAyB,GAAA,CAAAzB,CAAA,UAAA2B,IAAA;AAAA,SAAAC,gBAAAC,QAAA,EAAAC,WAAA,UAAAD,QAAA,YAAAC,WAAA,eAAArB,SAAA;AAAA,SAAAsB,kBAAAC,MAAA,EAAAC,KAAA,aAAAjC,CAAA,MAAAA,CAAA,GAAAiC,KAAA,CAAAlC,MAAA,EAAAC,CAAA,UAAAkC,UAAA,GAAAD,KAAA,CAAAjC,CAAA,GAAAkC,UAAA,CAAAC,UAAA,GAAAD,UAAA,CAAAC,UAAA,WAAAD,UAAA,CAAAE,YAAA,wBAAAF,UAAA,EAAAA,UAAA,CAAAG,QAAA,SAAAlB,MAAA,CAAAmB,cAAA,CAAAN,MAAA,EAAAO,cAAA,CAAAL,UAAA,CAAAM,GAAA,GAAAN,UAAA;AAAA,SAAAO,aAAAX,WAAA,EAAAY,UAAA,EAAAC,WAAA,QAAAD,UAAA,EAAAX,iBAAA,CAAAD,WAAA,CAAAtC,SAAA,EAAAkD,UAAA,OAAAC,WAAA,EAAAZ,iBAAA,CAAAD,WAAA,EAAAa,WAAA,GAAAxB,MAAA,CAAAmB,cAAA,CAAAR,WAAA,iBAAAO,QAAA,mBAAAP,WAAA;AAAA,SAAAc,gBAAA3D,GAAA,EAAAuD,GAAA,EAAAnC,KAAA,IAAAmC,GAAA,GAAAD,cAAA,CAAAC,GAAA,OAAAA,GAAA,IAAAvD,GAAA,IAAAkC,MAAA,CAAAmB,cAAA,CAAArD,GAAA,EAAAuD,GAAA,IAAAnC,KAAA,EAAAA,KAAA,EAAA8B,UAAA,QAAAC,YAAA,QAAAC,QAAA,oBAAApD,GAAA,CAAAuD,GAAA,IAAAnC,KAAA,WAAApB,GAAA;AAAA,SAAAsD,eAAAM,CAAA,QAAA7C,CAAA,GAAA8C,YAAA,CAAAD,CAAA,gCAAA1D,OAAA,CAAAa,CAAA,IAAAA,CAAA,GAAAA,CAAA;AAAA,SAAA8C,aAAAD,CAAA,EAAAE,CAAA,oBAAA5D,OAAA,CAAA0D,CAAA,MAAAA,CAAA,SAAAA,CAAA,MAAAvC,CAAA,GAAAuC,CAAA,CAAAxD,MAAA,CAAA2D,WAAA,kBAAA1C,CAAA,QAAAN,CAAA,GAAAM,CAAA,CAAAO,IAAA,CAAAgC,CAAA,EAAAE,CAAA,gCAAA5D,OAAA,CAAAa,CAAA,UAAAA,CAAA,YAAAS,SAAA,yEAAAsC,CAAA,GAAAE,MAAA,GAAAC,MAAA,EAAAL,CAAA;AAAA,IAKhCM,SAAS;EAYX;EACA,SAAAA,UAAYC,KAAY,EAAE;IAAAxB,eAAA,OAAAuB,SAAA;IAN1B;IAAAP,eAAA;IAEA;IAAAA,eAAA;IAKI,IAAI,CAACS,MAAM,GAAGD,KAAK;IACnB,IAAI,CAACE,QAAQ,GAAG,EAAE;EACtB;EAAC,OAAAb,YAAA,CAAAU,SAAA;IAAAX,GAAA;IAAAnC,KAAA,EAED,SAAAkD,WAAA,EAAa;MACT,OAAO,IAAI,CAACD,QAAQ;IACxB;;IAEA;EAAA;IAAAd,GAAA;IAAAnC,KAAA,EACA,SAAAmD,aAAaC,EAAuC,EAAE;MAClD,IAAI,CAACH,QAAQ,CAACI,OAAO,CAAC,UAACC,UAAU,EAAK;QAClCF,EAAE,CAACE,UAAU,EAAE,CAAC,CAAC;QACjBA,UAAU,CAACC,WAAW,CAAC,CAAC,CAACF,OAAO,CAAC,UAACG,IAAI,EAAK;UACvCA,IAAI,CAACL,YAAY,CAACC,EAAE,EAAE,CAAC,CAAC;QAC5B,CAAC,CAAC;MACN,CAAC,CAAC;IACN;;IAEA;EAAA;IAAAjB,GAAA;IAAAnC,KAAA,EACA,SAAAyD,QAAA,EAAU;MACN,OAAO,IAAI,CAACR,QAAQ,CAACS,GAAG,CAAC,UAACJ,UAAU;QAAA,OAAKA,UAAU,CAACG,OAAO,CAAC,CAAC;MAAA,EAAC;IAClE;;IAEA;EAAA;IAAAtB,GAAA;IAAAnC,KAAA,EACA,SAAA2D,cAAcC,eAA6C,EAAEC,OAAuB,EAAE;MAClF,IAAMC,IAAI,GAAGF,eAAe,CAACG,KAAK;MAClC,IAAMC,MAAM,GAAGF,IAAI,CAACE,MAAM;MAC1B,IAAMC,KAAK,GAAGH,IAAI,CAACG,KAAK;MACxB,IAAIC,SAAS,GAAG,CAAC;MACjB,IAAIC,QAAQ,GAAG,CAAC;MAChB,IAAIC,gBAAgB,GAAG,CAAC;MACxB,IAAIC,eAAe,GAAG,CAAC;MAEvB,IAAMC,cAAc,GAAG,IAAI,CAACrB,QAAQ,CAACsB,MAAM,CAAC,UAACC,MAAM;QAAA,OAAKA,MAAM,CAACC,SAAS,CAAC,CAAC;MAAA,EAAC;;MAE3E;MAAA,IAAAC,SAAA,GAAAtF,0BAAA,CACqBkF,cAAc;QAAAK,KAAA;MAAA;QAAnC,KAAAD,SAAA,CAAA7E,CAAA,MAAA8E,KAAA,GAAAD,SAAA,CAAA5E,CAAA,IAAAC,IAAA,GAAqC;UAAA,IAA1ByE,OAAM,GAAAG,KAAA,CAAA3E,KAAA;UACb,IAAIwE,OAAM,CAACC,SAAS,CAAC,CAAC,EAAE;YACpBD,OAAM,CAACI,gBAAgB,CAACJ,OAAM,CAACK,OAAO,CAAC,CAAC,CAAC;YACzC,IAAMC,OAAO,GAAGN,OAAM,CAACO,WAAW,CAAC,CAAC,KAAK,CAAC,CAAC;YAC3C,IAAIP,OAAM,CAACQ,WAAW,CAAC,CAAC,CAACC,cAAc,CAAC,CAAC,KAAKC,uBAAW,CAACC,IAAI,EAAE;cAC5DhB,QAAQ,IAAIK,OAAM,CAACY,gBAAgB,CAAC,CAAC,GAAG,IAAI,CAACpC,MAAM,CAACqC,eAAe,CAAC,CAAC;cACrE,IAAIP,OAAO,EAAE;gBACTX,QAAQ,IAAIK,OAAM,CAACK,OAAO,CAAC,CAAC;gBAC5BR,eAAe,IAAIG,OAAM,CAACK,OAAO,CAAC,CAAC;cACvC;YACJ,CAAC,MAAM;cACHX,SAAS,IAAIM,OAAM,CAACY,gBAAgB,CAAC,CAAC,GAAG,IAAI,CAACpC,MAAM,CAACqC,eAAe,CAAC,CAAC;cACtE,IAAIP,OAAO,EAAE;gBACTZ,SAAS,IAAIM,OAAM,CAACK,OAAO,CAAC,CAAC;gBAC7BT,gBAAgB,IAAII,OAAM,CAACK,OAAO,CAAC,CAAC;cACxC;YACJ;UACJ;QACJ;;QAEA;MAAA,SAAAtE,GAAA;QAAAmE,SAAA,CAAAzE,CAAA,CAAAM,GAAA;MAAA;QAAAmE,SAAA,CAAAvE,CAAA;MAAA;MACA,IAAImF,CAAC,GAAG,CAAC;MACT,OAAQnB,QAAQ,GAAGF,KAAK,IAAII,eAAe,GAAG,CAAC,IAAMH,SAAS,GAAGF,MAAM,IAAII,gBAAgB,GAAG,CAAE,EAAE;QAC9F,IAAMI,MAAM,GAAGF,cAAc,CAACgB,CAAC,CAAC;QAChC,IAAId,MAAM,CAACO,WAAW,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;UAC7B;UACA,IAAMQ,IAAI,GAAGf,MAAM,CAACgB,gBAAgB,CAAC,CAAC;UACtC,IAAIrB,QAAQ,GAAGF,KAAK,IAAII,eAAe,GAAG,CAAC,IAAIG,MAAM,CAACQ,WAAW,CAAC,CAAC,CAACC,cAAc,CAAC,CAAC,KAAKC,uBAAW,CAACC,IAAI,IAAII,IAAI,GAAG,CAAC,EAAE;YACnHf,MAAM,CAACI,gBAAgB,CAACW,IAAI,GAAG,CAAC,CAAC;YACjCpB,QAAQ,EAAE;YACVE,eAAe,EAAE;UACrB,CAAC,MAAM,IAAIH,SAAS,GAAGF,MAAM,IAAII,gBAAgB,GAAG,CAAC,IAAII,MAAM,CAACQ,WAAW,CAAC,CAAC,CAACC,cAAc,CAAC,CAAC,KAAKC,uBAAW,CAACO,IAAI,IAAIF,IAAI,GAAG,CAAC,EAAE;YAC7Hf,MAAM,CAACI,gBAAgB,CAACW,IAAI,GAAG,CAAC,CAAC;YACjCrB,SAAS,EAAE;YACXE,gBAAgB,EAAE;UACtB;QACJ;QACAkB,CAAC,GAAG,CAACA,CAAC,GAAG,CAAC,IAAIhB,cAAc,CAAC5E,MAAM;MACvC;MAEA4E,cAAc,CAACjB,OAAO,CAAC,UAACmB,MAAM,EAAK;QAC/BZ,eAAe,CAACG,KAAK,GAAGS,MAAM,CAACkB,kBAAkB,CAAC9B,eAAe,CAACG,KAAK,EAAEF,OAAO,CAAC;MACrF,CAAC,CAAC;MAEFD,eAAe,CAAC+B,KAAK,GAAG/B,eAAe,CAACG,KAAK;MAE7CO,cAAc,CAACjB,OAAO,CAAC,UAACmB,MAAM,EAAK;QAC/BZ,eAAe,CAAC+B,KAAK,GAAGnB,MAAM,CAACoB,kBAAkB,CAAChC,eAAe,CAAC+B,KAAK,EAAE9B,OAAO,CAAC;MACrF,CAAC,CAAC;MACF,OAAOD,eAAe;IAC1B;;IAEA;EAAA;IAAAzB,GAAA;IAAAnC,KAAA,EACA,SAAA6F,oBAAoBC,QAA2B,EAAEC,CAAS,EAAEC,CAAS,EAAwB;MAAA,IAAAC,UAAA,GAAA7G,0BAAA,CACpE,IAAI,CAAC6D,QAAQ;QAAAiD,MAAA;MAAA;QAAlC,KAAAD,UAAA,CAAApG,CAAA,MAAAqG,MAAA,GAAAD,UAAA,CAAAnG,CAAA,IAAAC,IAAA,GAAoC;UAAA,IAAzByE,MAAM,GAAA0B,MAAA,CAAAlG,KAAA;UACb,IAAIwE,MAAM,CAACC,SAAS,CAAC,CAAC,EAAE;YACpB,IAAM0B,QAAQ,GAAG3B,MAAM,CAAC4B,OAAO,CAACN,QAAQ,EAAEC,CAAC,EAAEC,CAAC,CAAC;YAC/C,IAAIG,QAAQ,KAAKE,SAAS,EAAE;cACxB,OAAOF,QAAQ;YACnB;UACJ;QACJ;MAAC,SAAA5F,GAAA;QAAA0F,UAAA,CAAAhG,CAAA,CAAAM,GAAA;MAAA;QAAA0F,UAAA,CAAA9F,CAAA;MAAA;MACD,OAAOkG,SAAS;IACpB;EAAC;IAAAlE,GAAA;IAAAnC,KAAA,EAhHD;IACA,SAAAsG,UAAiBC,IAAS,EAAExD,KAAY,EAAE;MACtC,IAAMyD,SAAS,GAAG,IAAI1D,SAAS,CAACC,KAAK,CAAC;MACtCyD,SAAS,CAACvD,QAAQ,GAAGsD,IAAI,CAAC7C,GAAG,CAAC,UAAC+C,UAAe;QAAA,OAAKC,sBAAU,CAACJ,SAAS,CAACG,UAAU,EAAE1D,KAAK,CAAC;MAAA,EAAC;MAC3F,OAAOyD,SAAS;IACpB;EAAC;AAAA;AAAA,IAAAG,QAAA,GAAAC,OAAA,cA8GU9D,SAAS","ignoreList":[]}