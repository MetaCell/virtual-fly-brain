apps:
  accounts:
    admin: {pass: metacell, role: administrator, user: admin}
    client: {id: rest-client, secret: 5678eb6e-9e2c-4ee5-bd54-34e7411339e8}
    enabled: true
    harness:
      aliases: []
      database:
        auto: true
        image_ref: null
        name: keycloak-postgres
        pass: password
        postgres:
          image: postgres:10.4
          initialdb: auth_db
          ports:
          - {name: http, port: 5432}
        resources:
          limits: {cpu: 1000m, memory: 2Gi}
          requests: {cpu: 100m, memory: 512Mi}
        size: 2Gi
        type: postgres
        user: user
      dependencies:
        build: []
        hard: []
        soft: []
      deployment:
        auto: true
        image: accounts:latest
        name: accounts
        port: 8080
        replicas: 1
        resources: &id001
          limits: {cpu: 500m, memory: 1024Mi}
          requests: {cpu: 10m, memory: 512Mi}
        volume: null
      domain: null
      env:
      - {name: KEYCLOAK_IMPORT, value: /tmp/realm.json}
      - {name: KEYCLOAK_USER, value: admin}
      - {name: KEYCLOAK_PASSWORD, value: metacell}
      - {name: PROXY_ADDRESS_FORWARDING, value: 'true'}
      - {name: DB_VENDOR, value: POSTGRES}
      - {name: DB_ADDR, value: keycloak-postgres}
      - {name: DB_DATABASE, value: auth_db}
      - {name: DB_USER, value: user}
      - {name: DB_PASSWORD, value: password}
      - {name: JAVA_OPTS, value: '-server -Xms64m -Xmx896m -XX:MetaspaceSize=96M -XX:MaxMetaspaceSize=256m
          -Djava.net.preferIPv4Stack=true -Djboss.modules.system.pkgs=org.jboss.byteman
          -Djava.awt.headless=true  --add-exports=java.base/sun.nio.ch=ALL-UNNAMED
          --add-exports=jdk.unsupported/sun.misc=ALL-UNNAMED --add-exports=jdk.unsupported/sun.reflect=ALL-UNNAMED'}
      name: accounts
      readinessProbe: {path: /auth/realms/master}
      resources:
      - {dst: /tmp/realm.json, name: realm-config, src: realm.json}
      secrets: {api_user_password: ''}
      secured: false
      service: {auto: true, name: accounts, port: 8080}
      subdomain: accounts
      test:
        api:
          autotest: true
          checks: [all]
          enabled: false
          runParams: []
        e2e: {enabled: false, ignoreConsoleErrors: false, ignoreRequestErrors: false,
          smoketest: true}
        unit:
          commands: []
          enabled: true
      uri_role_mapping:
      - roles: [administrator]
        uri: /*
      - {uri: /api/openapi.json, white-listed: true}
      use_services: []
    harvest: true
    image: accounts:latest
    name: accounts
    port: 8080
    resources: *id001
    task-images: {}
    webclient: {id: web-client, secret: 452952ae-922c-4766-b912-7b106271e34b}
  argo:
    harness:
      aliases: []
      dependencies:
        build: []
        hard: []
        soft: []
      deployment:
        auto: false
        image: null
        name: argo
        port: 8080
        replicas: 1
        resources: &id002
          limits: {cpu: 500m, memory: 500Mi}
          requests: {cpu: 10m, memory: 32Mi}
        volume: null
      domain: null
      name: argo
      secrets: null
      secured: true
      service: {auto: false, name: argo-server, port: 2746}
      subdomain: argo
      test:
        api:
          autotest: true
          checks: [all]
          enabled: false
          runParams: []
        e2e: {enabled: false, ignoreConsoleErrors: false, ignoreRequestErrors: false,
          smoketest: true}
        unit:
          commands: []
          enabled: true
      uri_role_mapping:
      - roles: [administrator]
        uri: /*
      - {uri: /api/openapi.json, white-listed: true}
      use_services: []
    image: null
    name: argo
    port: 8080
    resources: *id002
    serviceaccount: argo-workflows
    task-images: {}
  common:
    harness:
      aliases: []
      dependencies:
        build: [cloudharness-flask]
        hard: []
        soft: []
      deployment:
        auto: true
        image: common:latest
        name: common
        port: 8080
        replicas: 1
        resources: &id003
          limits: {cpu: 200m, memory: 256Mi}
          requests: {cpu: 50m, memory: 128Mi}
        volume: null
      domain: null
      name: common
      secrets: null
      secured: false
      service: {auto: true, name: common, port: 8080}
      subdomain: common
      test:
        api:
          autotest: true
          checks: [all]
          enabled: true
          runParams: []
        e2e: {enabled: false, ignoreConsoleErrors: false, ignoreRequestErrors: false,
          smoketest: true}
        unit:
          commands: []
          enabled: true
      uri_role_mapping:
      - roles: [administrator]
        uri: /*
      - {uri: /api/openapi.json, white-listed: true}
      use_services: []
    image: common:latest
    name: common
    port: 8080
    resources: *id003
    task-images: {cloudharness-flask: 'cloudharness-flask:latest'}
  events:
    harness:
      aliases: []
      dependencies:
        build: []
        hard: []
        soft: []
      deployment:
        auto: false
        image: null
        name: events
        port: 8080
        replicas: 1
        resources: &id004
          limits: {cpu: 500m, memory: 500Mi}
          requests: {cpu: 10m, memory: 32Mi}
        volume: null
      domain: null
      env:
      - {name: ZK_HOSTS, value: 'zookeeper:2181'}
      name: events
      secrets: null
      secured: true
      service: {auto: false, name: events-ui, port: 80}
      subdomain: events
      test:
        api:
          autotest: true
          checks: [all]
          enabled: false
          runParams: []
        e2e: {enabled: true, ignoreConsoleErrors: false, ignoreRequestErrors: false,
          smoketest: true}
        unit:
          commands: []
          enabled: true
      uri_role_mapping:
      - roles: [administrator]
        uri: /*
      - {uri: /api/openapi.json, white-listed: true}
      use_services: []
    image: null
    kafka:
      name: bootstrap
      port: 9092
      resources:
        limits: {cpu: 500m, memory: 600Mi}
        requests: {cpu: 50m, memory: 100Mi}
      storage: 10Gi
    name: events
    port: 8080
    pzoo:
      resources:
        limits: {memory: 500Mi}
        requests: {cpu: 10m, memory: 100Mi}
      storage: 1Gi
    resources: *id004
    task-images: {}
    zoo:
      resources:
        limits: {memory: 500Mi}
        requests: {cpu: 10m, memory: 100Mi}
      storage: 1Gi
  jupyterhub:
    cull: {concurrency: 10, enabled: true, every: 600, maxAge: 0, removeNamedServers: true,
      timeout: 3600, users: false}
    custom: {}
    debug: {enabled: false}
    fullnameOverride: ''
    global: {safeToShowValues: false}
    harness:
      aliases: []
      dependencies:
        build: [cloudharness-base]
        hard: []
        soft: [accounts]
      deployment:
        auto: false
        image: jupyterhub:latest
        name: jupyterhub
        port: 8081
        replicas: 1
        resources: &id005
          limits: {cpu: 500m, memory: 500Mi}
          requests: {cpu: 10m, memory: 32Mi}
        volume: null
      domain: null
      name: jupyterhub
      quotas: {quota-storage-max: 1.25, quota-ws-guaranteecpu: 0.05, quota-ws-guaranteemem: 0.1,
        quota-ws-maxcpu: 0.4, quota-ws-maxmem: 0.5, quota-ws-open: 3}
      secrets: null
      secured: false
      service: {auto: false, name: proxy-public, port: 80}
      subdomain: hub
      test:
        api:
          autotest: true
          checks: [all]
          enabled: false
          runParams: []
        e2e: {enabled: false, ignoreConsoleErrors: false, ignoreRequestErrors: false,
          smoketest: true}
        unit:
          commands: []
          enabled: true
      uri_role_mapping:
      - roles: [administrator]
        uri: /*
      - {uri: /api/openapi.json, white-listed: true}
      use_services: []
    hub:
      activeServerLimit: null
      allowNamedServers: true
      annotations: {}
      args: []
      authenticatePrometheus: null
      baseUrl: /
      command: []
      concurrentSpawnLimit: 64
      config:
        JupyterHub: {admin_access: true, authenticator_class: keycloak}
      consecutiveFailureLimit: 5
      containerSecurityContext: {allowPrivilegeEscalation: false, runAsGroup: 1000,
        runAsUser: 1000}
      cookieSecret: null
      db:
        password: null
        pvc:
          accessModes: [ReadWriteOnce]
          annotations: {}
          selector: {}
          storage: 1Gi
          storageClassName: null
          subPath: null
        type: sqlite-pvc
        upgrade: null
        url: null
      deploymentStrategy: {type: Recreate}
      existingSecret: null
      extraConfig: {}
      extraContainers: []
      extraEnv: {}
      extraFiles: {}
      extraPodSpec: {}
      extraVolumeMounts: []
      extraVolumes: []
      fsGid: 1000
      image:
        name: jupyterhub/k8s-hub
        pullPolicy: null
        pullSecrets: []
        tag: 1.1.3
      initContainers: []
      labels: {}
      lifecycle: {}
      livenessProbe: {enabled: true, failureThreshold: 30, initialDelaySeconds: 300,
        periodSeconds: 10, timeoutSeconds: 3}
      namedServerLimitPerUser: null
      networkPolicy:
        allowedIngressPorts: []
        egress:
        - to:
          - ipBlock: {cidr: 0.0.0.0/0}
        enabled: false
        ingress: []
        interNamespaceAccessLabels: ignore
      nodeSelector: {}
      pdb: {enabled: false, maxUnavailable: null, minAvailable: 1}
      readinessProbe: {enabled: true, failureThreshold: 1000, initialDelaySeconds: 0,
        periodSeconds: 2, timeoutSeconds: 1}
      redirectToServer: null
      resources: {}
      service:
        annotations: {}
        extraPorts: []
        loadBalancerIP: null
        ports: {nodePort: null}
        type: ClusterIP
      serviceAccount:
        annotations: {}
      services: {}
      shutdownOnLogout: null
      templatePaths: []
      templateVars: {}
      tolerations: []
    image: jupyterhub:latest
    imagePullSecret: {automaticReferenceInjection: true, create: false, email: null,
      password: null, registry: null, username: null}
    imagePullSecrets: []
    ingress:
      annotations: {}
      enabled: false
      hosts: []
      pathSuffix: null
      pathType: Prefix
      tls: []
    name: jupyterhub
    nameOverride: null
    port: 8081
    prePuller:
      annotations: {}
      containerSecurityContext: {allowPrivilegeEscalation: false, runAsGroup: 65534,
        runAsUser: 65534}
      continuous: {enabled: true}
      extraImages: {}
      extraTolerations: []
      hook:
        containerSecurityContext: {allowPrivilegeEscalation: false, runAsGroup: 65534,
          runAsUser: 65534}
        enabled: true
        image:
          name: jupyterhub/k8s-image-awaiter
          pullPolicy: null
          pullSecrets: []
          tag: 1.1.3
        nodeSelector: {}
        podSchedulingWaitDuration: 10
        pullOnlyOnChanges: true
        resources: {}
        serviceAccount:
          annotations: {}
        tolerations: []
      pause:
        containerSecurityContext: {allowPrivilegeEscalation: false, runAsGroup: 65534,
          runAsUser: 65534}
        image:
          name: k8s.gcr.io/pause
          pullPolicy: null
          pullSecrets: []
          tag: '3.5'
      pullProfileListImages: true
      resources: {}
    proxy:
      annotations: {}
      chp:
        containerSecurityContext: {allowPrivilegeEscalation: false, runAsGroup: 65534,
          runAsUser: 65534}
        defaultTarget: null
        errorTarget: null
        extraCommandLineFlags: []
        extraEnv: {}
        extraPodSpec: {}
        image:
          name: jupyterhub/configurable-http-proxy
          pullPolicy: null
          pullSecrets: []
          tag: 4.5.0
        livenessProbe: {enabled: true, initialDelaySeconds: 60, periodSeconds: 10}
        networkPolicy:
          allowedIngressPorts: [http, https]
          egress:
          - to:
            - ipBlock: {cidr: 0.0.0.0/0}
          enabled: false
          ingress: []
          interNamespaceAccessLabels: ignore
        nodeSelector: {}
        pdb: {enabled: false, maxUnavailable: null, minAvailable: 1}
        readinessProbe: {enabled: true, failureThreshold: 1000, initialDelaySeconds: 0,
          periodSeconds: 2}
        resources: {}
        tolerations: []
      deploymentStrategy: {rollingUpdate: null, type: Recreate}
      https:
        enabled: false
        hosts: []
        letsencrypt: {acmeServer: 'https://acme-v02.api.letsencrypt.org/directory',
          contactEmail: null}
        manual: {cert: null, key: null}
        secret: {crt: tls.crt, key: tls.key, name: null}
        type: letsencrypt
      labels: {}
      secretSync:
        containerSecurityContext: {allowPrivilegeEscalation: false, runAsGroup: 65534,
          runAsUser: 65534}
        image:
          name: jupyterhub/k8s-secret-sync
          pullPolicy: null
          pullSecrets: []
          tag: 1.1.3
        resources: {}
      secretToken: null
      service:
        annotations: {}
        disableHttpPort: false
        extraPorts: []
        labels: {}
        loadBalancerIP: null
        loadBalancerSourceRanges: []
        nodePorts: {http: null, https: null}
        type: NodePort
      traefik:
        containerSecurityContext: {allowPrivilegeEscalation: false, runAsGroup: 65534,
          runAsUser: 65534}
        extraDynamicConfig: {}
        extraEnv: {}
        extraPodSpec: {}
        extraPorts: []
        extraStaticConfig: {}
        extraVolumeMounts: []
        extraVolumes: []
        hsts: {includeSubdomains: false, maxAge: 15724800, preload: false}
        image:
          name: traefik
          pullPolicy: null
          pullSecrets: []
          tag: v2.4.11
        labels: {}
        networkPolicy:
          allowedIngressPorts: [http, https]
          egress:
          - to:
            - ipBlock: {cidr: 0.0.0.0/0}
          enabled: true
          ingress: []
          interNamespaceAccessLabels: ignore
        nodeSelector: {}
        pdb: {enabled: false, maxUnavailable: null, minAvailable: 1}
        resources: {}
        serviceAccount:
          annotations: {}
        tolerations: []
    rbac: {enabled: true}
    resources: *id005
    scheduling:
      corePods:
        nodeAffinity: {matchNodePurpose: prefer}
        tolerations:
        - {effect: NoSchedule, key: hub.jupyter.org/dedicated, operator: Equal, value: core}
        - {effect: NoSchedule, key: hub.jupyter.org_dedicated, operator: Equal, value: core}
      podPriority: {defaultPriority: 0, enabled: false, globalDefault: false, userPlaceholderPriority: -10}
      userPlaceholder:
        containerSecurityContext: {allowPrivilegeEscalation: false, runAsGroup: 65534,
          runAsUser: 65534}
        enabled: true
        image:
          name: k8s.gcr.io/pause
          pullPolicy: null
          pullSecrets: []
          tag: '3.5'
        replicas: 0
        resources: {}
      userPods:
        nodeAffinity: {matchNodePurpose: prefer}
        tolerations:
        - {effect: NoSchedule, key: hub.jupyter.org/dedicated, operator: Equal, value: user}
        - {effect: NoSchedule, key: hub.jupyter.org_dedicated, operator: Equal, value: user}
      userScheduler:
        containerSecurityContext: {allowPrivilegeEscalation: false, runAsGroup: 65534,
          runAsUser: 65534}
        enabled: false
        extraPodSpec: {}
        image:
          name: k8s.gcr.io/kube-scheduler
          pullPolicy: null
          pullSecrets: []
          tag: v1.19.13
        logLevel: 4
        nodeSelector: {}
        pdb: {enabled: true, maxUnavailable: 1, minAvailable: null}
        plugins:
          score:
            disabled:
            - {name: SelectorSpread}
            - {name: TaintToleration}
            - {name: PodTopologySpread}
            - {name: NodeResourcesBalancedAllocation}
            - {name: NodeResourcesLeastAllocated}
            - {name: NodePreferAvoidPods}
            - {name: NodeAffinity}
            - {name: InterPodAffinity}
            - {name: ImageLocality}
            enabled:
            - {name: NodePreferAvoidPods, weight: 161051}
            - {name: NodeAffinity, weight: 14631}
            - {name: InterPodAffinity, weight: 1331}
            - {name: NodeResourcesMostAllocated, weight: 121}
            - {name: ImageLocality, weight: 11}
        replicas: 2
        resources: {}
        serviceAccount:
          annotations: {}
        tolerations: []
    singleuser:
      cloudMetadata: {blockWithIptables: false}
      cmd: /usr/local/bin/start-singleuser.sh
      cpu: {guarantee: 0.05, limit: 0.4}
      defaultUrl: null
      events: true
      extraAnnotations: {}
      extraContainers: []
      extraEnv: {}
      extraFiles: {}
      extraLabels: {hub.jupyter.org/network-access-hub: 'true'}
      extraNodeAffinity:
        preferred: []
        required: []
      extraPodAffinity:
        preferred: []
        required: []
      extraPodAntiAffinity:
        preferred: []
        required: []
      extraPodConfig: {}
      extraResource:
        guarantees: {}
        limits: {}
      extraTolerations: []
      fsGid: 100
      image:
        name: jupyter/base-notebook
        pullPolicy: null
        pullSecrets: []
        tag: hub-1.4.2
      initContainers: []
      lifecycleHooks: {}
      memory: {guarantee: 0.1G, limit: 0.5G}
      networkPolicy:
        allowedIngressPorts: []
        egress:
        - to:
          - ipBlock:
              cidr: 0.0.0.0/0
              except: [169.254.169.254/32]
        enabled: false
        ingress: []
        interNamespaceAccessLabels: ignore
      networkTools:
        image:
          name: jupyterhub/k8s-network-tools
          pullPolicy: null
          pullSecrets: []
          tag: 1.1.3
      nodeSelector: {}
      podNameTemplate: null
      profileList: []
      serviceAccountName: null
      startTimeout: 300
      storage:
        capacity: 10Mi
        dynamic:
          pvcNameTemplate: jupyter-{username}
          storageAccessModes: [ReadWriteOnce]
          storageClass: null
          volumeNameTemplate: jupyter-{username}
        extraLabels: {}
        extraVolumeMounts: []
        extraVolumes: []
        homeMountPath: /home/workspace
        static: {pvcName: null, subPath: '{username}'}
        type: dynamic
      uid: 1000
    task-images: {cloudharness-base: 'cloudharness-base:latest'}
  nfsserver:
    affinity:
      podAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
            - key: app
              operator: In
              values: [nfs-server]
          topologyKey: kubernetes.io/hostname
    harness:
      aliases: []
      dependencies:
        build: []
        hard: []
        soft: []
      deployment:
        auto: false
        image: nfsserver:latest
        name: nfsserver
        port: 8080
        replicas: 1
        resources: &id006
          limits: {cpu: 100m, memory: 128Mi}
          requests: {cpu: 10m, memory: 128Mi}
        volume: null
      domain: null
      name: nfsserver
      secrets: null
      secured: false
      service: {auto: false, name: nfsserver, port: 80}
      subdomain: nfsserver
      test:
        api:
          autotest: true
          checks: [all]
          enabled: false
          runParams: []
        e2e: {enabled: false, ignoreConsoleErrors: false, ignoreRequestErrors: false,
          smoketest: true}
        unit:
          commands: []
          enabled: true
      uri_role_mapping:
      - roles: [administrator]
        uri: /*
      - {uri: /api/openapi.json, white-listed: true}
      use_services: []
    image: nfsserver:latest
    labels: {}
    leaderElection: {enabled: true}
    name: nfsserver
    nameOverride: nfs-provisioner
    nfs:
      mountOptions: [nolock, local_lock=all]
      path: /exports
      reclaimPolicy: Retain
      server: null
      useDNS: true
      volumeName: nfs-subdir-external-provisioner-root
    nodeSelector: {}
    podAnnotations: {}
    podSecurityContext: {}
    podSecurityPolicy: {enabled: false}
    port: 8080
    rbac: {create: true}
    replicaCount: 1
    resources: *id006
    securityContext: {}
    server: {diskSize: 10Gi}
    serviceAccount:
      annotations: {}
      create: true
      name: null
    storageClass:
      accessModes: ReadWriteOnce
      allowVolumeExpansion: true
      annotations: {}
      archiveOnDelete: true
      create: true
      defaultClass: false
      name: nfs-client
      onDelete: null
      pathPattern: null
      reclaimPolicy: Delete
      volumeBindingMode: Immediate
    strategyType: Recreate
    task-images: {}
    tolerations: []
  notifications:
    harness:
      aliases: []
      dependencies:
        build: [cloudharness-base]
        hard: []
        soft: []
      deployment:
        auto: true
        image: notifications:latest
        name: notifications
        port: 8080
        replicas: 1
        resources: &id007
          limits: {cpu: 100m, memory: 256Mi}
          requests: {cpu: 25m, memory: 64Mi}
        volume: null
      domain: null
      events: {cdc: null}
      name: notifications
      secrets: {email-password: null, email-user: null}
      secured: false
      service: {auto: false, name: notifications, port: 80}
      subdomain: notifications
      test:
        api:
          autotest: true
          checks: [all]
          enabled: false
          runParams: []
        e2e: {enabled: false, ignoreConsoleErrors: false, ignoreRequestErrors: false,
          smoketest: true}
        unit:
          commands: []
          enabled: true
      uri_role_mapping:
      - roles: [administrator]
        uri: /*
      - {uri: /api/openapi.json, white-listed: true}
      use_services: []
    image: notifications:latest
    name: notifications
    notification:
      channels:
        admins:
          adapter: email
          backends: [email]
          from: info@example.com
          templateFolder: html
          to: [info@example.com]
        log:
          adapter: email
          backends: [console]
          from: info@example.com
          templateFolder: text
          to: [info@example.com]
      operations:
        create:
          channels: [admins]
          subject: New {{ message_type }} - {{ domain }}
          template: model-instance-create
        delete:
          channels: [admins]
          subject: Delete {{ message_type }} - {{ domain }}
          template: model-instance-delete
        update:
          channels: [admins]
          subject: Update {{ message_type }} - {{ domain }}
          template: model-instance-update
    port: 8080
    resources: *id007
    task-images: {cloudharness-base: 'cloudharness-base:latest'}
  samples:
    harness:
      aliases: []
      dependencies:
        build: [cloudharness-flask, cloudharness-frontend-build]
        hard: []
        soft: [workflows, events, accounts, common, nfsserver]
      deployment:
        auto: true
        image: samples:latest
        name: samples
        port: 8080
        replicas: 1
        resources: &id008
          limits: {cpu: 500m, memory: 500Mi}
          requests: {cpu: 10m, memory: 32Mi}
        volume: {auto: true, mountpath: /mnt/myvolume, name: my-shared-volume, size: 10Mi,
          usenfs: true}
      domain: null
      env:
      - {name: WORKERS, value: '3'}
      name: samples
      port: 80
      resources:
      - {dst: /tmp/resources/myConfig.json, name: my-config, src: myConfig.json}
      - {dst: /usr/src/app/important_config.yaml, name: example, src: example.yaml}
      secrets: {asecret: value}
      secured: true
      sentry: true
      service: {auto: true, name: samples, port: 8080}
      subdomain: samples
      test:
        api:
          autotest: true
          checks: [all]
          enabled: true
          runParams: [--skip-deprecated-operations, --hypothesis-suppress-health-check=too_slow,
            --hypothesis-deadline=180000, --request-timeout=180000, --hypothesis-max-examples=2,
            --show-errors-tracebacks]
        e2e: {enabled: true, ignoreConsoleErrors: false, ignoreRequestErrors: false,
          smoketest: true}
        unit:
          commands: [pytest /usr/src/app/samples/test]
          enabled: true
      uri_role_mapping:
      - {uri: /, white-listed: true}
      - {uri: /api/error, white-listed: true}
      - {uri: /api/operation_sync, white-listed: true}
      - {uri: /api/operation_sync_results, white-listed: true}
      - {uri: /api/ping, white-listed: true}
      - {uri: /api/openapi.json, white-listed: true}
      - {uri: /icon.png, white-listed: true}
      - {uri: /js/*, white-listed: true}
      - {uri: /assets/*, white-listed: true}
      use_services: []
    image: samples:latest
    name: samples
    port: 8080
    resources: *id008
    task-images: {cloudharness-flask: 'cloudharness-flask:latest', cloudharness-frontend-build: 'cloudharness-frontend-build:latest',
      samples-print-file: 'samples-print-file:latest', samples-secret: 'samples-secret:latest',
      samples-sum: 'samples-sum:latest'}
  sentry:
    harness:
      aliases: []
      database:
        auto: true
        image_ref: null
        name: sentry-db
        pass: secret
        postgres:
          image: postgres:13
          initialdb: sentry
          ports:
          - {name: http, port: 5432}
        resources:
          limits: {cpu: 1000m, memory: 2Gi}
          requests: {cpu: 100m, memory: 512Mi}
        size: 2Gi
        type: postgres
        user: sentry
      dependencies:
        build: []
        hard: []
        soft: []
      deployment:
        auto: true
        image: sentry:latest
        name: sentry
        port: 9000
        replicas: 1
        resources: &id009
          limits: {cpu: 2000m, memory: 2048Mi}
          requests: {cpu: 300m, memory: 256Mi}
        volume: null
      domain: null
      env:
      - {name: SENTRY_SERVER_EMAIL, value: zoran@metacell.us}
      name: sentry
      secrets: {email-password: null, email-server: null, email-user: null}
      secured: false
      service: {auto: true, name: sentry, port: 9000}
      subdomain: sentry
      test:
        api:
          autotest: true
          checks: [all]
          enabled: false
          runParams: []
        e2e: {enabled: false, ignoreConsoleErrors: false, ignoreRequestErrors: false,
          smoketest: true}
        unit:
          commands: []
          enabled: true
      uri_role_mapping:
      - roles: [administrator]
        uri: /*
      - {uri: /api/openapi.json, white-listed: true}
      use_services: []
    image: sentry:latest
    name: sentry
    port: 9000
    redis: {image: 'redis:latest', name: sentry-redis-host, port: 6379}
    resources: *id009
    task-images: {}
  virtual_fly_brain:
    harness:
      aliases: []
      database:
        args: [--vm, '1', --vm-bytes, 8Gi, --vm-hang, '1']
        auto: true
        image_ref: postgres
        name: virtual-fy-brain-db
        pass: metacell
        postgres:
          image: postgres:13
          initialdb: cloudharness
          ports:
          - {name: http, port: 5432}
        resources:
          limits: {cpu: 2, memory: 4Gi}
          requests: {cpu: 1, memory: 2Gi}
        size: 240Gi
        type: postgres
        user: mnp
      dependencies:
        build: [cloudharness-base-debian, cloudharness-flask, postgres]
        hard: []
        soft: [argo]
      deployment:
        auto: true
        image: virtual-fly-brain:latest
        name: virtual-fly-brain
        port: 8080
        replicas: 1
        resources: &id010
          limits: {cpu: 500m, memory: 500Mi}
          requests: {cpu: 10m, memory: 32Mi}
        volume: null
      domain: null
      name: virtual-fly-brain
      secrets: null
      secured: false
      service: {auto: true, name: virtual-fly-brain, port: 8080}
      subdomain: virtual-fy-brain
      test:
        api:
          autotest: true
          checks: [all]
          enabled: false
          runParams: []
        e2e: {enabled: false, ignoreConsoleErrors: false, ignoreRequestErrors: false,
          smoketest: true}
        unit:
          commands: []
          enabled: true
      uri_role_mapping:
      - roles: [administrator]
        uri: /*
      - {uri: /api/openapi.json, white-listed: true}
      use_services: []
    image: virtual-fly-brain:latest
    name: virtual-fly-brain
    port: 8080
    resources: *id010
    task-images: {cloudharness-base-debian: 'cloudharness-base-debian:latest',
      cloudharness-flask: 'cloudharness-flask:latest'}
  volumemanager:
    harness:
      aliases: []
      dependencies:
        build: [cloudharness-flask]
        hard: []
        soft: []
      deployment:
        auto: true
        image: volumemanager:latest
        name: volumemanager
        port: 8080
        replicas: 1
        resources: &id011
          limits: {cpu: 500m, memory: 500Mi}
          requests: {cpu: 10m, memory: 32Mi}
        volume: null
      domain: null
      name: volumemanager
      secrets: null
      secured: false
      sentry: true
      service: {auto: true, name: volumemanager, port: 8080}
      subdomain: volumemanager
      test:
        api:
          autotest: true
          checks: [all]
          enabled: false
          runParams: []
        e2e: {enabled: false, ignoreConsoleErrors: false, ignoreRequestErrors: false,
          smoketest: true}
        unit:
          commands: []
          enabled: true
      uri_role_mapping:
      - roles: [administrator]
        uri: /*
      - {uri: /api/openapi.json, white-listed: true}
      use_services: []
    image: volumemanager:latest
    name: volumemanager
    port: 8080
    resources: *id011
    task-images: {cloudharness-flask: 'cloudharness-flask:latest'}
  workflows:
    harness:
      aliases: []
      dependencies:
        build: [cloudharness-flask]
        hard: [argo]
        soft: []
      deployment:
        auto: true
        image: workflows:latest
        name: workflows
        port: 8080
        replicas: 1
        resources: &id012
          limits: {cpu: 500m, memory: 500Mi}
          requests: {cpu: 10m, memory: 32Mi}
        volume: null
      domain: null
      name: workflows
      secrets: null
      secured: false
      service: {auto: true, name: workflows, port: 8080}
      subdomain: workflows
      test:
        api:
          autotest: true
          checks: [all]
          enabled: true
          runParams: []
        e2e: {enabled: false, ignoreConsoleErrors: false, ignoreRequestErrors: false,
          smoketest: true}
        unit:
          commands: []
          enabled: true
      uri_role_mapping:
      - roles: [administrator]
        uri: /*
      - {uri: /api/openapi.json, white-listed: true}
      use_services: []
    image: workflows:latest
    name: workflows
    port: 8080
    resources: *id012
    task-images: {cloudharness-flask: 'cloudharness-flask:latest', workflows-extract-download: 'workflows-extract-download:latest',
      workflows-notify-queue: 'workflows-notify-queue:latest', workflows-send-result-event: 'workflows-send-result-event:latest'}
backup:
  active: false
  dir: /backups
  keep_days: '7'
  keep_months: '6'
  keep_weeks: '4'
  resources:
    limits: {cpu: 50m, memory: 64Mi}
    requests: {cpu: 25m, memory: 32Mi}
  schedule: '*/5 * * * *'
  suffix: .gz
  volumesize: 2Gi
domain: cloudharness.metacell.us
env:
- {name: CH_VERSION, value: 0.0.1}
- {name: CH_CHART_VERSION, value: 0.0.1}
- {name: CH_NFSSERVER_SUBDOMAIN, value: nfsserver}
- {name: CH_NFSSERVER_NAME, value: nfsserver}
- {name: CH_VOLUMEMANAGER_SUBDOMAIN, value: volumemanager}
- {name: CH_VOLUMEMANAGER_NAME, value: volumemanager}
- {name: CH_WORKFLOWS_SUBDOMAIN, value: workflows}
- {name: CH_WORKFLOWS_NAME, value: workflows}
- {name: CH_JUPYTERHUB_SUBDOMAIN, value: hub}
- {name: CH_JUPYTERHUB_NAME, value: jupyterhub}
- {name: CH_SAMPLES_SUBDOMAIN, value: samples}
- {name: CH_SAMPLES_PORT, value: 80}
- {name: CH_SAMPLES_NAME, value: samples}
- {name: CH_COMMON_SUBDOMAIN, value: common}
- {name: CH_COMMON_NAME, value: common}
- {name: CH_ACCOUNTS_SUBDOMAIN, value: accounts}
- {name: CH_ACCOUNTS_NAME, value: accounts}
- {name: CH_EVENTS_SUBDOMAIN, value: events}
- {name: CH_EVENTS_NAME, value: events}
- {name: CH_SENTRY_SUBDOMAIN, value: sentry}
- {name: CH_SENTRY_NAME, value: sentry}
- {name: CH_ARGO_SUBDOMAIN, value: argo}
- {name: CH_ARGO_NAME, value: argo}
- {name: CH_NOTIFICATIONS_SUBDOMAIN, value: notifications}
- {name: CH_NOTIFICATIONS_NAME, value: notifications}
- {name: CH_VIRTUAL_FLY_BRAIN_SUBDOMAIN, value: virtual-fy-brain}
- {name: CH_VIRTUAL_FLY_BRAIN_NAME, value: virtual-fly-brain}
- {name: CH_DOMAIN, value: cloudharness.metacell.us}
- {name: CH_IMAGE_REGISTRY, value: ''}
- {name: CH_IMAGE_TAG, value: latest}
ingress:
  enabled: true
  letsencrypt: {email: filippo@metacell.us}
  name: cloudharness-ingress
  ssl_redirect: true
local: false
mainapp: virtual-fly-brain
name: olphactory
namespace: CHANGE ME
privenv:
- {name: CH_SECRET, value: In God we trust; all others must bring data. ― W. Edwards
    Deming}
registry: {name: '', secret: ''}
secured_gatekeepers: true
tag: latest
task-images: {cloudharness-base: 'cloudharness-base:latest', cloudharness-base-debian: 'cloudharness-base-debian:latest',
  cloudharness-flask: 'cloudharness-flask:latest', cloudharness-frontend-build: 'cloudharness-frontend-build:latest',
  samples-print-file: 'samples-print-file:latest', samples-secret: 'samples-secret:latest',
  samples-sum: 'samples-sum:latest', workflows-extract-download: 'workflows-extract-download:latest',
  workflows-notify-queue: 'workflows-notify-queue:latest', workflows-send-result-event: 'workflows-send-result-event:latest'}
tls: true
