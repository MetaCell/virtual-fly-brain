{"version":3,"file":"ModelManager.js","names":["loadModel","model","ModelFactory","cleanModel","console","timeEnd","Resources","PARSING_MODEL","time","CREATING_MODEL","window","Model","createGeppettoModel","CREATING_INSTANCES","getCurrentWorld","Instances","getInstances","push","apply","instantiateVariables","augmentInstancesArray","LOADING_PROJECT","addVariableToModel","rawModel","diffReport","mergeModel","newInstances","createInstancesFromDiffReport"],"sources":["../src/ModelManager.js"],"sourcesContent":["/**\n * Client class use to handle Geppetto workflows\n *\n * @module Manager\n * @author Matteo Cantarelli\n */\n\n\nimport ModelFactory from './ModelFactory';\nimport Resources from './Resources';\n\nimport { augmentInstancesArray } from './Instances';\n\n\n/**\n *\n * @param payload\n */\nexport function loadModel (model) {\n  ModelFactory.cleanModel();\n  console.timeEnd(Resources.PARSING_MODEL);\n\n  console.time(Resources.CREATING_MODEL);\n\n  // build Geppetto model here (once off operation when project is loaded)\n  window.Model = ModelFactory.createGeppettoModel(model, true, true);\n  console.timeEnd(Resources.CREATING_MODEL);\n\n  console.time(Resources.CREATING_INSTANCES);\n\n\n  // Initialize instances with static instances already present in the model\n  if (window.Model.getCurrentWorld()) {\n    window.Instances = window.Model.getCurrentWorld().getInstances();\n    window.Instances.push.apply(window.Instances, ModelFactory.instantiateVariables(window.Model));\n  } else {\n    window.Instances = ModelFactory.instantiateVariables(window.Model);\n  }\n\n  augmentInstancesArray(window.Instances);\n  console.timeEnd(Resources.CREATING_INSTANCES);\n\n  console.timeEnd(Resources.LOADING_PROJECT);\n\n  return window.Model;\n}\n\n/**\n * Adds fetched variable to model\n *\n * @param rawModel\n */\nexport function addVariableToModel (rawModel) {\n  // STEP 1: merge model - expect a fully formed Geppetto model to be merged into current one\n  const diffReport = ModelFactory.mergeModel(rawModel);\n  // STEP 2: add new instances for new variables if any\n  const newInstances = ModelFactory.createInstancesFromDiffReport(diffReport);\n  return newInstances;\n\n}\n\nexport default { loadModel, addVariableToModel };\n"],"mappings":";;;;;;;;AAQA;AACA;AAEA;AAAoD;AAXpD;AACA;AACA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACO,SAASA,SAAS,CAAEC,KAAK,EAAE;EAChCC,wBAAY,CAACC,UAAU,EAAE;EACzBC,OAAO,CAACC,OAAO,CAACC,qBAAS,CAACC,aAAa,CAAC;EAExCH,OAAO,CAACI,IAAI,CAACF,qBAAS,CAACG,cAAc,CAAC;;EAEtC;EACAC,MAAM,CAACC,KAAK,GAAGT,wBAAY,CAACU,mBAAmB,CAACX,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC;EAClEG,OAAO,CAACC,OAAO,CAACC,qBAAS,CAACG,cAAc,CAAC;EAEzCL,OAAO,CAACI,IAAI,CAACF,qBAAS,CAACO,kBAAkB,CAAC;;EAG1C;EACA,IAAIH,MAAM,CAACC,KAAK,CAACG,eAAe,EAAE,EAAE;IAClCJ,MAAM,CAACK,SAAS,GAAGL,MAAM,CAACC,KAAK,CAACG,eAAe,EAAE,CAACE,YAAY,EAAE;IAChEN,MAAM,CAACK,SAAS,CAACE,IAAI,CAACC,KAAK,CAACR,MAAM,CAACK,SAAS,EAAEb,wBAAY,CAACiB,oBAAoB,CAACT,MAAM,CAACC,KAAK,CAAC,CAAC;EAChG,CAAC,MAAM;IACLD,MAAM,CAACK,SAAS,GAAGb,wBAAY,CAACiB,oBAAoB,CAACT,MAAM,CAACC,KAAK,CAAC;EACpE;EAEA,IAAAS,gCAAqB,EAACV,MAAM,CAACK,SAAS,CAAC;EACvCX,OAAO,CAACC,OAAO,CAACC,qBAAS,CAACO,kBAAkB,CAAC;EAE7CT,OAAO,CAACC,OAAO,CAACC,qBAAS,CAACe,eAAe,CAAC;EAE1C,OAAOX,MAAM,CAACC,KAAK;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASW,kBAAkB,CAAEC,QAAQ,EAAE;EAC5C;EACA,IAAMC,UAAU,GAAGtB,wBAAY,CAACuB,UAAU,CAACF,QAAQ,CAAC;EACpD;EACA,IAAMG,YAAY,GAAGxB,wBAAY,CAACyB,6BAA6B,CAACH,UAAU,CAAC;EAC3E,OAAOE,YAAY;AAErB;AAAC,eAEc;EAAE1B,SAAS,EAATA,SAAS;EAAEsB,kBAAkB,EAAlBA;AAAmB,CAAC;AAAA"}