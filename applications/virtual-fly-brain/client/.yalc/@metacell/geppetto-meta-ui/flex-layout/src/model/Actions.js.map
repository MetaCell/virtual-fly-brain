{"version":3,"file":"Actions.js","names":["_Action","_interopRequireDefault","require","obj","__esModule","_typeof","o","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","_defineProperty","value","t","_toPrimitive","r","e","toPrimitive","call","String","Number","Actions","addNode","json","toNodeId","location","index","select","Action","ADD_NODE","toNode","getName","moveNode","fromNodeId","MOVE_NODE","fromNode","deleteTab","tabNodeId","DELETE_TAB","node","renameTab","text","RENAME_TAB","selectTab","SELECT_TAB","tabNode","setActiveTabset","tabsetNodeId","SET_ACTIVE_TABSET","tabsetNode","adjustSplit","splitSpec","node1","node1Id","node2","node2Id","ADJUST_SPLIT","weight1","pixelWidth1","weight2","pixelWidth2","adjustBorderSplit","nodeId","pos","ADJUST_BORDER_SPLIT","maximizeToggle","MAXIMIZE_TOGGLE","updateModelAttributes","attributes","UPDATE_MODEL_ATTRIBUTES","updateNodeAttributes","UPDATE_NODE_ATTRIBUTES","floatTab","FLOAT_TAB","unFloatTab","UNFLOAT_TAB","_default","exports"],"sources":["../../../../src/flex-layout/src/model/Actions.ts"],"sourcesContent":["import DockLocation from \"../DockLocation\";\nimport Action from \"./Action\";\n\n/**\n * The Action creator class for FlexLayout model actions\n */\nclass Actions {\n    static ADD_NODE = \"FlexLayout_AddNode\";\n    static MOVE_NODE = \"FlexLayout_MoveNode\";\n    static DELETE_TAB = \"FlexLayout_DeleteTab\";\n    static RENAME_TAB = \"FlexLayout_RenameTab\";\n    static SELECT_TAB = \"FlexLayout_SelectTab\";\n    static SET_ACTIVE_TABSET = \"FlexLayout_SetActiveTabset\";\n    static ADJUST_SPLIT = \"FlexLayout_AdjustSplit\";\n    static ADJUST_BORDER_SPLIT = \"FlexLayout_AdjustBorderSplit\";\n    static MAXIMIZE_TOGGLE = \"FlexLayout_MaximizeToggle\";\n    static UPDATE_MODEL_ATTRIBUTES = \"FlexLayout_UpdateModelAttributes\";\n    static UPDATE_NODE_ATTRIBUTES = \"FlexLayout_UpdateNodeAttributes\";\n    static FLOAT_TAB = \"FlexLayout_FloatTab\";\n    static UNFLOAT_TAB = \"FlexLayout_UnFloatTab\";\n\n    /**\n     * Adds a tab node to the given tabset node\n     * @param json the json for the new tab node e.g {type:\"tab\", component:\"table\"}\n     * @param toNodeId the new tab node will be added to the tabset with this node id\n     * @param location the location where the new tab will be added, one of the DockLocation enum values.\n     * @param index for docking to the center this value is the index of the tab, use -1 to add to the end.\n     * @param select (optional) whether to select the new tab, overriding autoSelectTab\n     * @returns {{type: (string|string), json: *, toNode: *, location: (*|string), index: *, select?: boolean}}\n     */\n    static addNode(json: any, toNodeId: string, location: DockLocation, index: number, select?: boolean): Action {\n        return new Action(Actions.ADD_NODE, {\n            json,\n            toNode: toNodeId,\n            location: location.getName(),\n            index,\n            select,\n        });\n    }\n\n    /**\n     * Moves a node (tab or tabset) from one location to another\n     * @param fromNodeId the id of the node to move\n     * @param toNodeId the id of the node to receive the moved node\n     * @param location the location where the moved node will be added, one of the DockLocation enum values.\n     * @param index for docking to the center this value is the index of the tab, use -1 to add to the end.\n     * @param select (optional) whether to select the moved tab(s) in new tabset, overriding autoSelectTab\n     * @returns {{type: (string|string), fromNode: *, toNode: *, location: (*|string), index: *}}\n     */\n    static moveNode(fromNodeId: string, toNodeId: string, location: DockLocation, index: number, select?: boolean): Action {\n        return new Action(Actions.MOVE_NODE, {\n            fromNode: fromNodeId,\n            toNode: toNodeId,\n            location: location.getName(),\n            index,\n            select,\n        });\n    }\n\n    /**\n     * Deletes a tab node from the layout\n     * @param tabNodeId the id of the node to delete\n     * @returns {{type: (string|string), node: *}}\n     */\n    static deleteTab(tabNodeId: string): Action {\n        return new Action(Actions.DELETE_TAB, { node: tabNodeId });\n    }\n\n    /**\n     * Change the given nodes tab text\n     * @param tabNodeId the id of the node to rename\n     * @param text the test of the tab\n     * @returns {{type: (string|string), node: *, text: *}}\n     */\n    static renameTab(tabNodeId: string, text: string): Action {\n        return new Action(Actions.RENAME_TAB, { node: tabNodeId, text });\n    }\n\n    /**\n     * Selects the given tab in its parent tabset\n     * @param tabNodeId the id of the node to set selected\n     * @returns {{type: (string|string), tabNode: *}}\n     */\n    static selectTab(tabNodeId: string): Action {\n        return new Action(Actions.SELECT_TAB, { tabNode: tabNodeId });\n    }\n\n    /**\n     * Set the given tabset node as the active tabset\n     * @param tabsetNodeId the id of the tabset node to set as active\n     * @returns {{type: (string|string), tabsetNode: *}}\n     */\n    static setActiveTabset(tabsetNodeId: string): Action {\n        return new Action(Actions.SET_ACTIVE_TABSET, { tabsetNode: tabsetNodeId });\n    }\n\n    /**\n     * Adjust the splitter between two tabsets\n     * @example\n     *  Actions.adjustSplit({node1: \"1\", weight1:30, pixelWidth1:300, node2: \"2\", weight2:70, pixelWidth2:700});\n     *\n     * @param splitSpec an object the defines the new split between two tabsets, see example below.\n     * @returns {{type: (string|string), node1: *, weight1: *, pixelWidth1: *, node2: *, weight2: *, pixelWidth2: *}}\n     */\n    static adjustSplit(splitSpec: { node1Id: string; weight1: number; pixelWidth1: number; node2Id: string; weight2: number; pixelWidth2: number }): Action {\n        const node1 = splitSpec.node1Id;\n        const node2 = splitSpec.node2Id;\n\n        return new Action(Actions.ADJUST_SPLIT, {\n            node1,\n            weight1: splitSpec.weight1,\n            pixelWidth1: splitSpec.pixelWidth1,\n            node2,\n            weight2: splitSpec.weight2,\n            pixelWidth2: splitSpec.pixelWidth2,\n        });\n    }\n\n    static adjustBorderSplit(nodeId: string, pos: number): Action {\n        return new Action(Actions.ADJUST_BORDER_SPLIT, { node: nodeId, pos });\n    }\n\n    /**\n     * Maximizes the given tabset\n     * @param tabsetNodeId the id of the tabset to maximize\n     * @returns {{type: (string|string), node: *}}\n     */\n    static maximizeToggle(tabsetNodeId: string): Action {\n        return new Action(Actions.MAXIMIZE_TOGGLE, { node: tabsetNodeId });\n    }\n\n    /**\n     * Updates the global model jsone attributes\n     * @param attributes the json for the model attributes to update (merge into the existing attributes)\n     * @returns {{type: (string|string), json: *}}\n     */\n    static updateModelAttributes(attributes: any): Action {\n        return new Action(Actions.UPDATE_MODEL_ATTRIBUTES, { json: attributes });\n    }\n\n    /**\n     * Updates the given nodes json attributes\n     * @param nodeId the id of the node to update\n     * @param attributes the json attributes to update (merge with the existing attributes)\n     * @returns {{type: (string|string), node: *, json: *}}\n     */\n    static updateNodeAttributes(nodeId: string, attributes: any): Action {\n        return new Action(Actions.UPDATE_NODE_ATTRIBUTES, { node: nodeId, json: attributes });\n    }\n\n    static floatTab(nodeId: string): Action {\n        return new Action(Actions.FLOAT_TAB, { node: nodeId });\n    }\n\n    static unFloatTab(nodeId: string): Action {\n        return new Action(Actions.UNFLOAT_TAB, { node: nodeId });\n    }\n}\n\nexport default Actions;\n"],"mappings":"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","ignoreList":[]}