{"version":3,"file":"Tree.js","names":["_react","_interopRequireWildcard","require","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","_typeof","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","length","descriptor","enumerable","configurable","writable","_toPropertyKey","key","_createClass","protoProps","staticProps","prototype","_toPrimitive","Symbol","toPrimitive","String","Number","_callSuper","o","_getPrototypeOf","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","constructor","apply","self","_assertThisInitialized","ReferenceError","Boolean","valueOf","setPrototypeOf","getPrototypeOf","bind","_inherits","subClass","superClass","create","value","_setPrototypeOf","p","Tree","_Component","render","Component","_default","exports","withStyles","styles"],"sources":["../../src/tree-viewer/Tree.js"],"sourcesContent":["import React, { Component } from 'react';\nclass Tree extends Component {\n  constructor (props) {\n    super(props);\n  }\n  render() { return null }\n}\nexport default withStyles(styles)(Tree);\n// import SortableTree from '@nosferatu500/react-sortable-tree';\n// import {\n//   toggleExpandedForAll,\n//   changeNodeAtPath,\n//   walk,\n// } from '@nosferatu500/react-sortable-tree';\n// import { withStyles } from '@material-ui/core';\n// import '@nosferatu500/react-sortable-tree/style.css';\n// import PropTypes from 'prop-types';\n\n// const styles = () => ({ treeViewer: { height: '100%' } });\n\n// class Tree extends Component {\n//   constructor (props) {\n//     super(props);\n\n//     this.updateTreeData = this.updateTreeData.bind(this);\n//     this.expandAll = this.expandAll.bind(this);\n//     this.collapseAll = this.collapseAll.bind(this);\n//     this.state = { treeData: this.props.treeData };\n//   }\n\n//   updateTreeData (treeData) {\n//     this.setState({ treeData });\n//   }\n\n//   expand (expanded) {\n//     this.setState({\n//       treeData: toggleExpandedForAll({\n//         treeData: this.state.treeData,\n//         expanded,\n//       }),\n//     });\n//   }\n\n//   expandAll () {\n//     this.expand(true);\n//   }\n\n//   collapseAll () {\n//     this.expand(false);\n//   }\n\n//   handleClick (event, rowInfo) {\n//     const toggleMode = this.props.toggleMode;\n//     let currentTreeData = this.state.treeData;\n//     // If node has children, we expand/collapse the node\n//     if (\n//       rowInfo.node.children != undefined\n//       && rowInfo.node.children.length > 0\n//     ) {\n//       // If parents can be activate, iterate over the whole tree\n//       if (this.props.activateParentsNodeOnClick) {\n//         walk({\n//           treeData: currentTreeData,\n//           getNodeKey: ({ treeIndex }) => treeIndex,\n//           ignoreCollapsed: true,\n//           callback: rowInfoIter => {\n//             const isActive = rowInfoIter.treeIndex == rowInfo.treeIndex;\n//             /*\n//              * If toggleMode just toggle to activate/inactivate selected node and expand/collapse\n//              * If non toggle mode inactive all nodes but selected and expand/collapse\n//              */\n//             if (isActive && toggleMode) {\n//               rowInfoIter.node.active = !rowInfoIter.node.active;\n//               rowInfoIter.node.expanded = !rowInfoIter.node.expanded;\n//               currentTreeData = changeNodeAtPath({\n//                 treeData: currentTreeData,\n//                 path: rowInfoIter.path,\n//                 newNode: rowInfoIter.node,\n//                 getNodeKey: ({ treeIndex }) => treeIndex,\n//                 ignoreCollapsed: true,\n//               });\n//             } else if (isActive && !toggleMode) {\n//               rowInfoIter.node.active = isActive;\n//               rowInfoIter.node.expanded = !rowInfoIter.node.expanded;\n//               currentTreeData = changeNodeAtPath({\n//                 treeData: currentTreeData,\n//                 path: rowInfoIter.path,\n//                 newNode: rowInfoIter.node,\n//                 getNodeKey: ({ treeIndex }) => treeIndex,\n//                 ignoreCollapsed: true,\n//               });\n//             } else if (isActive != rowInfoIter.node.active && !toggleMode) {\n//               rowInfoIter.node.active = isActive;\n//               currentTreeData = changeNodeAtPath({\n//                 treeData: currentTreeData,\n//                 path: rowInfoIter.path,\n//                 newNode: rowInfoIter.node,\n//                 getNodeKey: ({ treeIndex }) => treeIndex,\n//                 ignoreCollapsed: true,\n//               });\n//             }\n//           },\n//         });\n//       } else {\n//         rowInfo.node.expanded = !rowInfo.node.expanded;\n//         currentTreeData = changeNodeAtPath({\n//           treeData: currentTreeData,\n//           path: rowInfo.path,\n//           newNode: rowInfo.node,\n//           getNodeKey: ({ treeIndex }) => treeIndex,\n//           ignoreCollapsed: true,\n//         });\n//       }\n//     } else if (rowInfo.node.children == undefined) {\n//       // If node has no children, we select the node\n//       walk({\n//         treeData: currentTreeData,\n//         getNodeKey: ({ treeIndex }) => treeIndex,\n//         ignoreCollapsed: true,\n//         callback: rowInfoIter => {\n//           const isActive = rowInfoIter.treeIndex == rowInfo.treeIndex;\n//           /*\n//            * If toggleMode just toggle to activate/inactivate selected node\n//            * If non toggle mode inactive all nodes but selected\n//            */\n//           if (isActive && toggleMode) {\n//             rowInfoIter.node.active = !rowInfoIter.node.active;\n//             currentTreeData = changeNodeAtPath({\n//               treeData: currentTreeData,\n//               path: rowInfoIter.path,\n//               newNode: rowInfoIter.node,\n//               getNodeKey: ({ treeIndex }) => treeIndex,\n//               ignoreCollapsed: true,\n//             });\n//           } else if (isActive != rowInfoIter.node.active && !toggleMode) {\n//             rowInfoIter.node.active = isActive;\n//             currentTreeData = changeNodeAtPath({\n//               treeData: currentTreeData,\n//               path: rowInfoIter.path,\n//               newNode: rowInfoIter.node,\n//               getNodeKey: ({ treeIndex }) => treeIndex,\n//               ignoreCollapsed: true,\n//             });\n//           }\n//         },\n//       });\n//     }\n\n//     // Update tree with latest changes\n//     this.updateTreeData(currentTreeData);\n\n//     // If there is a callback, we use it\n//     if (this.props.handleClick != undefined) {\n//       this.props.handleClick(event, rowInfo);\n//     }\n//   }\n\n//   getNodeProps (rowInfo) {\n//     let nodeProps = {};\n//     nodeProps['onClick'] = event => this.handleClick(event, rowInfo);\n\n//     if (this.props.getButtons !== undefined) {\n//       nodeProps['buttons'] = this.props.getButtons(rowInfo);\n//     }\n//     if (rowInfo.node.instance !== undefined) {\n//       nodeProps['style'] = { cursor: 'pointer' };\n//     }\n//     if (rowInfo.node.active) {\n//       nodeProps['className'] = 'activeNode';\n//     }\n//     if (this.props.getNodesProps !== undefined) {\n//       nodeProps['title'] = this.props.getNodesProps(rowInfo);\n//     }\n//     return nodeProps;\n//   }\n\n//   render () {\n//     const {\n//       classes,\n//       style,\n//       searchQuery,\n//       onlyExpandSearchedNodes,\n//       controls,\n//       ...others\n//     } = this.props;\n//     return (\n//       <div className={classes.treeViewer} style={style}>\n//         {controls}\n//         <SortableTree\n//           style={style}\n//           treeData={this.state.treeData}\n//           canDrag={false}\n//           scaffoldBlockPxWidth={22}\n//           generateNodeProps={rowInfo => this.getNodeProps(rowInfo)}\n//           onChange={treeData => this.updateTreeData(treeData)}\n//           searchQuery={searchQuery !== undefined ? searchQuery : null}\n//           onlyExpandSearchedNodes={\n//             onlyExpandSearchedNodes !== undefined\n//               ? onlyExpandSearchedNodes\n//               : false\n//           }\n//           {...others}\n//         />\n//       </div>\n//     );\n//   }\n// }\n\n// Tree.defaultProps = {\n//   toggleMode: false,\n//   activateParentsNodeOnClick: true,\n//   getNodesProps: () => {},\n//   controls: null,\n//   onChange: () => {},\n//   searchMethod: () => {},\n//   searchFocusOffset: 0,\n//   searchFinishCallback: () => {},\n// }\n\n// Tree.propTypes = {\n//   /**\n//    * Tree data with the following keys: title, subtitle, expanded, and children\n//    */\n//   treeData: PropTypes.array.isRequired,\n//   /**\n//    * Style applied to the container wrapping the tree\n//    */\n//   style: PropTypes.object.isRequired,\n//   /**\n//    * Either a fixed row height (number) or a function that returns the height of a row given its index\n//    */\n//   rowHeight: PropTypes.any.isRequired,\n//   /**\n//    * Function to handle node's click events\n//    */\n//   handleClick: PropTypes.func.isRequired,\n//   /**\n//    * Function to add buttons\n//    */\n//   getButtons: PropTypes.func.isRequired,\n//   /**\n//    * Boolean to activate/inactivate selected node\n//    */\n//   toggleMode: PropTypes.bool,\n//   /**\n//    * Boolean to allow parents activation or not\n//    */\n//   activateParentsNodeOnClick: PropTypes.bool,\n//   /**\n//    * Generate an object with additional props to be passed to the node render\n//    */\n//   getNodesProps: PropTypes.func,\n//   /**\n//    * Controls\n//    */\n//   controls: PropTypes.element,\n//   /**\n//    * Function to callback when change occurs\n//    */\n//   onChange: PropTypes.func,\n//   /**\n//    * Function to define search method\n//    */\n//   searchMethod: PropTypes.func,\n//   /**\n//    * Search focus offset. Defaults to zero\n//    */\n//   searchFocusOffset: PropTypes.number,\n//   /**\n//    * Function to callback when search results are ready\n//    */\n//   searchFinishCallback: PropTypes.func,\n// };\n\n// export default withStyles(styles)(Tree);\n"],"mappings":"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":[]}