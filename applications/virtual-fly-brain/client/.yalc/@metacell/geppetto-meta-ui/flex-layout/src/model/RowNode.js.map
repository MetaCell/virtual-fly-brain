{"version":3,"file":"RowNode.js","names":["_Attribute","_interopRequireDefault","require","_AttributeDefinitions","_DockLocation","_DropInfo","_Orientation","_Rect","_BorderNode","_Node2","_SplitterNode","_TabSetNode","_RowNode","obj","__esModule","_typeof","o","Symbol","iterator","constructor","prototype","_createForOfIteratorHelper","allowArrayLike","it","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","minLen","_arrayLikeToArray","Object","toString","slice","name","from","test","arr","len","arr2","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","_callSuper","t","_getPrototypeOf","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","apply","self","_assertThisInitialized","ReferenceError","Boolean","valueOf","_get","get","bind","property","receiver","base","_superPropBase","desc","getOwnPropertyDescriptor","arguments","object","hasOwnProperty","setPrototypeOf","getPrototypeOf","__proto__","_inherits","subClass","superClass","create","_setPrototypeOf","p","_defineProperty","_toPrimitive","r","toPrimitive","String","Number","RowNode","_Node","model","json","_this","_dirty","_drawChildren","minHeight","minWidth","_attributeDefinitions","fromJson","_attributes","_addNode","getWeight","weight","getWidth","_getAttr","getHeight","_setWeight","_layout","rect","metrics","pixelSize","_rect","_getSize","getOrientation","totalWeight","fixedPixels","prefPixels","totalPrefWeight","drawChildren","_getDrawChildren","_iterator","_step","child","prefSize","_getPrefSize","_isFixed","undefined","resizePreferred","availablePixels","totalSizeGiven","variableSize","_iterator2","_step2","_setTempSize","minSize","getMinSize","size","Math","floor","max","_getTempSize","_iterator3","_step3","SplitterNode","changed","_iterator4","_step4","_iterator5","_step5","_iterator6","_step6","Orientation","HORZ","Rect","x","y","height","width","_getSplitterBounds","splitterNode","useMinSize","pBounds","indexOf","node1","node2","minSize1","getMinWidth","minSize2","getRect","getRight","getMinHeight","getBottom","_calculateSplit","splitter","splitterPos","rtn","weightedLength","pixelWidth1","pixelWidth2","weight1","weight2","node1Id","getId","node2Id","_children","newSplitter","_model","_setParent","push","orientation","calcMinSize","_this2","first","forEach","c","VERT","getSplitterSize","_tidy","childChildren","getChildren","_removeChild","subchild","subChildrenTotal","subChildChildren","_iterator7","_step7","ssc","subsubChild","j","_addChild","TabSetNode","isEnableDeleteWhenEmpty","getMaximizedTabset","_setMaximizedTabset","getRoot","callback","_getOnCreateTabSet","_setActiveTabset","canDrop","dragNode","yy","xx","w","h","margin","half","dropInfo","isEnableEdgeDock","_parent","dockLocation","DockLocation","LEFT","outlineRect","getDockRect","DropInfo","RIGHT","TOP","BOTTOM","_canDockInto","drop","location","index","parent","getParent","getType","TYPE","_setSelected","BorderNode","tabSet","reduce","sum","horz","isRootOrientationVertical","vrow","hrow","_removeAll","_toJson","toJson","children","isEnableDrop","_getAttributeDefinitions","_updateAttrs","update","_fromJson","newLayoutNode","_iterator8","_step8","jsonChild","type","_createAttributeDefinitions","attributeDefinitions","AttributeDefinitions","add","setType","Attribute","STRING","setFixed","NUMBER","getAttributeDefinitions","Node","_default","exports"],"sources":["../../../../src/flex-layout/src/model/RowNode.ts"],"sourcesContent":["import { TabNode } from \"..\";\nimport Attribute from \"../Attribute\";\nimport AttributeDefinitions from \"../AttributeDefinitions\";\nimport DockLocation from \"../DockLocation\";\nimport DropInfo from \"../DropInfo\";\nimport Orientation from \"../Orientation\";\nimport Rect from \"../Rect\";\nimport BorderNode from \"./BorderNode\";\nimport IDraggable from \"./IDraggable\";\nimport IDropTarget from \"./IDropTarget\";\nimport Model, { ILayoutMetrics } from \"./Model\";\nimport Node from \"./Node\";\nimport SplitterNode from \"./SplitterNode\";\nimport TabSetNode from \"./TabSetNode\";\n\nclass RowNode extends Node implements IDropTarget {\n    static readonly TYPE = \"row\";\n\n    /** @hidden @internal */\n    static _fromJson(json: any, model: Model) {\n        const newLayoutNode = new RowNode(model, json);\n\n        if (json.children != null) {\n            for (const jsonChild of json.children) {\n                if (jsonChild.type === TabSetNode.TYPE) {\n                    const child = TabSetNode._fromJson(jsonChild, model);\n                    newLayoutNode._addChild(child);\n                } else {\n                    const child = RowNode._fromJson(jsonChild, model);\n                    newLayoutNode._addChild(child);\n                }\n            }\n        }\n\n        return newLayoutNode;\n    }\n    /** @hidden @internal */\n    private static _attributeDefinitions: AttributeDefinitions = RowNode._createAttributeDefinitions();\n\n    /** @hidden @internal */\n    private static _createAttributeDefinitions(): AttributeDefinitions {\n        const attributeDefinitions = new AttributeDefinitions();\n        attributeDefinitions.add(\"type\", RowNode.TYPE, true).setType(Attribute.STRING).setFixed();\n        attributeDefinitions.add(\"id\", undefined).setType(Attribute.STRING);\n\n        attributeDefinitions.add(\"weight\", 100).setType(Attribute.NUMBER);\n        attributeDefinitions.add(\"width\", undefined).setType(Attribute.NUMBER);\n        attributeDefinitions.add(\"height\", undefined).setType(Attribute.NUMBER);\n\n        return attributeDefinitions;\n    }\n    /** @hidden @internal */\n    private _drawChildren: (TabSetNode | RowNode | SplitterNode)[];\n    private minHeight: number;\n    private minWidth: number;\n\n    /** @hidden @internal */\n    constructor(model: Model, json: any) {\n        super(model);\n\n        this._dirty = true;\n        this._drawChildren = [];\n        this.minHeight = 0;\n        this.minWidth = 0;\n        RowNode._attributeDefinitions.fromJson(json, this._attributes);\n        model._addNode(this);\n    }\n\n    getWeight() {\n        return this._attributes.weight as number;\n    }\n\n    getWidth() {\n        return this._getAttr(\"width\") as number | undefined;\n    }\n\n    getHeight() {\n        return this._getAttr(\"height\") as number | undefined;\n    }\n\n    /** @hidden @internal */\n    _setWeight(weight: number) {\n        this._attributes.weight = weight;\n    }\n\n    /** @hidden @internal */\n    _layout(rect: Rect, metrics: ILayoutMetrics) {\n        super._layout(rect, metrics);\n\n        const pixelSize = this._rect._getSize(this.getOrientation());\n\n        let totalWeight = 0;\n        let fixedPixels = 0;\n        let prefPixels = 0;\n        let totalPrefWeight = 0;\n        const drawChildren = this._getDrawChildren() as (RowNode | TabSetNode | SplitterNode)[];\n\n        for (const child of drawChildren) {\n            const prefSize = child._getPrefSize(this.getOrientation());\n            if (child._isFixed()) {\n                if (prefSize !== undefined) {\n                    fixedPixels += prefSize;\n                }\n            } else {\n                if (prefSize === undefined) {\n                    totalWeight += child.getWeight();\n                } else {\n                    prefPixels += prefSize;\n                    totalPrefWeight += child.getWeight();\n                }\n            }\n        }\n\n        let resizePreferred = false;\n        let availablePixels = pixelSize - fixedPixels - prefPixels;\n        if (availablePixels < 0) {\n            availablePixels = pixelSize - fixedPixels;\n            resizePreferred = true;\n            totalWeight += totalPrefWeight;\n        }\n        // assign actual pixel sizes\n        let totalSizeGiven = 0;\n        let variableSize = 0;\n        for (const child of drawChildren) {\n            const prefSize = child._getPrefSize(this.getOrientation());\n            if (child._isFixed()) {\n                if (prefSize !== undefined) {\n                    child._setTempSize(prefSize);\n                }\n            } else {\n                if (prefSize == null || resizePreferred) {\n                    if (totalWeight === 0) {\n                        child._setTempSize(0);\n                    } else {\n                        const minSize = child.getMinSize(this.getOrientation());\n                        const size = Math.floor(availablePixels * (child.getWeight() / totalWeight));\n                        child._setTempSize(Math.max(minSize, size));\n                    }\n                    variableSize += child._getTempSize();\n                } else {\n                    child._setTempSize(prefSize);\n                }\n            }\n\n            totalSizeGiven += child._getTempSize();\n        }\n\n        // adjust sizes to exactly fit\n        if (variableSize > 0) {\n            while (totalSizeGiven < pixelSize) {\n                for (const child of drawChildren) {\n                    if (!(child instanceof SplitterNode)) {\n                        const prefSize = child._getPrefSize(this.getOrientation());\n                        if (!child._isFixed() && (prefSize === undefined || resizePreferred) && totalSizeGiven < pixelSize) {\n                            child._setTempSize(child._getTempSize() + 1);\n                            totalSizeGiven++;\n                        }\n                    }\n                }\n            }\n\n            // decrease size using nodes not at there minimum\n            while (totalSizeGiven > pixelSize) {\n                let changed = false;\n                for (const child of drawChildren) {\n                    if (!(child instanceof SplitterNode)) {\n                        const minSize = child.getMinSize(this.getOrientation());\n                        const size = child._getTempSize();\n                        if (size > minSize && totalSizeGiven > pixelSize) {\n                            child._setTempSize(child._getTempSize() - 1);\n                            totalSizeGiven--;\n                            changed = true;\n                        }\n                    }\n                }\n                if (!changed) {\n                    // all children are at min values\n                    break;\n                }\n            }\n\n            // if still too big then simply reduce all nodes until fits\n            while (totalSizeGiven > pixelSize) {\n                let changed = false;\n                for (const child of drawChildren) {\n                    if (!(child instanceof SplitterNode)) {\n                        const size = child._getTempSize();\n                        if (size > 0 && totalSizeGiven > pixelSize) {\n                            child._setTempSize(child._getTempSize() - 1);\n                            totalSizeGiven--;\n                            changed = true;\n                        }\n                    }\n                }\n                if (!changed) {\n                    // all children are at 0 values\n                    break;\n                }\n            }\n        }\n\n        // layout children\n        let p = 0;\n        for (const child of drawChildren) {\n            if (this.getOrientation() === Orientation.HORZ) {\n                child._layout(new Rect(this._rect.x + p, this._rect.y, child._getTempSize(), this._rect.height), metrics);\n            } else {\n                child._layout(new Rect(this._rect.x, this._rect.y + p, this._rect.width, child._getTempSize()), metrics);\n            }\n            p += child._getTempSize();\n        }\n\n        return true;\n    }\n\n    /** @hidden @internal */\n    _getSplitterBounds(splitterNode: SplitterNode, useMinSize: boolean = false) {\n        const pBounds = [0, 0];\n        const drawChildren = this._getDrawChildren() as (RowNode | TabSetNode | SplitterNode)[];\n        const p = drawChildren.indexOf(splitterNode);\n        const node1 = drawChildren[p - 1];\n        const node2 = drawChildren[p + 1];\n        if (this.getOrientation() === Orientation.HORZ) {\n            const minSize1 = useMinSize ? node1.getMinWidth() : 0;\n            const minSize2 = useMinSize ? node2.getMinWidth() : 0;\n            pBounds[0] = node1.getRect().x + minSize1;\n            pBounds[1] = node2.getRect().getRight() - splitterNode.getWidth() - minSize2;\n        } else {\n            const minSize1 = useMinSize ? node1.getMinHeight() : 0;\n            const minSize2 = useMinSize ? node2.getMinHeight() : 0;\n            pBounds[0] = node1.getRect().y + minSize1;\n            pBounds[1] = node2.getRect().getBottom() - splitterNode.getHeight() - minSize2;\n        }\n        return pBounds;\n    }\n\n    /** @hidden @internal */\n    _calculateSplit(splitter: SplitterNode, splitterPos: number) {\n        let rtn;\n        const drawChildren = this._getDrawChildren() as (RowNode | TabSetNode | SplitterNode)[];\n        const p = drawChildren.indexOf(splitter);\n        const pBounds = this._getSplitterBounds(splitter);\n\n        const weightedLength = drawChildren[p - 1].getWeight() + drawChildren[p + 1].getWeight();\n\n        const pixelWidth1 = Math.max(0, splitterPos - pBounds[0]);\n        const pixelWidth2 = Math.max(0, pBounds[1] - splitterPos);\n\n        if (pixelWidth1 + pixelWidth2 > 0) {\n            const weight1 = (pixelWidth1 * weightedLength) / (pixelWidth1 + pixelWidth2);\n            const weight2 = (pixelWidth2 * weightedLength) / (pixelWidth1 + pixelWidth2);\n\n            rtn = {\n                node1Id: drawChildren[p - 1].getId(),\n                weight1,\n                pixelWidth1,\n                node2Id: drawChildren[p + 1].getId(),\n                weight2,\n                pixelWidth2,\n            };\n        }\n\n        return rtn;\n    }\n\n    /** @hidden @internal */\n    _getDrawChildren(): Node[] | undefined {\n        if (this._dirty) {\n            this._drawChildren = [];\n\n            for (let i = 0; i < this._children.length; i++) {\n                const child = this._children[i] as RowNode | TabSetNode;\n                if (i !== 0) {\n                    const newSplitter = new SplitterNode(this._model);\n                    newSplitter._setParent(this);\n                    this._drawChildren.push(newSplitter);\n                }\n                this._drawChildren.push(child);\n            }\n            this._dirty = false;\n        }\n\n        return this._drawChildren;\n    }\n\n    /** @hidden @internal */\n    getMinSize(orientation: Orientation) {\n        if (orientation === Orientation.HORZ) {\n            return this.getMinWidth();\n        } else {\n            return this.getMinHeight();\n        }\n    }\n\n    /** @hidden @internal */\n    getMinWidth() {\n        return this.minWidth;\n    }\n\n    /** @hidden @internal */\n    getMinHeight() {\n        return this.minHeight;\n    }\n\n    /** @hidden @internal */\n    calcMinSize() {\n        this.minHeight = 0;\n        this.minWidth = 0;\n        let first = true;\n        this._children.forEach((child) => {\n            const c = child as RowNode | TabSetNode;\n            if (c instanceof RowNode) {\n                c.calcMinSize();\n            }\n            if (this.getOrientation() === Orientation.VERT) {\n                this.minHeight += c.getMinHeight();\n                if (!first) {\n                    this.minHeight += this._model.getSplitterSize();\n                }\n                this.minWidth = Math.max(this.minWidth, c.getMinWidth());\n            } else {\n                this.minWidth += c.getMinWidth();\n                if (!first) {\n                    this.minWidth += this._model.getSplitterSize();\n                }\n                this.minHeight = Math.max(this.minHeight, c.getMinHeight());\n            }\n            first = false;\n        });\n    }\n\n    /** @hidden @internal */\n    _tidy() {\n        let i = 0;\n        while (i < this._children.length) {\n            const child = this._children[i];\n            if (child instanceof RowNode) {\n                child._tidy();\n\n                const childChildren = child.getChildren();\n                if (childChildren.length === 0) {\n                    this._removeChild(child);\n                } else if (childChildren.length === 1) {\n                    // hoist child/children up to this level\n                    const subchild = childChildren[0];\n                    this._removeChild(child);\n                    if (subchild instanceof RowNode) {\n                        let subChildrenTotal = 0;\n                        const subChildChildren = subchild.getChildren();\n                        for (const ssc of subChildChildren) {\n                            const subsubChild = ssc as RowNode | TabSetNode;\n                            subChildrenTotal += subsubChild.getWeight();\n                        }\n                        for (let j = 0; j < subChildChildren.length; j++) {\n                            const subsubChild = subChildChildren[j] as RowNode | TabSetNode;\n                            subsubChild._setWeight((child.getWeight() * subsubChild.getWeight()) / subChildrenTotal);\n                            this._addChild(subsubChild, i + j);\n                        }\n                    } else {\n                        subchild._setWeight(child.getWeight());\n                        this._addChild(subchild, i);\n                    }\n                } else {\n                    i++;\n                }\n            } else if (child instanceof TabSetNode && child.getChildren().length === 0) {\n                if (child.isEnableDeleteWhenEmpty()) {\n                    this._removeChild(child);\n                    if (child === this._model.getMaximizedTabset()) {\n                        this._model._setMaximizedTabset(undefined);\n                    }\n                } else {\n                    i++;\n                }\n            } else {\n                i++;\n            }\n        }\n\n        // add tabset into empty root\n        if (this === this._model.getRoot() && this._children.length === 0) {\n            const callback = this._model._getOnCreateTabSet();\n            const child = new TabSetNode(this._model, callback ? callback() : {});\n            this._model._setActiveTabset(child);\n            this._addChild(child);\n        }\n\n    }\n\n    /** @hidden @internal */\n    canDrop(dragNode: Node & IDraggable, x: number, y: number): DropInfo | undefined {\n        const yy = y - this._rect.y;\n        const xx = x - this._rect.x;\n        const w = this._rect.width;\n        const h = this._rect.height;\n        const margin = 10; // height of edge rect\n        const half = 50; // half width of edge rect\n        let dropInfo;\n\n        if (this._model.isEnableEdgeDock() && this._parent === undefined) {\n            // _root row\n            if (x < this._rect.x + margin && yy > h / 2 - half && yy < h / 2 + half) {\n                const dockLocation = DockLocation.LEFT;\n                const outlineRect = dockLocation.getDockRect(this._rect);\n                outlineRect.width = outlineRect.width / 2;\n                dropInfo = new DropInfo(this, outlineRect, dockLocation, -1, \"flexlayout__outline_rect_edge\");\n            } else if (x > this._rect.getRight() - margin && yy > h / 2 - half && yy < h / 2 + half) {\n                const dockLocation = DockLocation.RIGHT;\n                const outlineRect = dockLocation.getDockRect(this._rect);\n                outlineRect.width = outlineRect.width / 2;\n                outlineRect.x += outlineRect.width;\n                dropInfo = new DropInfo(this, outlineRect, dockLocation, -1, \"flexlayout__outline_rect_edge\");\n            } else if (y < this._rect.y + margin && xx > w / 2 - half && xx < w / 2 + half) {\n                const dockLocation = DockLocation.TOP;\n                const outlineRect = dockLocation.getDockRect(this._rect);\n                outlineRect.height = outlineRect.height / 2;\n                dropInfo = new DropInfo(this, outlineRect, dockLocation, -1, \"flexlayout__outline_rect_edge\");\n            } else if (y > this._rect.getBottom() - margin && xx > w / 2 - half && xx < w / 2 + half) {\n                const dockLocation = DockLocation.BOTTOM;\n                const outlineRect = dockLocation.getDockRect(this._rect);\n                outlineRect.height = outlineRect.height / 2;\n                outlineRect.y += outlineRect.height;\n                dropInfo = new DropInfo(this, outlineRect, dockLocation, -1, \"flexlayout__outline_rect_edge\");\n            }\n\n            if (dropInfo !== undefined) {\n                if (!dragNode._canDockInto(dragNode, dropInfo)) {\n                    return undefined;\n                }\n            }\n        }\n\n        return dropInfo;\n    }\n\n    /** @hidden @internal */\n    drop(dragNode: Node & IDraggable, location: DockLocation, index: number): void {\n        const dockLocation = location;\n\n        const parent = dragNode.getParent();\n\n        if (parent) {\n            parent._removeChild(dragNode);\n        }\n\n        if (parent !== undefined && parent!.getType() === TabSetNode.TYPE) {\n            parent._setSelected(0);\n        }\n\n        if (parent !== undefined && parent!.getType() === BorderNode.TYPE) {\n            parent._setSelected(-1);\n        }\n\n        let tabSet: TabSetNode | undefined;\n        if (dragNode instanceof TabSetNode) {\n            tabSet = dragNode;\n        } else {\n            const callback = this._model._getOnCreateTabSet();\n            tabSet = new TabSetNode(this._model, callback ? callback(dragNode as TabNode) : {});\n            tabSet._addChild(dragNode);\n        }\n        let size = this._children.reduce((sum, child) => {\n            return sum + (child as RowNode | TabSetNode).getWeight();\n        }, 0);\n\n        if (size === 0) {\n            size = 100;\n        }\n\n        tabSet._setWeight(size / 3);\n\n        const horz = !this._model.isRootOrientationVertical();\n\n        if (horz && dockLocation === DockLocation.LEFT || !horz && dockLocation === DockLocation.TOP) {\n            this._addChild(tabSet, 0);\n        } else if (horz && dockLocation === DockLocation.RIGHT || !horz && dockLocation === DockLocation.BOTTOM) {\n            this._addChild(tabSet);\n        } else if (horz && dockLocation === DockLocation.TOP || !horz && dockLocation === DockLocation.LEFT) {\n            const vrow = new RowNode(this._model, {});\n            const hrow = new RowNode(this._model, {});\n            hrow._setWeight(75);\n            tabSet._setWeight(25);\n            this._children.forEach((child) => {\n                hrow._addChild(child);\n            });\n            this._removeAll();\n            vrow._addChild(tabSet);\n            vrow._addChild(hrow);\n            this._addChild(vrow);\n        } else if (horz && dockLocation === DockLocation.BOTTOM || !horz && dockLocation === DockLocation.RIGHT) {\n            const vrow = new RowNode(this._model, {});\n            const hrow = new RowNode(this._model, {});\n            hrow._setWeight(75);\n            tabSet._setWeight(25);\n            this._children.forEach((child) => {\n                hrow._addChild(child);\n            });\n            this._removeAll();\n            vrow._addChild(hrow);\n            vrow._addChild(tabSet);\n            this._addChild(vrow);\n        }\n\n        this._model._setActiveTabset(tabSet);\n\n        this._model._tidy();\n    }\n\n    /** @hidden @internal */\n    _toJson() {\n        const json: any = {};\n        RowNode._attributeDefinitions.toJson(json, this._attributes);\n\n        json.children = [];\n        this._children.forEach((child) => {\n            json.children.push(child._toJson());\n        });\n\n        return json;\n    }\n\n    isEnableDrop() {\n        return true;\n    }\n\n    /** @hidden @internal */\n    _getPrefSize(orientation: Orientation) {\n        let prefSize = this.getWidth();\n        if (orientation === Orientation.VERT) {\n            prefSize = this.getHeight();\n        }\n        return prefSize;\n    }\n\n    /** @hidden @internal */\n    _getAttributeDefinitions() {\n        return RowNode._attributeDefinitions;\n    }\n\n    /** @hidden @internal */\n    _updateAttrs(json: any) {\n        RowNode._attributeDefinitions.update(json, this._attributes);\n    }\n\n    /** @hidden @internal */\n    static getAttributeDefinitions() {\n        return RowNode._attributeDefinitions;\n    }\n\n}\n\nexport default RowNode;\n"],"mappings":"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","ignoreList":[]}